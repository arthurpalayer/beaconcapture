
SeniorDesignTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf68  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800c028  0800c028  0000d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e4  0800c5e4  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5e4  0800c5e4  0000e1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5e4  0800c5e4  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e4  0800c5e4  0000d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c5ec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  200001d4  0800c7c0  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800c7c0  0000e89c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac2e  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b7  00000000  00000000  00028e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d627  00000000  00000000  0002dd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017721  00000000  00000000  0004b39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae9af  00000000  00000000  00062abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011146e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d24  00000000  00000000  001114b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001181d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c00c 	.word	0x0800c00c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800c00c 	.word	0x0800c00c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fc0b 	bl	8001c54 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fb4b 	bl	8001ae4 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fbfd 	bl	8001c54 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fbf3 	bl	8001c54 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fb75 	bl	8001b6c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fb6b 	bl	8001b6c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_d2uiz>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2200      	movs	r2, #0
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <__aeabi_d2uiz+0x38>)
 80004aa:	0004      	movs	r4, r0
 80004ac:	000d      	movs	r5, r1
 80004ae:	f7ff ffef 	bl	8000490 <__aeabi_dcmpge>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d104      	bne.n	80004c0 <__aeabi_d2uiz+0x1c>
 80004b6:	0020      	movs	r0, r4
 80004b8:	0029      	movs	r1, r5
 80004ba:	f002 fac3 	bl	8002a44 <__aeabi_d2iz>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <__aeabi_d2uiz+0x38>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	0020      	movs	r0, r4
 80004c6:	0029      	movs	r1, r5
 80004c8:	f001 fefe 	bl	80022c8 <__aeabi_dsub>
 80004cc:	f002 faba 	bl	8002a44 <__aeabi_d2iz>
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	469c      	mov	ip, r3
 80004d6:	4460      	add	r0, ip
 80004d8:	e7f1      	b.n	80004be <__aeabi_d2uiz+0x1a>
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	41e00000 	.word	0x41e00000

080004e0 <__aeabi_d2lz>:
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	0004      	movs	r4, r0
 80004e8:	000d      	movs	r5, r1
 80004ea:	f7ff ffb3 	bl	8000454 <__aeabi_dcmplt>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d108      	bne.n	8000504 <__aeabi_d2lz+0x24>
 80004f2:	0020      	movs	r0, r4
 80004f4:	0029      	movs	r1, r5
 80004f6:	f000 f80f 	bl	8000518 <__aeabi_d2ulz>
 80004fa:	0002      	movs	r2, r0
 80004fc:	000b      	movs	r3, r1
 80004fe:	0010      	movs	r0, r2
 8000500:	0019      	movs	r1, r3
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	18e9      	adds	r1, r5, r3
 800050a:	0020      	movs	r0, r4
 800050c:	f000 f804 	bl	8000518 <__aeabi_d2ulz>
 8000510:	2300      	movs	r3, #0
 8000512:	4242      	negs	r2, r0
 8000514:	418b      	sbcs	r3, r1
 8000516:	e7f2      	b.n	80004fe <__aeabi_d2lz+0x1e>

08000518 <__aeabi_d2ulz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <__aeabi_d2ulz+0x34>)
 800051e:	000d      	movs	r5, r1
 8000520:	0004      	movs	r4, r0
 8000522:	f001 fc09 	bl	8001d38 <__aeabi_dmul>
 8000526:	f7ff ffbd 	bl	80004a4 <__aeabi_d2uiz>
 800052a:	0006      	movs	r6, r0
 800052c:	f002 faf4 	bl	8002b18 <__aeabi_ui2d>
 8000530:	2200      	movs	r2, #0
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <__aeabi_d2ulz+0x38>)
 8000534:	f001 fc00 	bl	8001d38 <__aeabi_dmul>
 8000538:	0002      	movs	r2, r0
 800053a:	000b      	movs	r3, r1
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fec2 	bl	80022c8 <__aeabi_dsub>
 8000544:	f7ff ffae 	bl	80004a4 <__aeabi_d2uiz>
 8000548:	0031      	movs	r1, r6
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	3df00000 	.word	0x3df00000
 8000550:	41f00000 	.word	0x41f00000

08000554 <__aeabi_l2d>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	0006      	movs	r6, r0
 8000558:	0008      	movs	r0, r1
 800055a:	f002 faaf 	bl	8002abc <__aeabi_i2d>
 800055e:	2200      	movs	r2, #0
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_l2d+0x28>)
 8000562:	f001 fbe9 	bl	8001d38 <__aeabi_dmul>
 8000566:	000d      	movs	r5, r1
 8000568:	0004      	movs	r4, r0
 800056a:	0030      	movs	r0, r6
 800056c:	f002 fad4 	bl	8002b18 <__aeabi_ui2d>
 8000570:	002b      	movs	r3, r5
 8000572:	0022      	movs	r2, r4
 8000574:	f000 fc38 	bl	8000de8 <__aeabi_dadd>
 8000578:	bd70      	pop	{r4, r5, r6, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41f00000 	.word	0x41f00000

08000580 <__aeabi_fadd>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	46ce      	mov	lr, r9
 8000584:	4647      	mov	r7, r8
 8000586:	0243      	lsls	r3, r0, #9
 8000588:	0a5a      	lsrs	r2, r3, #9
 800058a:	024e      	lsls	r6, r1, #9
 800058c:	0045      	lsls	r5, r0, #1
 800058e:	0fc4      	lsrs	r4, r0, #31
 8000590:	0048      	lsls	r0, r1, #1
 8000592:	4691      	mov	r9, r2
 8000594:	0e2d      	lsrs	r5, r5, #24
 8000596:	0a72      	lsrs	r2, r6, #9
 8000598:	0e00      	lsrs	r0, r0, #24
 800059a:	4694      	mov	ip, r2
 800059c:	b580      	push	{r7, lr}
 800059e:	099b      	lsrs	r3, r3, #6
 80005a0:	0fc9      	lsrs	r1, r1, #31
 80005a2:	09b6      	lsrs	r6, r6, #6
 80005a4:	1a2a      	subs	r2, r5, r0
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d021      	beq.n	80005ee <__aeabi_fadd+0x6e>
 80005aa:	2a00      	cmp	r2, #0
 80005ac:	dd0d      	ble.n	80005ca <__aeabi_fadd+0x4a>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d12d      	bne.n	800060e <__aeabi_fadd+0x8e>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x38>
 80005b6:	e08d      	b.n	80006d4 <__aeabi_fadd+0x154>
 80005b8:	1e51      	subs	r1, r2, #1
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x40>
 80005be:	e11d      	b.n	80007fc <__aeabi_fadd+0x27c>
 80005c0:	2aff      	cmp	r2, #255	@ 0xff
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x46>
 80005c4:	e0ab      	b.n	800071e <__aeabi_fadd+0x19e>
 80005c6:	000a      	movs	r2, r1
 80005c8:	e027      	b.n	800061a <__aeabi_fadd+0x9a>
 80005ca:	2a00      	cmp	r2, #0
 80005cc:	d04d      	beq.n	800066a <__aeabi_fadd+0xea>
 80005ce:	1b42      	subs	r2, r0, r5
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x56>
 80005d4:	e0cc      	b.n	8000770 <__aeabi_fadd+0x1f0>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d100      	bne.n	80005dc <__aeabi_fadd+0x5c>
 80005da:	e079      	b.n	80006d0 <__aeabi_fadd+0x150>
 80005dc:	1e54      	subs	r4, r2, #1
 80005de:	2a01      	cmp	r2, #1
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fadd+0x64>
 80005e2:	e128      	b.n	8000836 <__aeabi_fadd+0x2b6>
 80005e4:	2aff      	cmp	r2, #255	@ 0xff
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x6a>
 80005e8:	e097      	b.n	800071a <__aeabi_fadd+0x19a>
 80005ea:	0022      	movs	r2, r4
 80005ec:	e0c5      	b.n	800077a <__aeabi_fadd+0x1fa>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	dc00      	bgt.n	80005f4 <__aeabi_fadd+0x74>
 80005f2:	e096      	b.n	8000722 <__aeabi_fadd+0x1a2>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d04f      	beq.n	8000698 <__aeabi_fadd+0x118>
 80005f8:	2dff      	cmp	r5, #255	@ 0xff
 80005fa:	d100      	bne.n	80005fe <__aeabi_fadd+0x7e>
 80005fc:	e08f      	b.n	800071e <__aeabi_fadd+0x19e>
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	04c9      	lsls	r1, r1, #19
 8000602:	430e      	orrs	r6, r1
 8000604:	2a1b      	cmp	r2, #27
 8000606:	dd51      	ble.n	80006ac <__aeabi_fadd+0x12c>
 8000608:	002a      	movs	r2, r5
 800060a:	3301      	adds	r3, #1
 800060c:	e018      	b.n	8000640 <__aeabi_fadd+0xc0>
 800060e:	2dff      	cmp	r5, #255	@ 0xff
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x94>
 8000612:	e084      	b.n	800071e <__aeabi_fadd+0x19e>
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	04c9      	lsls	r1, r1, #19
 8000618:	430e      	orrs	r6, r1
 800061a:	2101      	movs	r1, #1
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dc08      	bgt.n	8000632 <__aeabi_fadd+0xb2>
 8000620:	0031      	movs	r1, r6
 8000622:	2020      	movs	r0, #32
 8000624:	40d1      	lsrs	r1, r2
 8000626:	1a82      	subs	r2, r0, r2
 8000628:	4096      	lsls	r6, r2
 800062a:	0032      	movs	r2, r6
 800062c:	1e50      	subs	r0, r2, #1
 800062e:	4182      	sbcs	r2, r0
 8000630:	4311      	orrs	r1, r2
 8000632:	1a5b      	subs	r3, r3, r1
 8000634:	015a      	lsls	r2, r3, #5
 8000636:	d459      	bmi.n	80006ec <__aeabi_fadd+0x16c>
 8000638:	2107      	movs	r1, #7
 800063a:	002a      	movs	r2, r5
 800063c:	4019      	ands	r1, r3
 800063e:	d049      	beq.n	80006d4 <__aeabi_fadd+0x154>
 8000640:	210f      	movs	r1, #15
 8000642:	4019      	ands	r1, r3
 8000644:	2904      	cmp	r1, #4
 8000646:	d000      	beq.n	800064a <__aeabi_fadd+0xca>
 8000648:	3304      	adds	r3, #4
 800064a:	0159      	lsls	r1, r3, #5
 800064c:	d542      	bpl.n	80006d4 <__aeabi_fadd+0x154>
 800064e:	1c50      	adds	r0, r2, #1
 8000650:	2afe      	cmp	r2, #254	@ 0xfe
 8000652:	d03a      	beq.n	80006ca <__aeabi_fadd+0x14a>
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b2c0      	uxtb	r0, r0
 8000658:	0a5b      	lsrs	r3, r3, #9
 800065a:	05c0      	lsls	r0, r0, #23
 800065c:	4318      	orrs	r0, r3
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4320      	orrs	r0, r4
 8000662:	bcc0      	pop	{r6, r7}
 8000664:	46b9      	mov	r9, r7
 8000666:	46b0      	mov	r8, r6
 8000668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800066a:	20fe      	movs	r0, #254	@ 0xfe
 800066c:	4680      	mov	r8, r0
 800066e:	1c6f      	adds	r7, r5, #1
 8000670:	0038      	movs	r0, r7
 8000672:	4647      	mov	r7, r8
 8000674:	4207      	tst	r7, r0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0xfa>
 8000678:	e08e      	b.n	8000798 <__aeabi_fadd+0x218>
 800067a:	2d00      	cmp	r5, #0
 800067c:	d000      	beq.n	8000680 <__aeabi_fadd+0x100>
 800067e:	e0b4      	b.n	80007ea <__aeabi_fadd+0x26a>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x106>
 8000684:	e0db      	b.n	800083e <__aeabi_fadd+0x2be>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d06c      	beq.n	8000764 <__aeabi_fadd+0x1e4>
 800068a:	1b98      	subs	r0, r3, r6
 800068c:	0145      	lsls	r5, r0, #5
 800068e:	d400      	bmi.n	8000692 <__aeabi_fadd+0x112>
 8000690:	e0f7      	b.n	8000882 <__aeabi_fadd+0x302>
 8000692:	000c      	movs	r4, r1
 8000694:	1af3      	subs	r3, r6, r3
 8000696:	e03d      	b.n	8000714 <__aeabi_fadd+0x194>
 8000698:	2e00      	cmp	r6, #0
 800069a:	d01b      	beq.n	80006d4 <__aeabi_fadd+0x154>
 800069c:	1e51      	subs	r1, r2, #1
 800069e:	2a01      	cmp	r2, #1
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x124>
 80006a2:	e082      	b.n	80007aa <__aeabi_fadd+0x22a>
 80006a4:	2aff      	cmp	r2, #255	@ 0xff
 80006a6:	d03a      	beq.n	800071e <__aeabi_fadd+0x19e>
 80006a8:	000a      	movs	r2, r1
 80006aa:	e7ab      	b.n	8000604 <__aeabi_fadd+0x84>
 80006ac:	0031      	movs	r1, r6
 80006ae:	2020      	movs	r0, #32
 80006b0:	40d1      	lsrs	r1, r2
 80006b2:	1a82      	subs	r2, r0, r2
 80006b4:	4096      	lsls	r6, r2
 80006b6:	0032      	movs	r2, r6
 80006b8:	1e50      	subs	r0, r2, #1
 80006ba:	4182      	sbcs	r2, r0
 80006bc:	430a      	orrs	r2, r1
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	015a      	lsls	r2, r3, #5
 80006c2:	d5b9      	bpl.n	8000638 <__aeabi_fadd+0xb8>
 80006c4:	1c6a      	adds	r2, r5, #1
 80006c6:	2dfe      	cmp	r5, #254	@ 0xfe
 80006c8:	d175      	bne.n	80007b6 <__aeabi_fadd+0x236>
 80006ca:	20ff      	movs	r0, #255	@ 0xff
 80006cc:	2300      	movs	r3, #0
 80006ce:	e7c4      	b.n	800065a <__aeabi_fadd+0xda>
 80006d0:	000c      	movs	r4, r1
 80006d2:	0033      	movs	r3, r6
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	2aff      	cmp	r2, #255	@ 0xff
 80006d8:	d146      	bne.n	8000768 <__aeabi_fadd+0x1e8>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f5      	beq.n	80006ca <__aeabi_fadd+0x14a>
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	03d2      	lsls	r2, r2, #15
 80006e2:	4313      	orrs	r3, r2
 80006e4:	025b      	lsls	r3, r3, #9
 80006e6:	20ff      	movs	r0, #255	@ 0xff
 80006e8:	0a5b      	lsrs	r3, r3, #9
 80006ea:	e7b6      	b.n	800065a <__aeabi_fadd+0xda>
 80006ec:	019f      	lsls	r7, r3, #6
 80006ee:	09bf      	lsrs	r7, r7, #6
 80006f0:	0038      	movs	r0, r7
 80006f2:	f002 fb01 	bl	8002cf8 <__clzsi2>
 80006f6:	3805      	subs	r0, #5
 80006f8:	4087      	lsls	r7, r0
 80006fa:	4285      	cmp	r5, r0
 80006fc:	dc24      	bgt.n	8000748 <__aeabi_fadd+0x1c8>
 80006fe:	003b      	movs	r3, r7
 8000700:	2120      	movs	r1, #32
 8000702:	1b42      	subs	r2, r0, r5
 8000704:	3201      	adds	r2, #1
 8000706:	40d3      	lsrs	r3, r2
 8000708:	1a8a      	subs	r2, r1, r2
 800070a:	4097      	lsls	r7, r2
 800070c:	1e7a      	subs	r2, r7, #1
 800070e:	4197      	sbcs	r7, r2
 8000710:	2200      	movs	r2, #0
 8000712:	433b      	orrs	r3, r7
 8000714:	0759      	lsls	r1, r3, #29
 8000716:	d193      	bne.n	8000640 <__aeabi_fadd+0xc0>
 8000718:	e797      	b.n	800064a <__aeabi_fadd+0xca>
 800071a:	000c      	movs	r4, r1
 800071c:	0033      	movs	r3, r6
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	e7db      	b.n	80006da <__aeabi_fadd+0x15a>
 8000722:	2a00      	cmp	r2, #0
 8000724:	d014      	beq.n	8000750 <__aeabi_fadd+0x1d0>
 8000726:	1b42      	subs	r2, r0, r5
 8000728:	2d00      	cmp	r5, #0
 800072a:	d14b      	bne.n	80007c4 <__aeabi_fadd+0x244>
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0d0      	beq.n	80006d2 <__aeabi_fadd+0x152>
 8000730:	1e51      	subs	r1, r2, #1
 8000732:	2a01      	cmp	r2, #1
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x1b8>
 8000736:	e09e      	b.n	8000876 <__aeabi_fadd+0x2f6>
 8000738:	2aff      	cmp	r2, #255	@ 0xff
 800073a:	d0ef      	beq.n	800071c <__aeabi_fadd+0x19c>
 800073c:	000a      	movs	r2, r1
 800073e:	2a1b      	cmp	r2, #27
 8000740:	dd5f      	ble.n	8000802 <__aeabi_fadd+0x282>
 8000742:	0002      	movs	r2, r0
 8000744:	1c73      	adds	r3, r6, #1
 8000746:	e77b      	b.n	8000640 <__aeabi_fadd+0xc0>
 8000748:	4b50      	ldr	r3, [pc, #320]	@ (800088c <__aeabi_fadd+0x30c>)
 800074a:	1a2a      	subs	r2, r5, r0
 800074c:	403b      	ands	r3, r7
 800074e:	e7e1      	b.n	8000714 <__aeabi_fadd+0x194>
 8000750:	21fe      	movs	r1, #254	@ 0xfe
 8000752:	1c6a      	adds	r2, r5, #1
 8000754:	4211      	tst	r1, r2
 8000756:	d13b      	bne.n	80007d0 <__aeabi_fadd+0x250>
 8000758:	2d00      	cmp	r5, #0
 800075a:	d15d      	bne.n	8000818 <__aeabi_fadd+0x298>
 800075c:	2b00      	cmp	r3, #0
 800075e:	d07f      	beq.n	8000860 <__aeabi_fadd+0x2e0>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d17f      	bne.n	8000864 <__aeabi_fadd+0x2e4>
 8000764:	2200      	movs	r2, #0
 8000766:	08db      	lsrs	r3, r3, #3
 8000768:	025b      	lsls	r3, r3, #9
 800076a:	0a5b      	lsrs	r3, r3, #9
 800076c:	b2d0      	uxtb	r0, r2
 800076e:	e774      	b.n	800065a <__aeabi_fadd+0xda>
 8000770:	28ff      	cmp	r0, #255	@ 0xff
 8000772:	d0d2      	beq.n	800071a <__aeabi_fadd+0x19a>
 8000774:	2480      	movs	r4, #128	@ 0x80
 8000776:	04e4      	lsls	r4, r4, #19
 8000778:	4323      	orrs	r3, r4
 800077a:	2401      	movs	r4, #1
 800077c:	2a1b      	cmp	r2, #27
 800077e:	dc07      	bgt.n	8000790 <__aeabi_fadd+0x210>
 8000780:	001c      	movs	r4, r3
 8000782:	2520      	movs	r5, #32
 8000784:	40d4      	lsrs	r4, r2
 8000786:	1aaa      	subs	r2, r5, r2
 8000788:	4093      	lsls	r3, r2
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	431c      	orrs	r4, r3
 8000790:	1b33      	subs	r3, r6, r4
 8000792:	0005      	movs	r5, r0
 8000794:	000c      	movs	r4, r1
 8000796:	e74d      	b.n	8000634 <__aeabi_fadd+0xb4>
 8000798:	1b9f      	subs	r7, r3, r6
 800079a:	017a      	lsls	r2, r7, #5
 800079c:	d422      	bmi.n	80007e4 <__aeabi_fadd+0x264>
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d1a6      	bne.n	80006f0 <__aeabi_fadd+0x170>
 80007a2:	2400      	movs	r4, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	e757      	b.n	800065a <__aeabi_fadd+0xda>
 80007aa:	199b      	adds	r3, r3, r6
 80007ac:	2501      	movs	r5, #1
 80007ae:	3201      	adds	r2, #1
 80007b0:	0159      	lsls	r1, r3, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fadd+0x236>
 80007b4:	e740      	b.n	8000638 <__aeabi_fadd+0xb8>
 80007b6:	2101      	movs	r1, #1
 80007b8:	4835      	ldr	r0, [pc, #212]	@ (8000890 <__aeabi_fadd+0x310>)
 80007ba:	4019      	ands	r1, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	4003      	ands	r3, r0
 80007c0:	430b      	orrs	r3, r1
 80007c2:	e7a7      	b.n	8000714 <__aeabi_fadd+0x194>
 80007c4:	28ff      	cmp	r0, #255	@ 0xff
 80007c6:	d0a9      	beq.n	800071c <__aeabi_fadd+0x19c>
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	04c9      	lsls	r1, r1, #19
 80007cc:	430b      	orrs	r3, r1
 80007ce:	e7b6      	b.n	800073e <__aeabi_fadd+0x1be>
 80007d0:	2aff      	cmp	r2, #255	@ 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0x256>
 80007d4:	e779      	b.n	80006ca <__aeabi_fadd+0x14a>
 80007d6:	199b      	adds	r3, r3, r6
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	0759      	lsls	r1, r3, #29
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x260>
 80007de:	e72f      	b.n	8000640 <__aeabi_fadd+0xc0>
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	e7c1      	b.n	8000768 <__aeabi_fadd+0x1e8>
 80007e4:	000c      	movs	r4, r1
 80007e6:	1af7      	subs	r7, r6, r3
 80007e8:	e782      	b.n	80006f0 <__aeabi_fadd+0x170>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d12c      	bne.n	8000848 <__aeabi_fadd+0x2c8>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d193      	bne.n	800071a <__aeabi_fadd+0x19a>
 80007f2:	2380      	movs	r3, #128	@ 0x80
 80007f4:	2400      	movs	r4, #0
 80007f6:	20ff      	movs	r0, #255	@ 0xff
 80007f8:	03db      	lsls	r3, r3, #15
 80007fa:	e72e      	b.n	800065a <__aeabi_fadd+0xda>
 80007fc:	2501      	movs	r5, #1
 80007fe:	1b9b      	subs	r3, r3, r6
 8000800:	e718      	b.n	8000634 <__aeabi_fadd+0xb4>
 8000802:	0019      	movs	r1, r3
 8000804:	2520      	movs	r5, #32
 8000806:	40d1      	lsrs	r1, r2
 8000808:	1aaa      	subs	r2, r5, r2
 800080a:	4093      	lsls	r3, r2
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	4193      	sbcs	r3, r2
 8000810:	430b      	orrs	r3, r1
 8000812:	0005      	movs	r5, r0
 8000814:	199b      	adds	r3, r3, r6
 8000816:	e753      	b.n	80006c0 <__aeabi_fadd+0x140>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x29e>
 800081c:	e77e      	b.n	800071c <__aeabi_fadd+0x19c>
 800081e:	2e00      	cmp	r6, #0
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x2a4>
 8000822:	e77c      	b.n	800071e <__aeabi_fadd+0x19e>
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	03d2      	lsls	r2, r2, #15
 8000828:	4591      	cmp	r9, r2
 800082a:	d302      	bcc.n	8000832 <__aeabi_fadd+0x2b2>
 800082c:	4594      	cmp	ip, r2
 800082e:	d200      	bcs.n	8000832 <__aeabi_fadd+0x2b2>
 8000830:	0033      	movs	r3, r6
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	e753      	b.n	80006de <__aeabi_fadd+0x15e>
 8000836:	000c      	movs	r4, r1
 8000838:	1af3      	subs	r3, r6, r3
 800083a:	3501      	adds	r5, #1
 800083c:	e6fa      	b.n	8000634 <__aeabi_fadd+0xb4>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d0af      	beq.n	80007a2 <__aeabi_fadd+0x222>
 8000842:	000c      	movs	r4, r1
 8000844:	0033      	movs	r3, r6
 8000846:	e78d      	b.n	8000764 <__aeabi_fadd+0x1e4>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fadd+0x2ce>
 800084c:	e767      	b.n	800071e <__aeabi_fadd+0x19e>
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	03d2      	lsls	r2, r2, #15
 8000852:	4591      	cmp	r9, r2
 8000854:	d3ed      	bcc.n	8000832 <__aeabi_fadd+0x2b2>
 8000856:	4594      	cmp	ip, r2
 8000858:	d2eb      	bcs.n	8000832 <__aeabi_fadd+0x2b2>
 800085a:	000c      	movs	r4, r1
 800085c:	0033      	movs	r3, r6
 800085e:	e7e8      	b.n	8000832 <__aeabi_fadd+0x2b2>
 8000860:	0033      	movs	r3, r6
 8000862:	e77f      	b.n	8000764 <__aeabi_fadd+0x1e4>
 8000864:	199b      	adds	r3, r3, r6
 8000866:	2200      	movs	r2, #0
 8000868:	0159      	lsls	r1, r3, #5
 800086a:	d5b9      	bpl.n	80007e0 <__aeabi_fadd+0x260>
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <__aeabi_fadd+0x30c>)
 800086e:	4013      	ands	r3, r2
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	2201      	movs	r2, #1
 8000874:	e778      	b.n	8000768 <__aeabi_fadd+0x1e8>
 8000876:	199b      	adds	r3, r3, r6
 8000878:	3201      	adds	r2, #1
 800087a:	3501      	adds	r5, #1
 800087c:	0159      	lsls	r1, r3, #5
 800087e:	d49a      	bmi.n	80007b6 <__aeabi_fadd+0x236>
 8000880:	e6da      	b.n	8000638 <__aeabi_fadd+0xb8>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d08d      	beq.n	80007a2 <__aeabi_fadd+0x222>
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	e76e      	b.n	8000768 <__aeabi_fadd+0x1e8>
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	fbffffff 	.word	0xfbffffff
 8000890:	7dffffff 	.word	0x7dffffff

08000894 <__aeabi_fdiv>:
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	464f      	mov	r7, r9
 8000898:	4646      	mov	r6, r8
 800089a:	46d6      	mov	lr, sl
 800089c:	0244      	lsls	r4, r0, #9
 800089e:	b5c0      	push	{r6, r7, lr}
 80008a0:	0047      	lsls	r7, r0, #1
 80008a2:	1c0e      	adds	r6, r1, #0
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	0e3f      	lsrs	r7, r7, #24
 80008a8:	0fc5      	lsrs	r5, r0, #31
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d03c      	beq.n	8000928 <__aeabi_fdiv+0x94>
 80008ae:	2fff      	cmp	r7, #255	@ 0xff
 80008b0:	d042      	beq.n	8000938 <__aeabi_fdiv+0xa4>
 80008b2:	2300      	movs	r3, #0
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	4699      	mov	r9, r3
 80008b8:	469a      	mov	sl, r3
 80008ba:	00e4      	lsls	r4, r4, #3
 80008bc:	04d2      	lsls	r2, r2, #19
 80008be:	4314      	orrs	r4, r2
 80008c0:	3f7f      	subs	r7, #127	@ 0x7f
 80008c2:	0273      	lsls	r3, r6, #9
 80008c4:	0a5b      	lsrs	r3, r3, #9
 80008c6:	4698      	mov	r8, r3
 80008c8:	0073      	lsls	r3, r6, #1
 80008ca:	0e1b      	lsrs	r3, r3, #24
 80008cc:	0ff6      	lsrs	r6, r6, #31
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d01b      	beq.n	800090a <__aeabi_fdiv+0x76>
 80008d2:	2bff      	cmp	r3, #255	@ 0xff
 80008d4:	d013      	beq.n	80008fe <__aeabi_fdiv+0x6a>
 80008d6:	4642      	mov	r2, r8
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	04c9      	lsls	r1, r1, #19
 80008de:	4311      	orrs	r1, r2
 80008e0:	4688      	mov	r8, r1
 80008e2:	2000      	movs	r0, #0
 80008e4:	3b7f      	subs	r3, #127	@ 0x7f
 80008e6:	0029      	movs	r1, r5
 80008e8:	1aff      	subs	r7, r7, r3
 80008ea:	464b      	mov	r3, r9
 80008ec:	4071      	eors	r1, r6
 80008ee:	b2c9      	uxtb	r1, r1
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d900      	bls.n	80008f6 <__aeabi_fdiv+0x62>
 80008f4:	e0b5      	b.n	8000a62 <__aeabi_fdiv+0x1ce>
 80008f6:	4a74      	ldr	r2, [pc, #464]	@ (8000ac8 <__aeabi_fdiv+0x234>)
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	58d3      	ldr	r3, [r2, r3]
 80008fc:	469f      	mov	pc, r3
 80008fe:	4643      	mov	r3, r8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d13f      	bne.n	8000984 <__aeabi_fdiv+0xf0>
 8000904:	3fff      	subs	r7, #255	@ 0xff
 8000906:	3302      	adds	r3, #2
 8000908:	e003      	b.n	8000912 <__aeabi_fdiv+0x7e>
 800090a:	4643      	mov	r3, r8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d12d      	bne.n	800096c <__aeabi_fdiv+0xd8>
 8000910:	2301      	movs	r3, #1
 8000912:	0029      	movs	r1, r5
 8000914:	464a      	mov	r2, r9
 8000916:	4071      	eors	r1, r6
 8000918:	b2c9      	uxtb	r1, r1
 800091a:	431a      	orrs	r2, r3
 800091c:	2a0e      	cmp	r2, #14
 800091e:	d838      	bhi.n	8000992 <__aeabi_fdiv+0xfe>
 8000920:	486a      	ldr	r0, [pc, #424]	@ (8000acc <__aeabi_fdiv+0x238>)
 8000922:	0092      	lsls	r2, r2, #2
 8000924:	5882      	ldr	r2, [r0, r2]
 8000926:	4697      	mov	pc, r2
 8000928:	2c00      	cmp	r4, #0
 800092a:	d113      	bne.n	8000954 <__aeabi_fdiv+0xc0>
 800092c:	2304      	movs	r3, #4
 800092e:	4699      	mov	r9, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2700      	movs	r7, #0
 8000934:	469a      	mov	sl, r3
 8000936:	e7c4      	b.n	80008c2 <__aeabi_fdiv+0x2e>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d105      	bne.n	8000948 <__aeabi_fdiv+0xb4>
 800093c:	2308      	movs	r3, #8
 800093e:	4699      	mov	r9, r3
 8000940:	3b06      	subs	r3, #6
 8000942:	27ff      	movs	r7, #255	@ 0xff
 8000944:	469a      	mov	sl, r3
 8000946:	e7bc      	b.n	80008c2 <__aeabi_fdiv+0x2e>
 8000948:	230c      	movs	r3, #12
 800094a:	4699      	mov	r9, r3
 800094c:	3b09      	subs	r3, #9
 800094e:	27ff      	movs	r7, #255	@ 0xff
 8000950:	469a      	mov	sl, r3
 8000952:	e7b6      	b.n	80008c2 <__aeabi_fdiv+0x2e>
 8000954:	0020      	movs	r0, r4
 8000956:	f002 f9cf 	bl	8002cf8 <__clzsi2>
 800095a:	2776      	movs	r7, #118	@ 0x76
 800095c:	1f43      	subs	r3, r0, #5
 800095e:	409c      	lsls	r4, r3
 8000960:	2300      	movs	r3, #0
 8000962:	427f      	negs	r7, r7
 8000964:	4699      	mov	r9, r3
 8000966:	469a      	mov	sl, r3
 8000968:	1a3f      	subs	r7, r7, r0
 800096a:	e7aa      	b.n	80008c2 <__aeabi_fdiv+0x2e>
 800096c:	4640      	mov	r0, r8
 800096e:	f002 f9c3 	bl	8002cf8 <__clzsi2>
 8000972:	4642      	mov	r2, r8
 8000974:	1f43      	subs	r3, r0, #5
 8000976:	409a      	lsls	r2, r3
 8000978:	2376      	movs	r3, #118	@ 0x76
 800097a:	425b      	negs	r3, r3
 800097c:	1a1b      	subs	r3, r3, r0
 800097e:	4690      	mov	r8, r2
 8000980:	2000      	movs	r0, #0
 8000982:	e7b0      	b.n	80008e6 <__aeabi_fdiv+0x52>
 8000984:	2303      	movs	r3, #3
 8000986:	464a      	mov	r2, r9
 8000988:	431a      	orrs	r2, r3
 800098a:	4691      	mov	r9, r2
 800098c:	2003      	movs	r0, #3
 800098e:	33fc      	adds	r3, #252	@ 0xfc
 8000990:	e7a9      	b.n	80008e6 <__aeabi_fdiv+0x52>
 8000992:	000d      	movs	r5, r1
 8000994:	20ff      	movs	r0, #255	@ 0xff
 8000996:	2200      	movs	r2, #0
 8000998:	05c0      	lsls	r0, r0, #23
 800099a:	07ed      	lsls	r5, r5, #31
 800099c:	4310      	orrs	r0, r2
 800099e:	4328      	orrs	r0, r5
 80009a0:	bce0      	pop	{r5, r6, r7}
 80009a2:	46ba      	mov	sl, r7
 80009a4:	46b1      	mov	r9, r6
 80009a6:	46a8      	mov	r8, r5
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	000d      	movs	r5, r1
 80009ac:	2000      	movs	r0, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e7f2      	b.n	8000998 <__aeabi_fdiv+0x104>
 80009b2:	4653      	mov	r3, sl
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d0ed      	beq.n	8000994 <__aeabi_fdiv+0x100>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d033      	beq.n	8000a24 <__aeabi_fdiv+0x190>
 80009bc:	46a0      	mov	r8, r4
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d105      	bne.n	80009ce <__aeabi_fdiv+0x13a>
 80009c2:	2000      	movs	r0, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	e7e7      	b.n	8000998 <__aeabi_fdiv+0x104>
 80009c8:	0035      	movs	r5, r6
 80009ca:	2803      	cmp	r0, #3
 80009cc:	d07a      	beq.n	8000ac4 <__aeabi_fdiv+0x230>
 80009ce:	003b      	movs	r3, r7
 80009d0:	337f      	adds	r3, #127	@ 0x7f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	dd2d      	ble.n	8000a32 <__aeabi_fdiv+0x19e>
 80009d6:	4642      	mov	r2, r8
 80009d8:	0752      	lsls	r2, r2, #29
 80009da:	d007      	beq.n	80009ec <__aeabi_fdiv+0x158>
 80009dc:	220f      	movs	r2, #15
 80009de:	4641      	mov	r1, r8
 80009e0:	400a      	ands	r2, r1
 80009e2:	2a04      	cmp	r2, #4
 80009e4:	d002      	beq.n	80009ec <__aeabi_fdiv+0x158>
 80009e6:	2204      	movs	r2, #4
 80009e8:	4694      	mov	ip, r2
 80009ea:	44e0      	add	r8, ip
 80009ec:	4642      	mov	r2, r8
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	d505      	bpl.n	80009fe <__aeabi_fdiv+0x16a>
 80009f2:	4642      	mov	r2, r8
 80009f4:	4b36      	ldr	r3, [pc, #216]	@ (8000ad0 <__aeabi_fdiv+0x23c>)
 80009f6:	401a      	ands	r2, r3
 80009f8:	003b      	movs	r3, r7
 80009fa:	4690      	mov	r8, r2
 80009fc:	3380      	adds	r3, #128	@ 0x80
 80009fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a00:	dcc8      	bgt.n	8000994 <__aeabi_fdiv+0x100>
 8000a02:	4642      	mov	r2, r8
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	0a52      	lsrs	r2, r2, #9
 8000a08:	b2d8      	uxtb	r0, r3
 8000a0a:	e7c5      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	2500      	movs	r5, #0
 8000a10:	20ff      	movs	r0, #255	@ 0xff
 8000a12:	03d2      	lsls	r2, r2, #15
 8000a14:	e7c0      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	03d2      	lsls	r2, r2, #15
 8000a1a:	4214      	tst	r4, r2
 8000a1c:	d002      	beq.n	8000a24 <__aeabi_fdiv+0x190>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	4213      	tst	r3, r2
 8000a22:	d049      	beq.n	8000ab8 <__aeabi_fdiv+0x224>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	03d2      	lsls	r2, r2, #15
 8000a28:	4322      	orrs	r2, r4
 8000a2a:	0252      	lsls	r2, r2, #9
 8000a2c:	20ff      	movs	r0, #255	@ 0xff
 8000a2e:	0a52      	lsrs	r2, r2, #9
 8000a30:	e7b2      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000a32:	2201      	movs	r2, #1
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b1b      	cmp	r3, #27
 8000a38:	dcc3      	bgt.n	80009c2 <__aeabi_fdiv+0x12e>
 8000a3a:	4642      	mov	r2, r8
 8000a3c:	40da      	lsrs	r2, r3
 8000a3e:	4643      	mov	r3, r8
 8000a40:	379e      	adds	r7, #158	@ 0x9e
 8000a42:	40bb      	lsls	r3, r7
 8000a44:	1e59      	subs	r1, r3, #1
 8000a46:	418b      	sbcs	r3, r1
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	0753      	lsls	r3, r2, #29
 8000a4c:	d004      	beq.n	8000a58 <__aeabi_fdiv+0x1c4>
 8000a4e:	230f      	movs	r3, #15
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fdiv+0x1c4>
 8000a56:	3204      	adds	r2, #4
 8000a58:	0153      	lsls	r3, r2, #5
 8000a5a:	d529      	bpl.n	8000ab0 <__aeabi_fdiv+0x21c>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	e79a      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000a62:	4642      	mov	r2, r8
 8000a64:	0163      	lsls	r3, r4, #5
 8000a66:	0155      	lsls	r5, r2, #5
 8000a68:	42ab      	cmp	r3, r5
 8000a6a:	d215      	bcs.n	8000a98 <__aeabi_fdiv+0x204>
 8000a6c:	201b      	movs	r0, #27
 8000a6e:	2200      	movs	r2, #0
 8000a70:	3f01      	subs	r7, #1
 8000a72:	2601      	movs	r6, #1
 8000a74:	001c      	movs	r4, r3
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	db01      	blt.n	8000a82 <__aeabi_fdiv+0x1ee>
 8000a7e:	429d      	cmp	r5, r3
 8000a80:	d801      	bhi.n	8000a86 <__aeabi_fdiv+0x1f2>
 8000a82:	1b5b      	subs	r3, r3, r5
 8000a84:	4332      	orrs	r2, r6
 8000a86:	3801      	subs	r0, #1
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d1f3      	bne.n	8000a74 <__aeabi_fdiv+0x1e0>
 8000a8c:	1e58      	subs	r0, r3, #1
 8000a8e:	4183      	sbcs	r3, r0
 8000a90:	4313      	orrs	r3, r2
 8000a92:	4698      	mov	r8, r3
 8000a94:	000d      	movs	r5, r1
 8000a96:	e79a      	b.n	80009ce <__aeabi_fdiv+0x13a>
 8000a98:	201a      	movs	r0, #26
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	1b5b      	subs	r3, r3, r5
 8000a9e:	e7e8      	b.n	8000a72 <__aeabi_fdiv+0x1de>
 8000aa0:	3b02      	subs	r3, #2
 8000aa2:	425a      	negs	r2, r3
 8000aa4:	4153      	adcs	r3, r2
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	0035      	movs	r5, r6
 8000aaa:	2200      	movs	r2, #0
 8000aac:	b2d8      	uxtb	r0, r3
 8000aae:	e773      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	0a52      	lsrs	r2, r2, #9
 8000ab6:	e76f      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	0252      	lsls	r2, r2, #9
 8000abc:	0035      	movs	r5, r6
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	0a52      	lsrs	r2, r2, #9
 8000ac2:	e769      	b.n	8000998 <__aeabi_fdiv+0x104>
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	e7ad      	b.n	8000a24 <__aeabi_fdiv+0x190>
 8000ac8:	0800c0c4 	.word	0x0800c0c4
 8000acc:	0800c104 	.word	0x0800c104
 8000ad0:	f7ffffff 	.word	0xf7ffffff

08000ad4 <__aeabi_fmul>:
 8000ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad6:	464f      	mov	r7, r9
 8000ad8:	4646      	mov	r6, r8
 8000ada:	46d6      	mov	lr, sl
 8000adc:	0243      	lsls	r3, r0, #9
 8000ade:	0a5b      	lsrs	r3, r3, #9
 8000ae0:	0045      	lsls	r5, r0, #1
 8000ae2:	b5c0      	push	{r6, r7, lr}
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	1c0f      	adds	r7, r1, #0
 8000ae8:	0e2d      	lsrs	r5, r5, #24
 8000aea:	0fc6      	lsrs	r6, r0, #31
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fmul+0x1e>
 8000af0:	e088      	b.n	8000c04 <__aeabi_fmul+0x130>
 8000af2:	2dff      	cmp	r5, #255	@ 0xff
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fmul+0x24>
 8000af6:	e08d      	b.n	8000c14 <__aeabi_fmul+0x140>
 8000af8:	2280      	movs	r2, #128	@ 0x80
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	04d2      	lsls	r2, r2, #19
 8000afe:	431a      	orrs	r2, r3
 8000b00:	2300      	movs	r3, #0
 8000b02:	4691      	mov	r9, r2
 8000b04:	4698      	mov	r8, r3
 8000b06:	469a      	mov	sl, r3
 8000b08:	3d7f      	subs	r5, #127	@ 0x7f
 8000b0a:	027c      	lsls	r4, r7, #9
 8000b0c:	007b      	lsls	r3, r7, #1
 8000b0e:	0a64      	lsrs	r4, r4, #9
 8000b10:	0e1b      	lsrs	r3, r3, #24
 8000b12:	0fff      	lsrs	r7, r7, #31
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d068      	beq.n	8000bea <__aeabi_fmul+0x116>
 8000b18:	2bff      	cmp	r3, #255	@ 0xff
 8000b1a:	d021      	beq.n	8000b60 <__aeabi_fmul+0x8c>
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	00e4      	lsls	r4, r4, #3
 8000b20:	04d2      	lsls	r2, r2, #19
 8000b22:	4314      	orrs	r4, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	3b7f      	subs	r3, #127	@ 0x7f
 8000b28:	195b      	adds	r3, r3, r5
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	1c5d      	adds	r5, r3, #1
 8000b2e:	2a0a      	cmp	r2, #10
 8000b30:	dc2e      	bgt.n	8000b90 <__aeabi_fmul+0xbc>
 8000b32:	407e      	eors	r6, r7
 8000b34:	4642      	mov	r2, r8
 8000b36:	2a02      	cmp	r2, #2
 8000b38:	dc23      	bgt.n	8000b82 <__aeabi_fmul+0xae>
 8000b3a:	3a01      	subs	r2, #1
 8000b3c:	2a01      	cmp	r2, #1
 8000b3e:	d900      	bls.n	8000b42 <__aeabi_fmul+0x6e>
 8000b40:	e0bd      	b.n	8000cbe <__aeabi_fmul+0x1ea>
 8000b42:	2902      	cmp	r1, #2
 8000b44:	d06e      	beq.n	8000c24 <__aeabi_fmul+0x150>
 8000b46:	2901      	cmp	r1, #1
 8000b48:	d12c      	bne.n	8000ba4 <__aeabi_fmul+0xd0>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	05c0      	lsls	r0, r0, #23
 8000b50:	07f6      	lsls	r6, r6, #31
 8000b52:	4310      	orrs	r0, r2
 8000b54:	4330      	orrs	r0, r6
 8000b56:	bce0      	pop	{r5, r6, r7}
 8000b58:	46ba      	mov	sl, r7
 8000b5a:	46b1      	mov	r9, r6
 8000b5c:	46a8      	mov	r8, r5
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b60:	002b      	movs	r3, r5
 8000b62:	33ff      	adds	r3, #255	@ 0xff
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d065      	beq.n	8000c34 <__aeabi_fmul+0x160>
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4641      	mov	r1, r8
 8000b6c:	4311      	orrs	r1, r2
 8000b6e:	0032      	movs	r2, r6
 8000b70:	3501      	adds	r5, #1
 8000b72:	4688      	mov	r8, r1
 8000b74:	407a      	eors	r2, r7
 8000b76:	35ff      	adds	r5, #255	@ 0xff
 8000b78:	290a      	cmp	r1, #10
 8000b7a:	dd00      	ble.n	8000b7e <__aeabi_fmul+0xaa>
 8000b7c:	e0d8      	b.n	8000d30 <__aeabi_fmul+0x25c>
 8000b7e:	0016      	movs	r6, r2
 8000b80:	2103      	movs	r1, #3
 8000b82:	4640      	mov	r0, r8
 8000b84:	2201      	movs	r2, #1
 8000b86:	4082      	lsls	r2, r0
 8000b88:	20a6      	movs	r0, #166	@ 0xa6
 8000b8a:	00c0      	lsls	r0, r0, #3
 8000b8c:	4202      	tst	r2, r0
 8000b8e:	d020      	beq.n	8000bd2 <__aeabi_fmul+0xfe>
 8000b90:	4653      	mov	r3, sl
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d046      	beq.n	8000c24 <__aeabi_fmul+0x150>
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fmul+0xc8>
 8000b9a:	e0bb      	b.n	8000d14 <__aeabi_fmul+0x240>
 8000b9c:	4651      	mov	r1, sl
 8000b9e:	464c      	mov	r4, r9
 8000ba0:	2901      	cmp	r1, #1
 8000ba2:	d0d2      	beq.n	8000b4a <__aeabi_fmul+0x76>
 8000ba4:	002b      	movs	r3, r5
 8000ba6:	337f      	adds	r3, #127	@ 0x7f
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd70      	ble.n	8000c8e <__aeabi_fmul+0x1ba>
 8000bac:	0762      	lsls	r2, r4, #29
 8000bae:	d004      	beq.n	8000bba <__aeabi_fmul+0xe6>
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	4022      	ands	r2, r4
 8000bb4:	2a04      	cmp	r2, #4
 8000bb6:	d000      	beq.n	8000bba <__aeabi_fmul+0xe6>
 8000bb8:	3404      	adds	r4, #4
 8000bba:	0122      	lsls	r2, r4, #4
 8000bbc:	d503      	bpl.n	8000bc6 <__aeabi_fmul+0xf2>
 8000bbe:	4b63      	ldr	r3, [pc, #396]	@ (8000d4c <__aeabi_fmul+0x278>)
 8000bc0:	401c      	ands	r4, r3
 8000bc2:	002b      	movs	r3, r5
 8000bc4:	3380      	adds	r3, #128	@ 0x80
 8000bc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bc8:	dc2c      	bgt.n	8000c24 <__aeabi_fmul+0x150>
 8000bca:	01a2      	lsls	r2, r4, #6
 8000bcc:	0a52      	lsrs	r2, r2, #9
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	e7bd      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000bd2:	2090      	movs	r0, #144	@ 0x90
 8000bd4:	0080      	lsls	r0, r0, #2
 8000bd6:	4202      	tst	r2, r0
 8000bd8:	d127      	bne.n	8000c2a <__aeabi_fmul+0x156>
 8000bda:	38b9      	subs	r0, #185	@ 0xb9
 8000bdc:	38ff      	subs	r0, #255	@ 0xff
 8000bde:	4210      	tst	r0, r2
 8000be0:	d06d      	beq.n	8000cbe <__aeabi_fmul+0x1ea>
 8000be2:	003e      	movs	r6, r7
 8000be4:	46a1      	mov	r9, r4
 8000be6:	468a      	mov	sl, r1
 8000be8:	e7d2      	b.n	8000b90 <__aeabi_fmul+0xbc>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d141      	bne.n	8000c72 <__aeabi_fmul+0x19e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	4690      	mov	r8, r2
 8000bf6:	002b      	movs	r3, r5
 8000bf8:	4642      	mov	r2, r8
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	1c5d      	adds	r5, r3, #1
 8000bfe:	2a0a      	cmp	r2, #10
 8000c00:	dd97      	ble.n	8000b32 <__aeabi_fmul+0x5e>
 8000c02:	e7c5      	b.n	8000b90 <__aeabi_fmul+0xbc>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d126      	bne.n	8000c56 <__aeabi_fmul+0x182>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	2500      	movs	r5, #0
 8000c10:	469a      	mov	sl, r3
 8000c12:	e77a      	b.n	8000b0a <__aeabi_fmul+0x36>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d118      	bne.n	8000c4a <__aeabi_fmul+0x176>
 8000c18:	2308      	movs	r3, #8
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	3b06      	subs	r3, #6
 8000c1e:	25ff      	movs	r5, #255	@ 0xff
 8000c20:	469a      	mov	sl, r3
 8000c22:	e772      	b.n	8000b0a <__aeabi_fmul+0x36>
 8000c24:	20ff      	movs	r0, #255	@ 0xff
 8000c26:	2200      	movs	r2, #0
 8000c28:	e791      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	20ff      	movs	r0, #255	@ 0xff
 8000c30:	03d2      	lsls	r2, r2, #15
 8000c32:	e78c      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000c34:	4641      	mov	r1, r8
 8000c36:	2202      	movs	r2, #2
 8000c38:	3501      	adds	r5, #1
 8000c3a:	4311      	orrs	r1, r2
 8000c3c:	4688      	mov	r8, r1
 8000c3e:	35ff      	adds	r5, #255	@ 0xff
 8000c40:	290a      	cmp	r1, #10
 8000c42:	dca5      	bgt.n	8000b90 <__aeabi_fmul+0xbc>
 8000c44:	2102      	movs	r1, #2
 8000c46:	407e      	eors	r6, r7
 8000c48:	e774      	b.n	8000b34 <__aeabi_fmul+0x60>
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	3b09      	subs	r3, #9
 8000c50:	25ff      	movs	r5, #255	@ 0xff
 8000c52:	469a      	mov	sl, r3
 8000c54:	e759      	b.n	8000b0a <__aeabi_fmul+0x36>
 8000c56:	0018      	movs	r0, r3
 8000c58:	f002 f84e 	bl	8002cf8 <__clzsi2>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	1f43      	subs	r3, r0, #5
 8000c60:	2576      	movs	r5, #118	@ 0x76
 8000c62:	409a      	lsls	r2, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	426d      	negs	r5, r5
 8000c68:	4691      	mov	r9, r2
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	1a2d      	subs	r5, r5, r0
 8000c70:	e74b      	b.n	8000b0a <__aeabi_fmul+0x36>
 8000c72:	0020      	movs	r0, r4
 8000c74:	f002 f840 	bl	8002cf8 <__clzsi2>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1f43      	subs	r3, r0, #5
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	1a2b      	subs	r3, r5, r0
 8000c80:	3b76      	subs	r3, #118	@ 0x76
 8000c82:	2100      	movs	r1, #0
 8000c84:	1c5d      	adds	r5, r3, #1
 8000c86:	2a0a      	cmp	r2, #10
 8000c88:	dc00      	bgt.n	8000c8c <__aeabi_fmul+0x1b8>
 8000c8a:	e752      	b.n	8000b32 <__aeabi_fmul+0x5e>
 8000c8c:	e780      	b.n	8000b90 <__aeabi_fmul+0xbc>
 8000c8e:	2201      	movs	r2, #1
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b1b      	cmp	r3, #27
 8000c94:	dd00      	ble.n	8000c98 <__aeabi_fmul+0x1c4>
 8000c96:	e758      	b.n	8000b4a <__aeabi_fmul+0x76>
 8000c98:	359e      	adds	r5, #158	@ 0x9e
 8000c9a:	0022      	movs	r2, r4
 8000c9c:	40ac      	lsls	r4, r5
 8000c9e:	40da      	lsrs	r2, r3
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	4322      	orrs	r2, r4
 8000ca6:	0753      	lsls	r3, r2, #29
 8000ca8:	d004      	beq.n	8000cb4 <__aeabi_fmul+0x1e0>
 8000caa:	230f      	movs	r3, #15
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_fmul+0x1e0>
 8000cb2:	3204      	adds	r2, #4
 8000cb4:	0153      	lsls	r3, r2, #5
 8000cb6:	d537      	bpl.n	8000d28 <__aeabi_fmul+0x254>
 8000cb8:	2001      	movs	r0, #1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	e747      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	0424      	lsls	r4, r4, #16
 8000cc4:	0c24      	lsrs	r4, r4, #16
 8000cc6:	0027      	movs	r7, r4
 8000cc8:	0c10      	lsrs	r0, r2, #16
 8000cca:	0412      	lsls	r2, r2, #16
 8000ccc:	0c12      	lsrs	r2, r2, #16
 8000cce:	4344      	muls	r4, r0
 8000cd0:	4357      	muls	r7, r2
 8000cd2:	4348      	muls	r0, r1
 8000cd4:	4351      	muls	r1, r2
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	1909      	adds	r1, r1, r4
 8000cda:	1852      	adds	r2, r2, r1
 8000cdc:	4294      	cmp	r4, r2
 8000cde:	d903      	bls.n	8000ce8 <__aeabi_fmul+0x214>
 8000ce0:	2180      	movs	r1, #128	@ 0x80
 8000ce2:	0249      	lsls	r1, r1, #9
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	4460      	add	r0, ip
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	0411      	lsls	r1, r2, #16
 8000cec:	0c3f      	lsrs	r7, r7, #16
 8000cee:	19c9      	adds	r1, r1, r7
 8000cf0:	018c      	lsls	r4, r1, #6
 8000cf2:	1e67      	subs	r7, r4, #1
 8000cf4:	41bc      	sbcs	r4, r7
 8000cf6:	0c12      	lsrs	r2, r2, #16
 8000cf8:	0e89      	lsrs	r1, r1, #26
 8000cfa:	1812      	adds	r2, r2, r0
 8000cfc:	430c      	orrs	r4, r1
 8000cfe:	0192      	lsls	r2, r2, #6
 8000d00:	4314      	orrs	r4, r2
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	d50e      	bpl.n	8000d24 <__aeabi_fmul+0x250>
 8000d06:	2301      	movs	r3, #1
 8000d08:	0862      	lsrs	r2, r4, #1
 8000d0a:	401c      	ands	r4, r3
 8000d0c:	4314      	orrs	r4, r2
 8000d0e:	e749      	b.n	8000ba4 <__aeabi_fmul+0xd0>
 8000d10:	003e      	movs	r6, r7
 8000d12:	46a1      	mov	r9, r4
 8000d14:	2280      	movs	r2, #128	@ 0x80
 8000d16:	464b      	mov	r3, r9
 8000d18:	03d2      	lsls	r2, r2, #15
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	0252      	lsls	r2, r2, #9
 8000d1e:	20ff      	movs	r0, #255	@ 0xff
 8000d20:	0a52      	lsrs	r2, r2, #9
 8000d22:	e714      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000d24:	001d      	movs	r5, r3
 8000d26:	e73d      	b.n	8000ba4 <__aeabi_fmul+0xd0>
 8000d28:	0192      	lsls	r2, r2, #6
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	0a52      	lsrs	r2, r2, #9
 8000d2e:	e70e      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000d30:	290f      	cmp	r1, #15
 8000d32:	d1ed      	bne.n	8000d10 <__aeabi_fmul+0x23c>
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	464b      	mov	r3, r9
 8000d38:	03d2      	lsls	r2, r2, #15
 8000d3a:	4213      	tst	r3, r2
 8000d3c:	d0ea      	beq.n	8000d14 <__aeabi_fmul+0x240>
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d1e8      	bne.n	8000d14 <__aeabi_fmul+0x240>
 8000d42:	003e      	movs	r6, r7
 8000d44:	20ff      	movs	r0, #255	@ 0xff
 8000d46:	4322      	orrs	r2, r4
 8000d48:	e701      	b.n	8000b4e <__aeabi_fmul+0x7a>
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	f7ffffff 	.word	0xf7ffffff

08000d50 <__aeabi_i2f>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d013      	beq.n	8000d7e <__aeabi_i2f+0x2e>
 8000d56:	17c3      	asrs	r3, r0, #31
 8000d58:	18c5      	adds	r5, r0, r3
 8000d5a:	405d      	eors	r5, r3
 8000d5c:	0fc4      	lsrs	r4, r0, #31
 8000d5e:	0028      	movs	r0, r5
 8000d60:	f001 ffca 	bl	8002cf8 <__clzsi2>
 8000d64:	239e      	movs	r3, #158	@ 0x9e
 8000d66:	0001      	movs	r1, r0
 8000d68:	1a1b      	subs	r3, r3, r0
 8000d6a:	2b96      	cmp	r3, #150	@ 0x96
 8000d6c:	dc0f      	bgt.n	8000d8e <__aeabi_i2f+0x3e>
 8000d6e:	2808      	cmp	r0, #8
 8000d70:	d034      	beq.n	8000ddc <__aeabi_i2f+0x8c>
 8000d72:	3908      	subs	r1, #8
 8000d74:	408d      	lsls	r5, r1
 8000d76:	026d      	lsls	r5, r5, #9
 8000d78:	0a6d      	lsrs	r5, r5, #9
 8000d7a:	b2d8      	uxtb	r0, r3
 8000d7c:	e002      	b.n	8000d84 <__aeabi_i2f+0x34>
 8000d7e:	2400      	movs	r4, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	2500      	movs	r5, #0
 8000d84:	05c0      	lsls	r0, r0, #23
 8000d86:	4328      	orrs	r0, r5
 8000d88:	07e4      	lsls	r4, r4, #31
 8000d8a:	4320      	orrs	r0, r4
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
 8000d8e:	2b99      	cmp	r3, #153	@ 0x99
 8000d90:	dc16      	bgt.n	8000dc0 <__aeabi_i2f+0x70>
 8000d92:	1f42      	subs	r2, r0, #5
 8000d94:	2805      	cmp	r0, #5
 8000d96:	d000      	beq.n	8000d9a <__aeabi_i2f+0x4a>
 8000d98:	4095      	lsls	r5, r2
 8000d9a:	002a      	movs	r2, r5
 8000d9c:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <__aeabi_i2f+0x94>)
 8000d9e:	4002      	ands	r2, r0
 8000da0:	076e      	lsls	r6, r5, #29
 8000da2:	d009      	beq.n	8000db8 <__aeabi_i2f+0x68>
 8000da4:	260f      	movs	r6, #15
 8000da6:	4035      	ands	r5, r6
 8000da8:	2d04      	cmp	r5, #4
 8000daa:	d005      	beq.n	8000db8 <__aeabi_i2f+0x68>
 8000dac:	3204      	adds	r2, #4
 8000dae:	0155      	lsls	r5, r2, #5
 8000db0:	d502      	bpl.n	8000db8 <__aeabi_i2f+0x68>
 8000db2:	239f      	movs	r3, #159	@ 0x9f
 8000db4:	4002      	ands	r2, r0
 8000db6:	1a5b      	subs	r3, r3, r1
 8000db8:	0192      	lsls	r2, r2, #6
 8000dba:	0a55      	lsrs	r5, r2, #9
 8000dbc:	b2d8      	uxtb	r0, r3
 8000dbe:	e7e1      	b.n	8000d84 <__aeabi_i2f+0x34>
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	1a12      	subs	r2, r2, r0
 8000dc4:	0028      	movs	r0, r5
 8000dc6:	40d0      	lsrs	r0, r2
 8000dc8:	0002      	movs	r2, r0
 8000dca:	0008      	movs	r0, r1
 8000dcc:	301b      	adds	r0, #27
 8000dce:	4085      	lsls	r5, r0
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	1e45      	subs	r5, r0, #1
 8000dd4:	41a8      	sbcs	r0, r5
 8000dd6:	4302      	orrs	r2, r0
 8000dd8:	0015      	movs	r5, r2
 8000dda:	e7de      	b.n	8000d9a <__aeabi_i2f+0x4a>
 8000ddc:	026d      	lsls	r5, r5, #9
 8000dde:	2096      	movs	r0, #150	@ 0x96
 8000de0:	0a6d      	lsrs	r5, r5, #9
 8000de2:	e7cf      	b.n	8000d84 <__aeabi_i2f+0x34>
 8000de4:	fbffffff 	.word	0xfbffffff

08000de8 <__aeabi_dadd>:
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	4657      	mov	r7, sl
 8000dec:	464e      	mov	r6, r9
 8000dee:	4645      	mov	r5, r8
 8000df0:	46de      	mov	lr, fp
 8000df2:	b5e0      	push	{r5, r6, r7, lr}
 8000df4:	b083      	sub	sp, #12
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	9101      	str	r1, [sp, #4]
 8000dfa:	030c      	lsls	r4, r1, #12
 8000dfc:	004f      	lsls	r7, r1, #1
 8000dfe:	0fce      	lsrs	r6, r1, #31
 8000e00:	0a61      	lsrs	r1, r4, #9
 8000e02:	9c00      	ldr	r4, [sp, #0]
 8000e04:	031d      	lsls	r5, r3, #12
 8000e06:	0f64      	lsrs	r4, r4, #29
 8000e08:	430c      	orrs	r4, r1
 8000e0a:	9900      	ldr	r1, [sp, #0]
 8000e0c:	9200      	str	r2, [sp, #0]
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	00c8      	lsls	r0, r1, #3
 8000e12:	0059      	lsls	r1, r3, #1
 8000e14:	0d4b      	lsrs	r3, r1, #21
 8000e16:	4699      	mov	r9, r3
 8000e18:	9a00      	ldr	r2, [sp, #0]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	0a6d      	lsrs	r5, r5, #9
 8000e1e:	0fd9      	lsrs	r1, r3, #31
 8000e20:	0f53      	lsrs	r3, r2, #29
 8000e22:	432b      	orrs	r3, r5
 8000e24:	469a      	mov	sl, r3
 8000e26:	9b00      	ldr	r3, [sp, #0]
 8000e28:	0d7f      	lsrs	r7, r7, #21
 8000e2a:	00da      	lsls	r2, r3, #3
 8000e2c:	4694      	mov	ip, r2
 8000e2e:	464a      	mov	r2, r9
 8000e30:	46b0      	mov	r8, r6
 8000e32:	1aba      	subs	r2, r7, r2
 8000e34:	428e      	cmp	r6, r1
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x52>
 8000e38:	e0b0      	b.n	8000f9c <__aeabi_dadd+0x1b4>
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	dc00      	bgt.n	8000e40 <__aeabi_dadd+0x58>
 8000e3e:	e078      	b.n	8000f32 <__aeabi_dadd+0x14a>
 8000e40:	4649      	mov	r1, r9
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x60>
 8000e46:	e0e9      	b.n	800101c <__aeabi_dadd+0x234>
 8000e48:	49c9      	ldr	r1, [pc, #804]	@ (8001170 <__aeabi_dadd+0x388>)
 8000e4a:	428f      	cmp	r7, r1
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x68>
 8000e4e:	e195      	b.n	800117c <__aeabi_dadd+0x394>
 8000e50:	2501      	movs	r5, #1
 8000e52:	2a38      	cmp	r2, #56	@ 0x38
 8000e54:	dc16      	bgt.n	8000e84 <__aeabi_dadd+0x9c>
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4653      	mov	r3, sl
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	469a      	mov	sl, r3
 8000e60:	2a1f      	cmp	r2, #31
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dadd+0x7e>
 8000e64:	e1e7      	b.n	8001236 <__aeabi_dadd+0x44e>
 8000e66:	2120      	movs	r1, #32
 8000e68:	4655      	mov	r5, sl
 8000e6a:	1a8b      	subs	r3, r1, r2
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	409d      	lsls	r5, r3
 8000e70:	40d1      	lsrs	r1, r2
 8000e72:	430d      	orrs	r5, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	4099      	lsls	r1, r3
 8000e78:	1e4b      	subs	r3, r1, #1
 8000e7a:	4199      	sbcs	r1, r3
 8000e7c:	4653      	mov	r3, sl
 8000e7e:	40d3      	lsrs	r3, r2
 8000e80:	430d      	orrs	r5, r1
 8000e82:	1ae4      	subs	r4, r4, r3
 8000e84:	1b45      	subs	r5, r0, r5
 8000e86:	42a8      	cmp	r0, r5
 8000e88:	4180      	sbcs	r0, r0
 8000e8a:	4240      	negs	r0, r0
 8000e8c:	1a24      	subs	r4, r4, r0
 8000e8e:	0223      	lsls	r3, r4, #8
 8000e90:	d400      	bmi.n	8000e94 <__aeabi_dadd+0xac>
 8000e92:	e10f      	b.n	80010b4 <__aeabi_dadd+0x2cc>
 8000e94:	0264      	lsls	r4, r4, #9
 8000e96:	0a64      	lsrs	r4, r4, #9
 8000e98:	2c00      	cmp	r4, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dadd+0xb6>
 8000e9c:	e139      	b.n	8001112 <__aeabi_dadd+0x32a>
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f001 ff2a 	bl	8002cf8 <__clzsi2>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	3b08      	subs	r3, #8
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	0028      	movs	r0, r5
 8000eac:	1aca      	subs	r2, r1, r3
 8000eae:	40d0      	lsrs	r0, r2
 8000eb0:	409c      	lsls	r4, r3
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	409d      	lsls	r5, r3
 8000eb6:	4322      	orrs	r2, r4
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	dd00      	ble.n	8000ebe <__aeabi_dadd+0xd6>
 8000ebc:	e173      	b.n	80011a6 <__aeabi_dadd+0x3be>
 8000ebe:	1bd8      	subs	r0, r3, r7
 8000ec0:	3001      	adds	r0, #1
 8000ec2:	1a09      	subs	r1, r1, r0
 8000ec4:	002c      	movs	r4, r5
 8000ec6:	408d      	lsls	r5, r1
 8000ec8:	40c4      	lsrs	r4, r0
 8000eca:	1e6b      	subs	r3, r5, #1
 8000ecc:	419d      	sbcs	r5, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	40c2      	lsrs	r2, r0
 8000ed2:	408b      	lsls	r3, r1
 8000ed4:	4325      	orrs	r5, r4
 8000ed6:	2700      	movs	r7, #0
 8000ed8:	0014      	movs	r4, r2
 8000eda:	431d      	orrs	r5, r3
 8000edc:	076b      	lsls	r3, r5, #29
 8000ede:	d009      	beq.n	8000ef4 <__aeabi_dadd+0x10c>
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	402b      	ands	r3, r5
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d005      	beq.n	8000ef4 <__aeabi_dadd+0x10c>
 8000ee8:	1d2b      	adds	r3, r5, #4
 8000eea:	42ab      	cmp	r3, r5
 8000eec:	41ad      	sbcs	r5, r5
 8000eee:	426d      	negs	r5, r5
 8000ef0:	1964      	adds	r4, r4, r5
 8000ef2:	001d      	movs	r5, r3
 8000ef4:	0223      	lsls	r3, r4, #8
 8000ef6:	d400      	bmi.n	8000efa <__aeabi_dadd+0x112>
 8000ef8:	e12d      	b.n	8001156 <__aeabi_dadd+0x36e>
 8000efa:	4a9d      	ldr	r2, [pc, #628]	@ (8001170 <__aeabi_dadd+0x388>)
 8000efc:	3701      	adds	r7, #1
 8000efe:	4297      	cmp	r7, r2
 8000f00:	d100      	bne.n	8000f04 <__aeabi_dadd+0x11c>
 8000f02:	e0d3      	b.n	80010ac <__aeabi_dadd+0x2c4>
 8000f04:	4646      	mov	r6, r8
 8000f06:	499b      	ldr	r1, [pc, #620]	@ (8001174 <__aeabi_dadd+0x38c>)
 8000f08:	08ed      	lsrs	r5, r5, #3
 8000f0a:	4021      	ands	r1, r4
 8000f0c:	074a      	lsls	r2, r1, #29
 8000f0e:	432a      	orrs	r2, r5
 8000f10:	057c      	lsls	r4, r7, #21
 8000f12:	024d      	lsls	r5, r1, #9
 8000f14:	0b2d      	lsrs	r5, r5, #12
 8000f16:	0d64      	lsrs	r4, r4, #21
 8000f18:	0524      	lsls	r4, r4, #20
 8000f1a:	432c      	orrs	r4, r5
 8000f1c:	07f6      	lsls	r6, r6, #31
 8000f1e:	4334      	orrs	r4, r6
 8000f20:	0010      	movs	r0, r2
 8000f22:	0021      	movs	r1, r4
 8000f24:	b003      	add	sp, #12
 8000f26:	bcf0      	pop	{r4, r5, r6, r7}
 8000f28:	46bb      	mov	fp, r7
 8000f2a:	46b2      	mov	sl, r6
 8000f2c:	46a9      	mov	r9, r5
 8000f2e:	46a0      	mov	r8, r4
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x150>
 8000f36:	e084      	b.n	8001042 <__aeabi_dadd+0x25a>
 8000f38:	464a      	mov	r2, r9
 8000f3a:	1bd2      	subs	r2, r2, r7
 8000f3c:	2f00      	cmp	r7, #0
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_dadd+0x15a>
 8000f40:	e16d      	b.n	800121e <__aeabi_dadd+0x436>
 8000f42:	0025      	movs	r5, r4
 8000f44:	4305      	orrs	r5, r0
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x162>
 8000f48:	e127      	b.n	800119a <__aeabi_dadd+0x3b2>
 8000f4a:	1e56      	subs	r6, r2, #1
 8000f4c:	2a01      	cmp	r2, #1
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x16a>
 8000f50:	e23b      	b.n	80013ca <__aeabi_dadd+0x5e2>
 8000f52:	4d87      	ldr	r5, [pc, #540]	@ (8001170 <__aeabi_dadd+0x388>)
 8000f54:	42aa      	cmp	r2, r5
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x172>
 8000f58:	e26a      	b.n	8001430 <__aeabi_dadd+0x648>
 8000f5a:	2501      	movs	r5, #1
 8000f5c:	2e38      	cmp	r6, #56	@ 0x38
 8000f5e:	dc12      	bgt.n	8000f86 <__aeabi_dadd+0x19e>
 8000f60:	0032      	movs	r2, r6
 8000f62:	2a1f      	cmp	r2, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x180>
 8000f66:	e1f8      	b.n	800135a <__aeabi_dadd+0x572>
 8000f68:	2620      	movs	r6, #32
 8000f6a:	0025      	movs	r5, r4
 8000f6c:	1ab6      	subs	r6, r6, r2
 8000f6e:	0007      	movs	r7, r0
 8000f70:	4653      	mov	r3, sl
 8000f72:	40b0      	lsls	r0, r6
 8000f74:	40d4      	lsrs	r4, r2
 8000f76:	40b5      	lsls	r5, r6
 8000f78:	40d7      	lsrs	r7, r2
 8000f7a:	1e46      	subs	r6, r0, #1
 8000f7c:	41b0      	sbcs	r0, r6
 8000f7e:	1b1b      	subs	r3, r3, r4
 8000f80:	469a      	mov	sl, r3
 8000f82:	433d      	orrs	r5, r7
 8000f84:	4305      	orrs	r5, r0
 8000f86:	4662      	mov	r2, ip
 8000f88:	1b55      	subs	r5, r2, r5
 8000f8a:	45ac      	cmp	ip, r5
 8000f8c:	4192      	sbcs	r2, r2
 8000f8e:	4653      	mov	r3, sl
 8000f90:	4252      	negs	r2, r2
 8000f92:	000e      	movs	r6, r1
 8000f94:	464f      	mov	r7, r9
 8000f96:	4688      	mov	r8, r1
 8000f98:	1a9c      	subs	r4, r3, r2
 8000f9a:	e778      	b.n	8000e8e <__aeabi_dadd+0xa6>
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	dc00      	bgt.n	8000fa2 <__aeabi_dadd+0x1ba>
 8000fa0:	e08e      	b.n	80010c0 <__aeabi_dadd+0x2d8>
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	2900      	cmp	r1, #0
 8000fa6:	d175      	bne.n	8001094 <__aeabi_dadd+0x2ac>
 8000fa8:	4661      	mov	r1, ip
 8000faa:	4653      	mov	r3, sl
 8000fac:	4319      	orrs	r1, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dadd+0x1ca>
 8000fb0:	e0f6      	b.n	80011a0 <__aeabi_dadd+0x3b8>
 8000fb2:	1e51      	subs	r1, r2, #1
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x1d2>
 8000fb8:	e191      	b.n	80012de <__aeabi_dadd+0x4f6>
 8000fba:	4d6d      	ldr	r5, [pc, #436]	@ (8001170 <__aeabi_dadd+0x388>)
 8000fbc:	42aa      	cmp	r2, r5
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dadd+0x1da>
 8000fc0:	e0dc      	b.n	800117c <__aeabi_dadd+0x394>
 8000fc2:	2501      	movs	r5, #1
 8000fc4:	2938      	cmp	r1, #56	@ 0x38
 8000fc6:	dc14      	bgt.n	8000ff2 <__aeabi_dadd+0x20a>
 8000fc8:	000a      	movs	r2, r1
 8000fca:	2a1f      	cmp	r2, #31
 8000fcc:	dd00      	ble.n	8000fd0 <__aeabi_dadd+0x1e8>
 8000fce:	e1a2      	b.n	8001316 <__aeabi_dadd+0x52e>
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4653      	mov	r3, sl
 8000fd4:	1a89      	subs	r1, r1, r2
 8000fd6:	408b      	lsls	r3, r1
 8000fd8:	001d      	movs	r5, r3
 8000fda:	4663      	mov	r3, ip
 8000fdc:	40d3      	lsrs	r3, r2
 8000fde:	431d      	orrs	r5, r3
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	408b      	lsls	r3, r1
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	1e4b      	subs	r3, r1, #1
 8000fe8:	4199      	sbcs	r1, r3
 8000fea:	4653      	mov	r3, sl
 8000fec:	40d3      	lsrs	r3, r2
 8000fee:	430d      	orrs	r5, r1
 8000ff0:	18e4      	adds	r4, r4, r3
 8000ff2:	182d      	adds	r5, r5, r0
 8000ff4:	4285      	cmp	r5, r0
 8000ff6:	4180      	sbcs	r0, r0
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	1824      	adds	r4, r4, r0
 8000ffc:	0223      	lsls	r3, r4, #8
 8000ffe:	d559      	bpl.n	80010b4 <__aeabi_dadd+0x2cc>
 8001000:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <__aeabi_dadd+0x388>)
 8001002:	3701      	adds	r7, #1
 8001004:	429f      	cmp	r7, r3
 8001006:	d051      	beq.n	80010ac <__aeabi_dadd+0x2c4>
 8001008:	2101      	movs	r1, #1
 800100a:	4b5a      	ldr	r3, [pc, #360]	@ (8001174 <__aeabi_dadd+0x38c>)
 800100c:	086a      	lsrs	r2, r5, #1
 800100e:	401c      	ands	r4, r3
 8001010:	4029      	ands	r1, r5
 8001012:	430a      	orrs	r2, r1
 8001014:	07e5      	lsls	r5, r4, #31
 8001016:	4315      	orrs	r5, r2
 8001018:	0864      	lsrs	r4, r4, #1
 800101a:	e75f      	b.n	8000edc <__aeabi_dadd+0xf4>
 800101c:	4661      	mov	r1, ip
 800101e:	4653      	mov	r3, sl
 8001020:	4319      	orrs	r1, r3
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x23e>
 8001024:	e0bc      	b.n	80011a0 <__aeabi_dadd+0x3b8>
 8001026:	1e51      	subs	r1, r2, #1
 8001028:	2a01      	cmp	r2, #1
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x246>
 800102c:	e164      	b.n	80012f8 <__aeabi_dadd+0x510>
 800102e:	4d50      	ldr	r5, [pc, #320]	@ (8001170 <__aeabi_dadd+0x388>)
 8001030:	42aa      	cmp	r2, r5
 8001032:	d100      	bne.n	8001036 <__aeabi_dadd+0x24e>
 8001034:	e16a      	b.n	800130c <__aeabi_dadd+0x524>
 8001036:	2501      	movs	r5, #1
 8001038:	2938      	cmp	r1, #56	@ 0x38
 800103a:	dd00      	ble.n	800103e <__aeabi_dadd+0x256>
 800103c:	e722      	b.n	8000e84 <__aeabi_dadd+0x9c>
 800103e:	000a      	movs	r2, r1
 8001040:	e70e      	b.n	8000e60 <__aeabi_dadd+0x78>
 8001042:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <__aeabi_dadd+0x390>)
 8001044:	1c7d      	adds	r5, r7, #1
 8001046:	4215      	tst	r5, r2
 8001048:	d000      	beq.n	800104c <__aeabi_dadd+0x264>
 800104a:	e0d0      	b.n	80011ee <__aeabi_dadd+0x406>
 800104c:	0025      	movs	r5, r4
 800104e:	4662      	mov	r2, ip
 8001050:	4653      	mov	r3, sl
 8001052:	4305      	orrs	r5, r0
 8001054:	431a      	orrs	r2, r3
 8001056:	2f00      	cmp	r7, #0
 8001058:	d000      	beq.n	800105c <__aeabi_dadd+0x274>
 800105a:	e137      	b.n	80012cc <__aeabi_dadd+0x4e4>
 800105c:	2d00      	cmp	r5, #0
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x27a>
 8001060:	e1a8      	b.n	80013b4 <__aeabi_dadd+0x5cc>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x280>
 8001066:	e16a      	b.n	800133e <__aeabi_dadd+0x556>
 8001068:	4663      	mov	r3, ip
 800106a:	1ac5      	subs	r5, r0, r3
 800106c:	4653      	mov	r3, sl
 800106e:	1ae2      	subs	r2, r4, r3
 8001070:	42a8      	cmp	r0, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	425b      	negs	r3, r3
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	021a      	lsls	r2, r3, #8
 800107a:	d400      	bmi.n	800107e <__aeabi_dadd+0x296>
 800107c:	e203      	b.n	8001486 <__aeabi_dadd+0x69e>
 800107e:	4663      	mov	r3, ip
 8001080:	1a1d      	subs	r5, r3, r0
 8001082:	45ac      	cmp	ip, r5
 8001084:	4192      	sbcs	r2, r2
 8001086:	4653      	mov	r3, sl
 8001088:	4252      	negs	r2, r2
 800108a:	1b1c      	subs	r4, r3, r4
 800108c:	000e      	movs	r6, r1
 800108e:	4688      	mov	r8, r1
 8001090:	1aa4      	subs	r4, r4, r2
 8001092:	e723      	b.n	8000edc <__aeabi_dadd+0xf4>
 8001094:	4936      	ldr	r1, [pc, #216]	@ (8001170 <__aeabi_dadd+0x388>)
 8001096:	428f      	cmp	r7, r1
 8001098:	d070      	beq.n	800117c <__aeabi_dadd+0x394>
 800109a:	2501      	movs	r5, #1
 800109c:	2a38      	cmp	r2, #56	@ 0x38
 800109e:	dca8      	bgt.n	8000ff2 <__aeabi_dadd+0x20a>
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	4653      	mov	r3, sl
 80010a4:	0409      	lsls	r1, r1, #16
 80010a6:	430b      	orrs	r3, r1
 80010a8:	469a      	mov	sl, r3
 80010aa:	e78e      	b.n	8000fca <__aeabi_dadd+0x1e2>
 80010ac:	003c      	movs	r4, r7
 80010ae:	2500      	movs	r5, #0
 80010b0:	2200      	movs	r2, #0
 80010b2:	e731      	b.n	8000f18 <__aeabi_dadd+0x130>
 80010b4:	2307      	movs	r3, #7
 80010b6:	402b      	ands	r3, r5
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d000      	beq.n	80010be <__aeabi_dadd+0x2d6>
 80010bc:	e710      	b.n	8000ee0 <__aeabi_dadd+0xf8>
 80010be:	e093      	b.n	80011e8 <__aeabi_dadd+0x400>
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d074      	beq.n	80011ae <__aeabi_dadd+0x3c6>
 80010c4:	464a      	mov	r2, r9
 80010c6:	1bd2      	subs	r2, r2, r7
 80010c8:	2f00      	cmp	r7, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x2e6>
 80010cc:	e0c7      	b.n	800125e <__aeabi_dadd+0x476>
 80010ce:	4928      	ldr	r1, [pc, #160]	@ (8001170 <__aeabi_dadd+0x388>)
 80010d0:	4589      	cmp	r9, r1
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x2ee>
 80010d4:	e185      	b.n	80013e2 <__aeabi_dadd+0x5fa>
 80010d6:	2501      	movs	r5, #1
 80010d8:	2a38      	cmp	r2, #56	@ 0x38
 80010da:	dc12      	bgt.n	8001102 <__aeabi_dadd+0x31a>
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	0409      	lsls	r1, r1, #16
 80010e0:	430c      	orrs	r4, r1
 80010e2:	2a1f      	cmp	r2, #31
 80010e4:	dd00      	ble.n	80010e8 <__aeabi_dadd+0x300>
 80010e6:	e1ab      	b.n	8001440 <__aeabi_dadd+0x658>
 80010e8:	2120      	movs	r1, #32
 80010ea:	0025      	movs	r5, r4
 80010ec:	1a89      	subs	r1, r1, r2
 80010ee:	0007      	movs	r7, r0
 80010f0:	4088      	lsls	r0, r1
 80010f2:	408d      	lsls	r5, r1
 80010f4:	40d7      	lsrs	r7, r2
 80010f6:	1e41      	subs	r1, r0, #1
 80010f8:	4188      	sbcs	r0, r1
 80010fa:	40d4      	lsrs	r4, r2
 80010fc:	433d      	orrs	r5, r7
 80010fe:	4305      	orrs	r5, r0
 8001100:	44a2      	add	sl, r4
 8001102:	4465      	add	r5, ip
 8001104:	4565      	cmp	r5, ip
 8001106:	4192      	sbcs	r2, r2
 8001108:	4252      	negs	r2, r2
 800110a:	4452      	add	r2, sl
 800110c:	0014      	movs	r4, r2
 800110e:	464f      	mov	r7, r9
 8001110:	e774      	b.n	8000ffc <__aeabi_dadd+0x214>
 8001112:	0028      	movs	r0, r5
 8001114:	f001 fdf0 	bl	8002cf8 <__clzsi2>
 8001118:	0003      	movs	r3, r0
 800111a:	3318      	adds	r3, #24
 800111c:	2b1f      	cmp	r3, #31
 800111e:	dc00      	bgt.n	8001122 <__aeabi_dadd+0x33a>
 8001120:	e6c2      	b.n	8000ea8 <__aeabi_dadd+0xc0>
 8001122:	002a      	movs	r2, r5
 8001124:	3808      	subs	r0, #8
 8001126:	4082      	lsls	r2, r0
 8001128:	429f      	cmp	r7, r3
 800112a:	dd00      	ble.n	800112e <__aeabi_dadd+0x346>
 800112c:	e0a9      	b.n	8001282 <__aeabi_dadd+0x49a>
 800112e:	1bdb      	subs	r3, r3, r7
 8001130:	1c58      	adds	r0, r3, #1
 8001132:	281f      	cmp	r0, #31
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x350>
 8001136:	e1ac      	b.n	8001492 <__aeabi_dadd+0x6aa>
 8001138:	0015      	movs	r5, r2
 800113a:	3b1f      	subs	r3, #31
 800113c:	40dd      	lsrs	r5, r3
 800113e:	2820      	cmp	r0, #32
 8001140:	d005      	beq.n	800114e <__aeabi_dadd+0x366>
 8001142:	2340      	movs	r3, #64	@ 0x40
 8001144:	1a1b      	subs	r3, r3, r0
 8001146:	409a      	lsls	r2, r3
 8001148:	1e53      	subs	r3, r2, #1
 800114a:	419a      	sbcs	r2, r3
 800114c:	4315      	orrs	r5, r2
 800114e:	2307      	movs	r3, #7
 8001150:	2700      	movs	r7, #0
 8001152:	402b      	ands	r3, r5
 8001154:	e7b0      	b.n	80010b8 <__aeabi_dadd+0x2d0>
 8001156:	08ed      	lsrs	r5, r5, #3
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <__aeabi_dadd+0x388>)
 800115a:	0762      	lsls	r2, r4, #29
 800115c:	432a      	orrs	r2, r5
 800115e:	08e4      	lsrs	r4, r4, #3
 8001160:	429f      	cmp	r7, r3
 8001162:	d00f      	beq.n	8001184 <__aeabi_dadd+0x39c>
 8001164:	0324      	lsls	r4, r4, #12
 8001166:	0b25      	lsrs	r5, r4, #12
 8001168:	057c      	lsls	r4, r7, #21
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	e6d4      	b.n	8000f18 <__aeabi_dadd+0x130>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff
 8001174:	ff7fffff 	.word	0xff7fffff
 8001178:	000007fe 	.word	0x000007fe
 800117c:	08c0      	lsrs	r0, r0, #3
 800117e:	0762      	lsls	r2, r4, #29
 8001180:	4302      	orrs	r2, r0
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	0013      	movs	r3, r2
 8001186:	4323      	orrs	r3, r4
 8001188:	d100      	bne.n	800118c <__aeabi_dadd+0x3a4>
 800118a:	e186      	b.n	800149a <__aeabi_dadd+0x6b2>
 800118c:	2580      	movs	r5, #128	@ 0x80
 800118e:	032d      	lsls	r5, r5, #12
 8001190:	4325      	orrs	r5, r4
 8001192:	032d      	lsls	r5, r5, #12
 8001194:	4cc3      	ldr	r4, [pc, #780]	@ (80014a4 <__aeabi_dadd+0x6bc>)
 8001196:	0b2d      	lsrs	r5, r5, #12
 8001198:	e6be      	b.n	8000f18 <__aeabi_dadd+0x130>
 800119a:	4660      	mov	r0, ip
 800119c:	4654      	mov	r4, sl
 800119e:	000e      	movs	r6, r1
 80011a0:	0017      	movs	r7, r2
 80011a2:	08c5      	lsrs	r5, r0, #3
 80011a4:	e7d8      	b.n	8001158 <__aeabi_dadd+0x370>
 80011a6:	4cc0      	ldr	r4, [pc, #768]	@ (80014a8 <__aeabi_dadd+0x6c0>)
 80011a8:	1aff      	subs	r7, r7, r3
 80011aa:	4014      	ands	r4, r2
 80011ac:	e696      	b.n	8000edc <__aeabi_dadd+0xf4>
 80011ae:	4abf      	ldr	r2, [pc, #764]	@ (80014ac <__aeabi_dadd+0x6c4>)
 80011b0:	1c79      	adds	r1, r7, #1
 80011b2:	4211      	tst	r1, r2
 80011b4:	d16b      	bne.n	800128e <__aeabi_dadd+0x4a6>
 80011b6:	0022      	movs	r2, r4
 80011b8:	4302      	orrs	r2, r0
 80011ba:	2f00      	cmp	r7, #0
 80011bc:	d000      	beq.n	80011c0 <__aeabi_dadd+0x3d8>
 80011be:	e0db      	b.n	8001378 <__aeabi_dadd+0x590>
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x3de>
 80011c4:	e12d      	b.n	8001422 <__aeabi_dadd+0x63a>
 80011c6:	4662      	mov	r2, ip
 80011c8:	4653      	mov	r3, sl
 80011ca:	431a      	orrs	r2, r3
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x3e8>
 80011ce:	e0b6      	b.n	800133e <__aeabi_dadd+0x556>
 80011d0:	4663      	mov	r3, ip
 80011d2:	18c5      	adds	r5, r0, r3
 80011d4:	4285      	cmp	r5, r0
 80011d6:	4180      	sbcs	r0, r0
 80011d8:	4454      	add	r4, sl
 80011da:	4240      	negs	r0, r0
 80011dc:	1824      	adds	r4, r4, r0
 80011de:	0223      	lsls	r3, r4, #8
 80011e0:	d502      	bpl.n	80011e8 <__aeabi_dadd+0x400>
 80011e2:	000f      	movs	r7, r1
 80011e4:	4bb0      	ldr	r3, [pc, #704]	@ (80014a8 <__aeabi_dadd+0x6c0>)
 80011e6:	401c      	ands	r4, r3
 80011e8:	003a      	movs	r2, r7
 80011ea:	0028      	movs	r0, r5
 80011ec:	e7d8      	b.n	80011a0 <__aeabi_dadd+0x3b8>
 80011ee:	4662      	mov	r2, ip
 80011f0:	1a85      	subs	r5, r0, r2
 80011f2:	42a8      	cmp	r0, r5
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4653      	mov	r3, sl
 80011f8:	4252      	negs	r2, r2
 80011fa:	4691      	mov	r9, r2
 80011fc:	1ae3      	subs	r3, r4, r3
 80011fe:	001a      	movs	r2, r3
 8001200:	464b      	mov	r3, r9
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	4691      	mov	r9, r2
 8001208:	021a      	lsls	r2, r3, #8
 800120a:	d454      	bmi.n	80012b6 <__aeabi_dadd+0x4ce>
 800120c:	464a      	mov	r2, r9
 800120e:	464c      	mov	r4, r9
 8001210:	432a      	orrs	r2, r5
 8001212:	d000      	beq.n	8001216 <__aeabi_dadd+0x42e>
 8001214:	e640      	b.n	8000e98 <__aeabi_dadd+0xb0>
 8001216:	2600      	movs	r6, #0
 8001218:	2400      	movs	r4, #0
 800121a:	2500      	movs	r5, #0
 800121c:	e67c      	b.n	8000f18 <__aeabi_dadd+0x130>
 800121e:	4da1      	ldr	r5, [pc, #644]	@ (80014a4 <__aeabi_dadd+0x6bc>)
 8001220:	45a9      	cmp	r9, r5
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x43e>
 8001224:	e090      	b.n	8001348 <__aeabi_dadd+0x560>
 8001226:	2501      	movs	r5, #1
 8001228:	2a38      	cmp	r2, #56	@ 0x38
 800122a:	dd00      	ble.n	800122e <__aeabi_dadd+0x446>
 800122c:	e6ab      	b.n	8000f86 <__aeabi_dadd+0x19e>
 800122e:	2580      	movs	r5, #128	@ 0x80
 8001230:	042d      	lsls	r5, r5, #16
 8001232:	432c      	orrs	r4, r5
 8001234:	e695      	b.n	8000f62 <__aeabi_dadd+0x17a>
 8001236:	0011      	movs	r1, r2
 8001238:	4655      	mov	r5, sl
 800123a:	3920      	subs	r1, #32
 800123c:	40cd      	lsrs	r5, r1
 800123e:	46a9      	mov	r9, r5
 8001240:	2a20      	cmp	r2, #32
 8001242:	d006      	beq.n	8001252 <__aeabi_dadd+0x46a>
 8001244:	2140      	movs	r1, #64	@ 0x40
 8001246:	4653      	mov	r3, sl
 8001248:	1a8a      	subs	r2, r1, r2
 800124a:	4093      	lsls	r3, r2
 800124c:	4662      	mov	r2, ip
 800124e:	431a      	orrs	r2, r3
 8001250:	4694      	mov	ip, r2
 8001252:	4665      	mov	r5, ip
 8001254:	1e6b      	subs	r3, r5, #1
 8001256:	419d      	sbcs	r5, r3
 8001258:	464b      	mov	r3, r9
 800125a:	431d      	orrs	r5, r3
 800125c:	e612      	b.n	8000e84 <__aeabi_dadd+0x9c>
 800125e:	0021      	movs	r1, r4
 8001260:	4301      	orrs	r1, r0
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x47e>
 8001264:	e0c4      	b.n	80013f0 <__aeabi_dadd+0x608>
 8001266:	1e51      	subs	r1, r2, #1
 8001268:	2a01      	cmp	r2, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x486>
 800126c:	e0fb      	b.n	8001466 <__aeabi_dadd+0x67e>
 800126e:	4d8d      	ldr	r5, [pc, #564]	@ (80014a4 <__aeabi_dadd+0x6bc>)
 8001270:	42aa      	cmp	r2, r5
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x48e>
 8001274:	e0b5      	b.n	80013e2 <__aeabi_dadd+0x5fa>
 8001276:	2501      	movs	r5, #1
 8001278:	2938      	cmp	r1, #56	@ 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x496>
 800127c:	e741      	b.n	8001102 <__aeabi_dadd+0x31a>
 800127e:	000a      	movs	r2, r1
 8001280:	e72f      	b.n	80010e2 <__aeabi_dadd+0x2fa>
 8001282:	4c89      	ldr	r4, [pc, #548]	@ (80014a8 <__aeabi_dadd+0x6c0>)
 8001284:	1aff      	subs	r7, r7, r3
 8001286:	4014      	ands	r4, r2
 8001288:	0762      	lsls	r2, r4, #29
 800128a:	08e4      	lsrs	r4, r4, #3
 800128c:	e76a      	b.n	8001164 <__aeabi_dadd+0x37c>
 800128e:	4a85      	ldr	r2, [pc, #532]	@ (80014a4 <__aeabi_dadd+0x6bc>)
 8001290:	4291      	cmp	r1, r2
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x4ae>
 8001294:	e0e3      	b.n	800145e <__aeabi_dadd+0x676>
 8001296:	4663      	mov	r3, ip
 8001298:	18c2      	adds	r2, r0, r3
 800129a:	4282      	cmp	r2, r0
 800129c:	4180      	sbcs	r0, r0
 800129e:	0023      	movs	r3, r4
 80012a0:	4240      	negs	r0, r0
 80012a2:	4453      	add	r3, sl
 80012a4:	181b      	adds	r3, r3, r0
 80012a6:	07dd      	lsls	r5, r3, #31
 80012a8:	085c      	lsrs	r4, r3, #1
 80012aa:	2307      	movs	r3, #7
 80012ac:	0852      	lsrs	r2, r2, #1
 80012ae:	4315      	orrs	r5, r2
 80012b0:	000f      	movs	r7, r1
 80012b2:	402b      	ands	r3, r5
 80012b4:	e700      	b.n	80010b8 <__aeabi_dadd+0x2d0>
 80012b6:	4663      	mov	r3, ip
 80012b8:	1a1d      	subs	r5, r3, r0
 80012ba:	45ac      	cmp	ip, r5
 80012bc:	4192      	sbcs	r2, r2
 80012be:	4653      	mov	r3, sl
 80012c0:	4252      	negs	r2, r2
 80012c2:	1b1c      	subs	r4, r3, r4
 80012c4:	000e      	movs	r6, r1
 80012c6:	4688      	mov	r8, r1
 80012c8:	1aa4      	subs	r4, r4, r2
 80012ca:	e5e5      	b.n	8000e98 <__aeabi_dadd+0xb0>
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d000      	beq.n	80012d2 <__aeabi_dadd+0x4ea>
 80012d0:	e091      	b.n	80013f6 <__aeabi_dadd+0x60e>
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d138      	bne.n	8001348 <__aeabi_dadd+0x560>
 80012d6:	2480      	movs	r4, #128	@ 0x80
 80012d8:	2600      	movs	r6, #0
 80012da:	0324      	lsls	r4, r4, #12
 80012dc:	e756      	b.n	800118c <__aeabi_dadd+0x3a4>
 80012de:	4663      	mov	r3, ip
 80012e0:	18c5      	adds	r5, r0, r3
 80012e2:	4285      	cmp	r5, r0
 80012e4:	4180      	sbcs	r0, r0
 80012e6:	4454      	add	r4, sl
 80012e8:	4240      	negs	r0, r0
 80012ea:	1824      	adds	r4, r4, r0
 80012ec:	2701      	movs	r7, #1
 80012ee:	0223      	lsls	r3, r4, #8
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_dadd+0x50c>
 80012f2:	e6df      	b.n	80010b4 <__aeabi_dadd+0x2cc>
 80012f4:	2702      	movs	r7, #2
 80012f6:	e687      	b.n	8001008 <__aeabi_dadd+0x220>
 80012f8:	4663      	mov	r3, ip
 80012fa:	1ac5      	subs	r5, r0, r3
 80012fc:	42a8      	cmp	r0, r5
 80012fe:	4180      	sbcs	r0, r0
 8001300:	4653      	mov	r3, sl
 8001302:	4240      	negs	r0, r0
 8001304:	1ae4      	subs	r4, r4, r3
 8001306:	2701      	movs	r7, #1
 8001308:	1a24      	subs	r4, r4, r0
 800130a:	e5c0      	b.n	8000e8e <__aeabi_dadd+0xa6>
 800130c:	0762      	lsls	r2, r4, #29
 800130e:	08c0      	lsrs	r0, r0, #3
 8001310:	4302      	orrs	r2, r0
 8001312:	08e4      	lsrs	r4, r4, #3
 8001314:	e736      	b.n	8001184 <__aeabi_dadd+0x39c>
 8001316:	0011      	movs	r1, r2
 8001318:	4653      	mov	r3, sl
 800131a:	3920      	subs	r1, #32
 800131c:	40cb      	lsrs	r3, r1
 800131e:	4699      	mov	r9, r3
 8001320:	2a20      	cmp	r2, #32
 8001322:	d006      	beq.n	8001332 <__aeabi_dadd+0x54a>
 8001324:	2140      	movs	r1, #64	@ 0x40
 8001326:	4653      	mov	r3, sl
 8001328:	1a8a      	subs	r2, r1, r2
 800132a:	4093      	lsls	r3, r2
 800132c:	4662      	mov	r2, ip
 800132e:	431a      	orrs	r2, r3
 8001330:	4694      	mov	ip, r2
 8001332:	4665      	mov	r5, ip
 8001334:	1e6b      	subs	r3, r5, #1
 8001336:	419d      	sbcs	r5, r3
 8001338:	464b      	mov	r3, r9
 800133a:	431d      	orrs	r5, r3
 800133c:	e659      	b.n	8000ff2 <__aeabi_dadd+0x20a>
 800133e:	0762      	lsls	r2, r4, #29
 8001340:	08c0      	lsrs	r0, r0, #3
 8001342:	4302      	orrs	r2, r0
 8001344:	08e4      	lsrs	r4, r4, #3
 8001346:	e70d      	b.n	8001164 <__aeabi_dadd+0x37c>
 8001348:	4653      	mov	r3, sl
 800134a:	075a      	lsls	r2, r3, #29
 800134c:	4663      	mov	r3, ip
 800134e:	08d8      	lsrs	r0, r3, #3
 8001350:	4653      	mov	r3, sl
 8001352:	000e      	movs	r6, r1
 8001354:	4302      	orrs	r2, r0
 8001356:	08dc      	lsrs	r4, r3, #3
 8001358:	e714      	b.n	8001184 <__aeabi_dadd+0x39c>
 800135a:	0015      	movs	r5, r2
 800135c:	0026      	movs	r6, r4
 800135e:	3d20      	subs	r5, #32
 8001360:	40ee      	lsrs	r6, r5
 8001362:	2a20      	cmp	r2, #32
 8001364:	d003      	beq.n	800136e <__aeabi_dadd+0x586>
 8001366:	2540      	movs	r5, #64	@ 0x40
 8001368:	1aaa      	subs	r2, r5, r2
 800136a:	4094      	lsls	r4, r2
 800136c:	4320      	orrs	r0, r4
 800136e:	1e42      	subs	r2, r0, #1
 8001370:	4190      	sbcs	r0, r2
 8001372:	0005      	movs	r5, r0
 8001374:	4335      	orrs	r5, r6
 8001376:	e606      	b.n	8000f86 <__aeabi_dadd+0x19e>
 8001378:	2a00      	cmp	r2, #0
 800137a:	d07c      	beq.n	8001476 <__aeabi_dadd+0x68e>
 800137c:	4662      	mov	r2, ip
 800137e:	4653      	mov	r3, sl
 8001380:	08c0      	lsrs	r0, r0, #3
 8001382:	431a      	orrs	r2, r3
 8001384:	d100      	bne.n	8001388 <__aeabi_dadd+0x5a0>
 8001386:	e6fa      	b.n	800117e <__aeabi_dadd+0x396>
 8001388:	0762      	lsls	r2, r4, #29
 800138a:	4310      	orrs	r0, r2
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	08e4      	lsrs	r4, r4, #3
 8001390:	0312      	lsls	r2, r2, #12
 8001392:	4214      	tst	r4, r2
 8001394:	d008      	beq.n	80013a8 <__aeabi_dadd+0x5c0>
 8001396:	08d9      	lsrs	r1, r3, #3
 8001398:	4211      	tst	r1, r2
 800139a:	d105      	bne.n	80013a8 <__aeabi_dadd+0x5c0>
 800139c:	4663      	mov	r3, ip
 800139e:	08d8      	lsrs	r0, r3, #3
 80013a0:	4653      	mov	r3, sl
 80013a2:	000c      	movs	r4, r1
 80013a4:	075b      	lsls	r3, r3, #29
 80013a6:	4318      	orrs	r0, r3
 80013a8:	0f42      	lsrs	r2, r0, #29
 80013aa:	00c0      	lsls	r0, r0, #3
 80013ac:	08c0      	lsrs	r0, r0, #3
 80013ae:	0752      	lsls	r2, r2, #29
 80013b0:	4302      	orrs	r2, r0
 80013b2:	e6e7      	b.n	8001184 <__aeabi_dadd+0x39c>
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x5d2>
 80013b8:	e72d      	b.n	8001216 <__aeabi_dadd+0x42e>
 80013ba:	4663      	mov	r3, ip
 80013bc:	08d8      	lsrs	r0, r3, #3
 80013be:	4653      	mov	r3, sl
 80013c0:	075a      	lsls	r2, r3, #29
 80013c2:	000e      	movs	r6, r1
 80013c4:	4302      	orrs	r2, r0
 80013c6:	08dc      	lsrs	r4, r3, #3
 80013c8:	e6cc      	b.n	8001164 <__aeabi_dadd+0x37c>
 80013ca:	4663      	mov	r3, ip
 80013cc:	1a1d      	subs	r5, r3, r0
 80013ce:	45ac      	cmp	ip, r5
 80013d0:	4192      	sbcs	r2, r2
 80013d2:	4653      	mov	r3, sl
 80013d4:	4252      	negs	r2, r2
 80013d6:	1b1c      	subs	r4, r3, r4
 80013d8:	000e      	movs	r6, r1
 80013da:	4688      	mov	r8, r1
 80013dc:	1aa4      	subs	r4, r4, r2
 80013de:	3701      	adds	r7, #1
 80013e0:	e555      	b.n	8000e8e <__aeabi_dadd+0xa6>
 80013e2:	4663      	mov	r3, ip
 80013e4:	08d9      	lsrs	r1, r3, #3
 80013e6:	4653      	mov	r3, sl
 80013e8:	075a      	lsls	r2, r3, #29
 80013ea:	430a      	orrs	r2, r1
 80013ec:	08dc      	lsrs	r4, r3, #3
 80013ee:	e6c9      	b.n	8001184 <__aeabi_dadd+0x39c>
 80013f0:	4660      	mov	r0, ip
 80013f2:	4654      	mov	r4, sl
 80013f4:	e6d4      	b.n	80011a0 <__aeabi_dadd+0x3b8>
 80013f6:	08c0      	lsrs	r0, r0, #3
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x616>
 80013fc:	e6bf      	b.n	800117e <__aeabi_dadd+0x396>
 80013fe:	0762      	lsls	r2, r4, #29
 8001400:	4310      	orrs	r0, r2
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	08e4      	lsrs	r4, r4, #3
 8001406:	0312      	lsls	r2, r2, #12
 8001408:	4214      	tst	r4, r2
 800140a:	d0cd      	beq.n	80013a8 <__aeabi_dadd+0x5c0>
 800140c:	08dd      	lsrs	r5, r3, #3
 800140e:	4215      	tst	r5, r2
 8001410:	d1ca      	bne.n	80013a8 <__aeabi_dadd+0x5c0>
 8001412:	4663      	mov	r3, ip
 8001414:	08d8      	lsrs	r0, r3, #3
 8001416:	4653      	mov	r3, sl
 8001418:	075b      	lsls	r3, r3, #29
 800141a:	000e      	movs	r6, r1
 800141c:	002c      	movs	r4, r5
 800141e:	4318      	orrs	r0, r3
 8001420:	e7c2      	b.n	80013a8 <__aeabi_dadd+0x5c0>
 8001422:	4663      	mov	r3, ip
 8001424:	08d9      	lsrs	r1, r3, #3
 8001426:	4653      	mov	r3, sl
 8001428:	075a      	lsls	r2, r3, #29
 800142a:	430a      	orrs	r2, r1
 800142c:	08dc      	lsrs	r4, r3, #3
 800142e:	e699      	b.n	8001164 <__aeabi_dadd+0x37c>
 8001430:	4663      	mov	r3, ip
 8001432:	08d8      	lsrs	r0, r3, #3
 8001434:	4653      	mov	r3, sl
 8001436:	075a      	lsls	r2, r3, #29
 8001438:	000e      	movs	r6, r1
 800143a:	4302      	orrs	r2, r0
 800143c:	08dc      	lsrs	r4, r3, #3
 800143e:	e6a1      	b.n	8001184 <__aeabi_dadd+0x39c>
 8001440:	0011      	movs	r1, r2
 8001442:	0027      	movs	r7, r4
 8001444:	3920      	subs	r1, #32
 8001446:	40cf      	lsrs	r7, r1
 8001448:	2a20      	cmp	r2, #32
 800144a:	d003      	beq.n	8001454 <__aeabi_dadd+0x66c>
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	1a8a      	subs	r2, r1, r2
 8001450:	4094      	lsls	r4, r2
 8001452:	4320      	orrs	r0, r4
 8001454:	1e42      	subs	r2, r0, #1
 8001456:	4190      	sbcs	r0, r2
 8001458:	0005      	movs	r5, r0
 800145a:	433d      	orrs	r5, r7
 800145c:	e651      	b.n	8001102 <__aeabi_dadd+0x31a>
 800145e:	000c      	movs	r4, r1
 8001460:	2500      	movs	r5, #0
 8001462:	2200      	movs	r2, #0
 8001464:	e558      	b.n	8000f18 <__aeabi_dadd+0x130>
 8001466:	4460      	add	r0, ip
 8001468:	4560      	cmp	r0, ip
 800146a:	4192      	sbcs	r2, r2
 800146c:	4454      	add	r4, sl
 800146e:	4252      	negs	r2, r2
 8001470:	0005      	movs	r5, r0
 8001472:	18a4      	adds	r4, r4, r2
 8001474:	e73a      	b.n	80012ec <__aeabi_dadd+0x504>
 8001476:	4653      	mov	r3, sl
 8001478:	075a      	lsls	r2, r3, #29
 800147a:	4663      	mov	r3, ip
 800147c:	08d9      	lsrs	r1, r3, #3
 800147e:	4653      	mov	r3, sl
 8001480:	430a      	orrs	r2, r1
 8001482:	08dc      	lsrs	r4, r3, #3
 8001484:	e67e      	b.n	8001184 <__aeabi_dadd+0x39c>
 8001486:	001a      	movs	r2, r3
 8001488:	001c      	movs	r4, r3
 800148a:	432a      	orrs	r2, r5
 800148c:	d000      	beq.n	8001490 <__aeabi_dadd+0x6a8>
 800148e:	e6ab      	b.n	80011e8 <__aeabi_dadd+0x400>
 8001490:	e6c1      	b.n	8001216 <__aeabi_dadd+0x42e>
 8001492:	2120      	movs	r1, #32
 8001494:	2500      	movs	r5, #0
 8001496:	1a09      	subs	r1, r1, r0
 8001498:	e519      	b.n	8000ece <__aeabi_dadd+0xe6>
 800149a:	2200      	movs	r2, #0
 800149c:	2500      	movs	r5, #0
 800149e:	4c01      	ldr	r4, [pc, #4]	@ (80014a4 <__aeabi_dadd+0x6bc>)
 80014a0:	e53a      	b.n	8000f18 <__aeabi_dadd+0x130>
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff
 80014a8:	ff7fffff 	.word	0xff7fffff
 80014ac:	000007fe 	.word	0x000007fe

080014b0 <__aeabi_ddiv>:
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	46de      	mov	lr, fp
 80014b4:	4645      	mov	r5, r8
 80014b6:	4657      	mov	r7, sl
 80014b8:	464e      	mov	r6, r9
 80014ba:	b5e0      	push	{r5, r6, r7, lr}
 80014bc:	b087      	sub	sp, #28
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	030b      	lsls	r3, r1, #12
 80014c4:	0b1b      	lsrs	r3, r3, #12
 80014c6:	469b      	mov	fp, r3
 80014c8:	0fca      	lsrs	r2, r1, #31
 80014ca:	004b      	lsls	r3, r1, #1
 80014cc:	0004      	movs	r4, r0
 80014ce:	4680      	mov	r8, r0
 80014d0:	0d5b      	lsrs	r3, r3, #21
 80014d2:	9202      	str	r2, [sp, #8]
 80014d4:	d100      	bne.n	80014d8 <__aeabi_ddiv+0x28>
 80014d6:	e16a      	b.n	80017ae <__aeabi_ddiv+0x2fe>
 80014d8:	4ad4      	ldr	r2, [pc, #848]	@ (800182c <__aeabi_ddiv+0x37c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x30>
 80014de:	e18c      	b.n	80017fa <__aeabi_ddiv+0x34a>
 80014e0:	4659      	mov	r1, fp
 80014e2:	0f42      	lsrs	r2, r0, #29
 80014e4:	00c9      	lsls	r1, r1, #3
 80014e6:	430a      	orrs	r2, r1
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	0409      	lsls	r1, r1, #16
 80014ec:	4311      	orrs	r1, r2
 80014ee:	00c2      	lsls	r2, r0, #3
 80014f0:	4690      	mov	r8, r2
 80014f2:	4acf      	ldr	r2, [pc, #828]	@ (8001830 <__aeabi_ddiv+0x380>)
 80014f4:	4689      	mov	r9, r1
 80014f6:	4692      	mov	sl, r2
 80014f8:	449a      	add	sl, r3
 80014fa:	2300      	movs	r3, #0
 80014fc:	2400      	movs	r4, #0
 80014fe:	9303      	str	r3, [sp, #12]
 8001500:	9e00      	ldr	r6, [sp, #0]
 8001502:	9f01      	ldr	r7, [sp, #4]
 8001504:	033b      	lsls	r3, r7, #12
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	469b      	mov	fp, r3
 800150a:	007b      	lsls	r3, r7, #1
 800150c:	0030      	movs	r0, r6
 800150e:	0d5b      	lsrs	r3, r3, #21
 8001510:	0ffd      	lsrs	r5, r7, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d100      	bne.n	8001518 <__aeabi_ddiv+0x68>
 8001516:	e128      	b.n	800176a <__aeabi_ddiv+0x2ba>
 8001518:	4ac4      	ldr	r2, [pc, #784]	@ (800182c <__aeabi_ddiv+0x37c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d100      	bne.n	8001520 <__aeabi_ddiv+0x70>
 800151e:	e177      	b.n	8001810 <__aeabi_ddiv+0x360>
 8001520:	4659      	mov	r1, fp
 8001522:	0f72      	lsrs	r2, r6, #29
 8001524:	00c9      	lsls	r1, r1, #3
 8001526:	430a      	orrs	r2, r1
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	0409      	lsls	r1, r1, #16
 800152c:	4311      	orrs	r1, r2
 800152e:	468b      	mov	fp, r1
 8001530:	49bf      	ldr	r1, [pc, #764]	@ (8001830 <__aeabi_ddiv+0x380>)
 8001532:	00f2      	lsls	r2, r6, #3
 8001534:	468c      	mov	ip, r1
 8001536:	4651      	mov	r1, sl
 8001538:	4463      	add	r3, ip
 800153a:	1acb      	subs	r3, r1, r3
 800153c:	469a      	mov	sl, r3
 800153e:	2300      	movs	r3, #0
 8001540:	9e02      	ldr	r6, [sp, #8]
 8001542:	406e      	eors	r6, r5
 8001544:	2c0f      	cmp	r4, #15
 8001546:	d827      	bhi.n	8001598 <__aeabi_ddiv+0xe8>
 8001548:	49ba      	ldr	r1, [pc, #744]	@ (8001834 <__aeabi_ddiv+0x384>)
 800154a:	00a4      	lsls	r4, r4, #2
 800154c:	5909      	ldr	r1, [r1, r4]
 800154e:	468f      	mov	pc, r1
 8001550:	46cb      	mov	fp, r9
 8001552:	4642      	mov	r2, r8
 8001554:	9e02      	ldr	r6, [sp, #8]
 8001556:	9b03      	ldr	r3, [sp, #12]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d016      	beq.n	800158a <__aeabi_ddiv+0xda>
 800155c:	2b03      	cmp	r3, #3
 800155e:	d100      	bne.n	8001562 <__aeabi_ddiv+0xb2>
 8001560:	e2a6      	b.n	8001ab0 <__aeabi_ddiv+0x600>
 8001562:	2b01      	cmp	r3, #1
 8001564:	d000      	beq.n	8001568 <__aeabi_ddiv+0xb8>
 8001566:	e0df      	b.n	8001728 <__aeabi_ddiv+0x278>
 8001568:	2200      	movs	r2, #0
 800156a:	2300      	movs	r3, #0
 800156c:	2400      	movs	r4, #0
 800156e:	4690      	mov	r8, r2
 8001570:	051b      	lsls	r3, r3, #20
 8001572:	4323      	orrs	r3, r4
 8001574:	07f6      	lsls	r6, r6, #31
 8001576:	4333      	orrs	r3, r6
 8001578:	4640      	mov	r0, r8
 800157a:	0019      	movs	r1, r3
 800157c:	b007      	add	sp, #28
 800157e:	bcf0      	pop	{r4, r5, r6, r7}
 8001580:	46bb      	mov	fp, r7
 8001582:	46b2      	mov	sl, r6
 8001584:	46a9      	mov	r9, r5
 8001586:	46a0      	mov	r8, r4
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158a:	2200      	movs	r2, #0
 800158c:	2400      	movs	r4, #0
 800158e:	4690      	mov	r8, r2
 8001590:	4ba6      	ldr	r3, [pc, #664]	@ (800182c <__aeabi_ddiv+0x37c>)
 8001592:	e7ed      	b.n	8001570 <__aeabi_ddiv+0xc0>
 8001594:	002e      	movs	r6, r5
 8001596:	e7df      	b.n	8001558 <__aeabi_ddiv+0xa8>
 8001598:	45cb      	cmp	fp, r9
 800159a:	d200      	bcs.n	800159e <__aeabi_ddiv+0xee>
 800159c:	e1d4      	b.n	8001948 <__aeabi_ddiv+0x498>
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0xf2>
 80015a0:	e1cf      	b.n	8001942 <__aeabi_ddiv+0x492>
 80015a2:	2301      	movs	r3, #1
 80015a4:	425b      	negs	r3, r3
 80015a6:	469c      	mov	ip, r3
 80015a8:	4644      	mov	r4, r8
 80015aa:	4648      	mov	r0, r9
 80015ac:	2700      	movs	r7, #0
 80015ae:	44e2      	add	sl, ip
 80015b0:	465b      	mov	r3, fp
 80015b2:	0e15      	lsrs	r5, r2, #24
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	431d      	orrs	r5, r3
 80015b8:	0c19      	lsrs	r1, r3, #16
 80015ba:	042b      	lsls	r3, r5, #16
 80015bc:	0212      	lsls	r2, r2, #8
 80015be:	9500      	str	r5, [sp, #0]
 80015c0:	0c1d      	lsrs	r5, r3, #16
 80015c2:	4691      	mov	r9, r2
 80015c4:	9102      	str	r1, [sp, #8]
 80015c6:	9503      	str	r5, [sp, #12]
 80015c8:	f7fe fe3e 	bl	8000248 <__aeabi_uidivmod>
 80015cc:	0002      	movs	r2, r0
 80015ce:	436a      	muls	r2, r5
 80015d0:	040b      	lsls	r3, r1, #16
 80015d2:	0c21      	lsrs	r1, r4, #16
 80015d4:	4680      	mov	r8, r0
 80015d6:	4319      	orrs	r1, r3
 80015d8:	428a      	cmp	r2, r1
 80015da:	d909      	bls.n	80015f0 <__aeabi_ddiv+0x140>
 80015dc:	9d00      	ldr	r5, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	46ac      	mov	ip, r5
 80015e2:	425b      	negs	r3, r3
 80015e4:	4461      	add	r1, ip
 80015e6:	469c      	mov	ip, r3
 80015e8:	44e0      	add	r8, ip
 80015ea:	428d      	cmp	r5, r1
 80015ec:	d800      	bhi.n	80015f0 <__aeabi_ddiv+0x140>
 80015ee:	e1fb      	b.n	80019e8 <__aeabi_ddiv+0x538>
 80015f0:	1a88      	subs	r0, r1, r2
 80015f2:	9902      	ldr	r1, [sp, #8]
 80015f4:	f7fe fe28 	bl	8000248 <__aeabi_uidivmod>
 80015f8:	9a03      	ldr	r2, [sp, #12]
 80015fa:	0424      	lsls	r4, r4, #16
 80015fc:	4342      	muls	r2, r0
 80015fe:	0409      	lsls	r1, r1, #16
 8001600:	0c24      	lsrs	r4, r4, #16
 8001602:	0003      	movs	r3, r0
 8001604:	430c      	orrs	r4, r1
 8001606:	42a2      	cmp	r2, r4
 8001608:	d906      	bls.n	8001618 <__aeabi_ddiv+0x168>
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	468c      	mov	ip, r1
 8001610:	4464      	add	r4, ip
 8001612:	42a1      	cmp	r1, r4
 8001614:	d800      	bhi.n	8001618 <__aeabi_ddiv+0x168>
 8001616:	e1e1      	b.n	80019dc <__aeabi_ddiv+0x52c>
 8001618:	1aa0      	subs	r0, r4, r2
 800161a:	4642      	mov	r2, r8
 800161c:	0412      	lsls	r2, r2, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	4693      	mov	fp, r2
 8001622:	464b      	mov	r3, r9
 8001624:	4659      	mov	r1, fp
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	001d      	movs	r5, r3
 800162a:	9304      	str	r3, [sp, #16]
 800162c:	040b      	lsls	r3, r1, #16
 800162e:	4649      	mov	r1, r9
 8001630:	0409      	lsls	r1, r1, #16
 8001632:	0c09      	lsrs	r1, r1, #16
 8001634:	000c      	movs	r4, r1
 8001636:	0c1b      	lsrs	r3, r3, #16
 8001638:	435c      	muls	r4, r3
 800163a:	0c12      	lsrs	r2, r2, #16
 800163c:	436b      	muls	r3, r5
 800163e:	4688      	mov	r8, r1
 8001640:	4351      	muls	r1, r2
 8001642:	436a      	muls	r2, r5
 8001644:	0c25      	lsrs	r5, r4, #16
 8001646:	46ac      	mov	ip, r5
 8001648:	185b      	adds	r3, r3, r1
 800164a:	4463      	add	r3, ip
 800164c:	4299      	cmp	r1, r3
 800164e:	d903      	bls.n	8001658 <__aeabi_ddiv+0x1a8>
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	0249      	lsls	r1, r1, #9
 8001654:	468c      	mov	ip, r1
 8001656:	4462      	add	r2, ip
 8001658:	0c19      	lsrs	r1, r3, #16
 800165a:	0424      	lsls	r4, r4, #16
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c24      	lsrs	r4, r4, #16
 8001660:	188a      	adds	r2, r1, r2
 8001662:	191c      	adds	r4, r3, r4
 8001664:	4290      	cmp	r0, r2
 8001666:	d302      	bcc.n	800166e <__aeabi_ddiv+0x1be>
 8001668:	d116      	bne.n	8001698 <__aeabi_ddiv+0x1e8>
 800166a:	42a7      	cmp	r7, r4
 800166c:	d214      	bcs.n	8001698 <__aeabi_ddiv+0x1e8>
 800166e:	465b      	mov	r3, fp
 8001670:	9d00      	ldr	r5, [sp, #0]
 8001672:	3b01      	subs	r3, #1
 8001674:	444f      	add	r7, r9
 8001676:	9305      	str	r3, [sp, #20]
 8001678:	454f      	cmp	r7, r9
 800167a:	419b      	sbcs	r3, r3
 800167c:	46ac      	mov	ip, r5
 800167e:	425b      	negs	r3, r3
 8001680:	4463      	add	r3, ip
 8001682:	18c0      	adds	r0, r0, r3
 8001684:	4285      	cmp	r5, r0
 8001686:	d300      	bcc.n	800168a <__aeabi_ddiv+0x1da>
 8001688:	e1a1      	b.n	80019ce <__aeabi_ddiv+0x51e>
 800168a:	4282      	cmp	r2, r0
 800168c:	d900      	bls.n	8001690 <__aeabi_ddiv+0x1e0>
 800168e:	e1f6      	b.n	8001a7e <__aeabi_ddiv+0x5ce>
 8001690:	d100      	bne.n	8001694 <__aeabi_ddiv+0x1e4>
 8001692:	e1f1      	b.n	8001a78 <__aeabi_ddiv+0x5c8>
 8001694:	9b05      	ldr	r3, [sp, #20]
 8001696:	469b      	mov	fp, r3
 8001698:	1b3c      	subs	r4, r7, r4
 800169a:	42a7      	cmp	r7, r4
 800169c:	41bf      	sbcs	r7, r7
 800169e:	9d00      	ldr	r5, [sp, #0]
 80016a0:	1a80      	subs	r0, r0, r2
 80016a2:	427f      	negs	r7, r7
 80016a4:	1bc0      	subs	r0, r0, r7
 80016a6:	4285      	cmp	r5, r0
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x1fc>
 80016aa:	e1d0      	b.n	8001a4e <__aeabi_ddiv+0x59e>
 80016ac:	9902      	ldr	r1, [sp, #8]
 80016ae:	f7fe fdcb 	bl	8000248 <__aeabi_uidivmod>
 80016b2:	9a03      	ldr	r2, [sp, #12]
 80016b4:	040b      	lsls	r3, r1, #16
 80016b6:	4342      	muls	r2, r0
 80016b8:	0c21      	lsrs	r1, r4, #16
 80016ba:	0007      	movs	r7, r0
 80016bc:	4319      	orrs	r1, r3
 80016be:	428a      	cmp	r2, r1
 80016c0:	d900      	bls.n	80016c4 <__aeabi_ddiv+0x214>
 80016c2:	e178      	b.n	80019b6 <__aeabi_ddiv+0x506>
 80016c4:	1a88      	subs	r0, r1, r2
 80016c6:	9902      	ldr	r1, [sp, #8]
 80016c8:	f7fe fdbe 	bl	8000248 <__aeabi_uidivmod>
 80016cc:	9a03      	ldr	r2, [sp, #12]
 80016ce:	0424      	lsls	r4, r4, #16
 80016d0:	4342      	muls	r2, r0
 80016d2:	0409      	lsls	r1, r1, #16
 80016d4:	0c24      	lsrs	r4, r4, #16
 80016d6:	0003      	movs	r3, r0
 80016d8:	430c      	orrs	r4, r1
 80016da:	42a2      	cmp	r2, r4
 80016dc:	d900      	bls.n	80016e0 <__aeabi_ddiv+0x230>
 80016de:	e15d      	b.n	800199c <__aeabi_ddiv+0x4ec>
 80016e0:	4641      	mov	r1, r8
 80016e2:	1aa4      	subs	r4, r4, r2
 80016e4:	043a      	lsls	r2, r7, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	9d04      	ldr	r5, [sp, #16]
 80016ea:	0413      	lsls	r3, r2, #16
 80016ec:	0c1b      	lsrs	r3, r3, #16
 80016ee:	4359      	muls	r1, r3
 80016f0:	4647      	mov	r7, r8
 80016f2:	436b      	muls	r3, r5
 80016f4:	469c      	mov	ip, r3
 80016f6:	0c10      	lsrs	r0, r2, #16
 80016f8:	4347      	muls	r7, r0
 80016fa:	0c0b      	lsrs	r3, r1, #16
 80016fc:	44bc      	add	ip, r7
 80016fe:	4463      	add	r3, ip
 8001700:	4368      	muls	r0, r5
 8001702:	429f      	cmp	r7, r3
 8001704:	d903      	bls.n	800170e <__aeabi_ddiv+0x25e>
 8001706:	2580      	movs	r5, #128	@ 0x80
 8001708:	026d      	lsls	r5, r5, #9
 800170a:	46ac      	mov	ip, r5
 800170c:	4460      	add	r0, ip
 800170e:	0c1f      	lsrs	r7, r3, #16
 8001710:	0409      	lsls	r1, r1, #16
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	0c09      	lsrs	r1, r1, #16
 8001716:	183f      	adds	r7, r7, r0
 8001718:	185b      	adds	r3, r3, r1
 800171a:	42bc      	cmp	r4, r7
 800171c:	d200      	bcs.n	8001720 <__aeabi_ddiv+0x270>
 800171e:	e102      	b.n	8001926 <__aeabi_ddiv+0x476>
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x274>
 8001722:	e0fd      	b.n	8001920 <__aeabi_ddiv+0x470>
 8001724:	2301      	movs	r3, #1
 8001726:	431a      	orrs	r2, r3
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <__aeabi_ddiv+0x388>)
 800172a:	4453      	add	r3, sl
 800172c:	2b00      	cmp	r3, #0
 800172e:	dc00      	bgt.n	8001732 <__aeabi_ddiv+0x282>
 8001730:	e0ae      	b.n	8001890 <__aeabi_ddiv+0x3e0>
 8001732:	0751      	lsls	r1, r2, #29
 8001734:	d000      	beq.n	8001738 <__aeabi_ddiv+0x288>
 8001736:	e198      	b.n	8001a6a <__aeabi_ddiv+0x5ba>
 8001738:	4659      	mov	r1, fp
 800173a:	01c9      	lsls	r1, r1, #7
 800173c:	d506      	bpl.n	800174c <__aeabi_ddiv+0x29c>
 800173e:	4659      	mov	r1, fp
 8001740:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <__aeabi_ddiv+0x38c>)
 8001742:	4019      	ands	r1, r3
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	468b      	mov	fp, r1
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4453      	add	r3, sl
 800174c:	493c      	ldr	r1, [pc, #240]	@ (8001840 <__aeabi_ddiv+0x390>)
 800174e:	428b      	cmp	r3, r1
 8001750:	dd00      	ble.n	8001754 <__aeabi_ddiv+0x2a4>
 8001752:	e71a      	b.n	800158a <__aeabi_ddiv+0xda>
 8001754:	4659      	mov	r1, fp
 8001756:	08d2      	lsrs	r2, r2, #3
 8001758:	0749      	lsls	r1, r1, #29
 800175a:	4311      	orrs	r1, r2
 800175c:	465a      	mov	r2, fp
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	0254      	lsls	r4, r2, #9
 8001762:	4688      	mov	r8, r1
 8001764:	0b24      	lsrs	r4, r4, #12
 8001766:	0d5b      	lsrs	r3, r3, #21
 8001768:	e702      	b.n	8001570 <__aeabi_ddiv+0xc0>
 800176a:	465a      	mov	r2, fp
 800176c:	9b00      	ldr	r3, [sp, #0]
 800176e:	431a      	orrs	r2, r3
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x2c4>
 8001772:	e07e      	b.n	8001872 <__aeabi_ddiv+0x3c2>
 8001774:	465b      	mov	r3, fp
 8001776:	2b00      	cmp	r3, #0
 8001778:	d100      	bne.n	800177c <__aeabi_ddiv+0x2cc>
 800177a:	e100      	b.n	800197e <__aeabi_ddiv+0x4ce>
 800177c:	4658      	mov	r0, fp
 800177e:	f001 fabb 	bl	8002cf8 <__clzsi2>
 8001782:	0002      	movs	r2, r0
 8001784:	0003      	movs	r3, r0
 8001786:	3a0b      	subs	r2, #11
 8001788:	271d      	movs	r7, #29
 800178a:	9e00      	ldr	r6, [sp, #0]
 800178c:	1aba      	subs	r2, r7, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4658      	mov	r0, fp
 8001792:	40d6      	lsrs	r6, r2
 8001794:	3908      	subs	r1, #8
 8001796:	4088      	lsls	r0, r1
 8001798:	0032      	movs	r2, r6
 800179a:	4302      	orrs	r2, r0
 800179c:	4693      	mov	fp, r2
 800179e:	9a00      	ldr	r2, [sp, #0]
 80017a0:	408a      	lsls	r2, r1
 80017a2:	4928      	ldr	r1, [pc, #160]	@ (8001844 <__aeabi_ddiv+0x394>)
 80017a4:	4453      	add	r3, sl
 80017a6:	468a      	mov	sl, r1
 80017a8:	449a      	add	sl, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	e6c8      	b.n	8001540 <__aeabi_ddiv+0x90>
 80017ae:	465b      	mov	r3, fp
 80017b0:	4303      	orrs	r3, r0
 80017b2:	4699      	mov	r9, r3
 80017b4:	d056      	beq.n	8001864 <__aeabi_ddiv+0x3b4>
 80017b6:	465b      	mov	r3, fp
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x30e>
 80017bc:	e0cd      	b.n	800195a <__aeabi_ddiv+0x4aa>
 80017be:	4658      	mov	r0, fp
 80017c0:	f001 fa9a 	bl	8002cf8 <__clzsi2>
 80017c4:	230b      	movs	r3, #11
 80017c6:	425b      	negs	r3, r3
 80017c8:	469c      	mov	ip, r3
 80017ca:	0002      	movs	r2, r0
 80017cc:	4484      	add	ip, r0
 80017ce:	4666      	mov	r6, ip
 80017d0:	231d      	movs	r3, #29
 80017d2:	1b9b      	subs	r3, r3, r6
 80017d4:	0026      	movs	r6, r4
 80017d6:	0011      	movs	r1, r2
 80017d8:	4658      	mov	r0, fp
 80017da:	40de      	lsrs	r6, r3
 80017dc:	3908      	subs	r1, #8
 80017de:	4088      	lsls	r0, r1
 80017e0:	0033      	movs	r3, r6
 80017e2:	4303      	orrs	r3, r0
 80017e4:	4699      	mov	r9, r3
 80017e6:	0023      	movs	r3, r4
 80017e8:	408b      	lsls	r3, r1
 80017ea:	4698      	mov	r8, r3
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <__aeabi_ddiv+0x398>)
 80017ee:	2400      	movs	r4, #0
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	469a      	mov	sl, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	e682      	b.n	8001500 <__aeabi_ddiv+0x50>
 80017fa:	465a      	mov	r2, fp
 80017fc:	4302      	orrs	r2, r0
 80017fe:	4691      	mov	r9, r2
 8001800:	d12a      	bne.n	8001858 <__aeabi_ddiv+0x3a8>
 8001802:	2200      	movs	r2, #0
 8001804:	469a      	mov	sl, r3
 8001806:	2302      	movs	r3, #2
 8001808:	4690      	mov	r8, r2
 800180a:	2408      	movs	r4, #8
 800180c:	9303      	str	r3, [sp, #12]
 800180e:	e677      	b.n	8001500 <__aeabi_ddiv+0x50>
 8001810:	465a      	mov	r2, fp
 8001812:	9b00      	ldr	r3, [sp, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <__aeabi_ddiv+0x39c>)
 8001818:	469c      	mov	ip, r3
 800181a:	44e2      	add	sl, ip
 800181c:	2a00      	cmp	r2, #0
 800181e:	d117      	bne.n	8001850 <__aeabi_ddiv+0x3a0>
 8001820:	2302      	movs	r3, #2
 8001822:	431c      	orrs	r4, r3
 8001824:	2300      	movs	r3, #0
 8001826:	469b      	mov	fp, r3
 8001828:	3302      	adds	r3, #2
 800182a:	e689      	b.n	8001540 <__aeabi_ddiv+0x90>
 800182c:	000007ff 	.word	0x000007ff
 8001830:	fffffc01 	.word	0xfffffc01
 8001834:	0800c140 	.word	0x0800c140
 8001838:	000003ff 	.word	0x000003ff
 800183c:	feffffff 	.word	0xfeffffff
 8001840:	000007fe 	.word	0x000007fe
 8001844:	000003f3 	.word	0x000003f3
 8001848:	fffffc0d 	.word	0xfffffc0d
 800184c:	fffff801 	.word	0xfffff801
 8001850:	2303      	movs	r3, #3
 8001852:	0032      	movs	r2, r6
 8001854:	431c      	orrs	r4, r3
 8001856:	e673      	b.n	8001540 <__aeabi_ddiv+0x90>
 8001858:	469a      	mov	sl, r3
 800185a:	2303      	movs	r3, #3
 800185c:	46d9      	mov	r9, fp
 800185e:	240c      	movs	r4, #12
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	e64d      	b.n	8001500 <__aeabi_ddiv+0x50>
 8001864:	2300      	movs	r3, #0
 8001866:	4698      	mov	r8, r3
 8001868:	469a      	mov	sl, r3
 800186a:	3301      	adds	r3, #1
 800186c:	2404      	movs	r4, #4
 800186e:	9303      	str	r3, [sp, #12]
 8001870:	e646      	b.n	8001500 <__aeabi_ddiv+0x50>
 8001872:	2301      	movs	r3, #1
 8001874:	431c      	orrs	r4, r3
 8001876:	2300      	movs	r3, #0
 8001878:	469b      	mov	fp, r3
 800187a:	3301      	adds	r3, #1
 800187c:	e660      	b.n	8001540 <__aeabi_ddiv+0x90>
 800187e:	2300      	movs	r3, #0
 8001880:	2480      	movs	r4, #128	@ 0x80
 8001882:	4698      	mov	r8, r3
 8001884:	2600      	movs	r6, #0
 8001886:	4b92      	ldr	r3, [pc, #584]	@ (8001ad0 <__aeabi_ddiv+0x620>)
 8001888:	0324      	lsls	r4, r4, #12
 800188a:	e671      	b.n	8001570 <__aeabi_ddiv+0xc0>
 800188c:	2201      	movs	r2, #1
 800188e:	4252      	negs	r2, r2
 8001890:	2101      	movs	r1, #1
 8001892:	1ac9      	subs	r1, r1, r3
 8001894:	2938      	cmp	r1, #56	@ 0x38
 8001896:	dd00      	ble.n	800189a <__aeabi_ddiv+0x3ea>
 8001898:	e666      	b.n	8001568 <__aeabi_ddiv+0xb8>
 800189a:	291f      	cmp	r1, #31
 800189c:	dc00      	bgt.n	80018a0 <__aeabi_ddiv+0x3f0>
 800189e:	e0ab      	b.n	80019f8 <__aeabi_ddiv+0x548>
 80018a0:	201f      	movs	r0, #31
 80018a2:	4240      	negs	r0, r0
 80018a4:	1ac3      	subs	r3, r0, r3
 80018a6:	4658      	mov	r0, fp
 80018a8:	40d8      	lsrs	r0, r3
 80018aa:	0003      	movs	r3, r0
 80018ac:	2920      	cmp	r1, #32
 80018ae:	d004      	beq.n	80018ba <__aeabi_ddiv+0x40a>
 80018b0:	4658      	mov	r0, fp
 80018b2:	4988      	ldr	r1, [pc, #544]	@ (8001ad4 <__aeabi_ddiv+0x624>)
 80018b4:	4451      	add	r1, sl
 80018b6:	4088      	lsls	r0, r1
 80018b8:	4302      	orrs	r2, r0
 80018ba:	1e51      	subs	r1, r2, #1
 80018bc:	418a      	sbcs	r2, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	2307      	movs	r3, #7
 80018c2:	0019      	movs	r1, r3
 80018c4:	2400      	movs	r4, #0
 80018c6:	4011      	ands	r1, r2
 80018c8:	4213      	tst	r3, r2
 80018ca:	d00c      	beq.n	80018e6 <__aeabi_ddiv+0x436>
 80018cc:	230f      	movs	r3, #15
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d100      	bne.n	80018d6 <__aeabi_ddiv+0x426>
 80018d4:	e0f9      	b.n	8001aca <__aeabi_ddiv+0x61a>
 80018d6:	1d11      	adds	r1, r2, #4
 80018d8:	4291      	cmp	r1, r2
 80018da:	419b      	sbcs	r3, r3
 80018dc:	000a      	movs	r2, r1
 80018de:	425b      	negs	r3, r3
 80018e0:	0759      	lsls	r1, r3, #29
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	0b1c      	lsrs	r4, r3, #12
 80018e6:	08d2      	lsrs	r2, r2, #3
 80018e8:	430a      	orrs	r2, r1
 80018ea:	4690      	mov	r8, r2
 80018ec:	2300      	movs	r3, #0
 80018ee:	e63f      	b.n	8001570 <__aeabi_ddiv+0xc0>
 80018f0:	2480      	movs	r4, #128	@ 0x80
 80018f2:	464b      	mov	r3, r9
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	4223      	tst	r3, r4
 80018f8:	d009      	beq.n	800190e <__aeabi_ddiv+0x45e>
 80018fa:	465b      	mov	r3, fp
 80018fc:	4223      	tst	r3, r4
 80018fe:	d106      	bne.n	800190e <__aeabi_ddiv+0x45e>
 8001900:	431c      	orrs	r4, r3
 8001902:	0324      	lsls	r4, r4, #12
 8001904:	002e      	movs	r6, r5
 8001906:	4690      	mov	r8, r2
 8001908:	4b71      	ldr	r3, [pc, #452]	@ (8001ad0 <__aeabi_ddiv+0x620>)
 800190a:	0b24      	lsrs	r4, r4, #12
 800190c:	e630      	b.n	8001570 <__aeabi_ddiv+0xc0>
 800190e:	2480      	movs	r4, #128	@ 0x80
 8001910:	464b      	mov	r3, r9
 8001912:	0324      	lsls	r4, r4, #12
 8001914:	431c      	orrs	r4, r3
 8001916:	0324      	lsls	r4, r4, #12
 8001918:	9e02      	ldr	r6, [sp, #8]
 800191a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad0 <__aeabi_ddiv+0x620>)
 800191c:	0b24      	lsrs	r4, r4, #12
 800191e:	e627      	b.n	8001570 <__aeabi_ddiv+0xc0>
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_ddiv+0x476>
 8001924:	e700      	b.n	8001728 <__aeabi_ddiv+0x278>
 8001926:	9800      	ldr	r0, [sp, #0]
 8001928:	1e51      	subs	r1, r2, #1
 800192a:	4684      	mov	ip, r0
 800192c:	4464      	add	r4, ip
 800192e:	4284      	cmp	r4, r0
 8001930:	d200      	bcs.n	8001934 <__aeabi_ddiv+0x484>
 8001932:	e084      	b.n	8001a3e <__aeabi_ddiv+0x58e>
 8001934:	42bc      	cmp	r4, r7
 8001936:	d200      	bcs.n	800193a <__aeabi_ddiv+0x48a>
 8001938:	e0ae      	b.n	8001a98 <__aeabi_ddiv+0x5e8>
 800193a:	d100      	bne.n	800193e <__aeabi_ddiv+0x48e>
 800193c:	e0c1      	b.n	8001ac2 <__aeabi_ddiv+0x612>
 800193e:	000a      	movs	r2, r1
 8001940:	e6f0      	b.n	8001724 <__aeabi_ddiv+0x274>
 8001942:	4542      	cmp	r2, r8
 8001944:	d900      	bls.n	8001948 <__aeabi_ddiv+0x498>
 8001946:	e62c      	b.n	80015a2 <__aeabi_ddiv+0xf2>
 8001948:	464b      	mov	r3, r9
 800194a:	07dc      	lsls	r4, r3, #31
 800194c:	0858      	lsrs	r0, r3, #1
 800194e:	4643      	mov	r3, r8
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	431c      	orrs	r4, r3
 8001954:	4643      	mov	r3, r8
 8001956:	07df      	lsls	r7, r3, #31
 8001958:	e62a      	b.n	80015b0 <__aeabi_ddiv+0x100>
 800195a:	f001 f9cd 	bl	8002cf8 <__clzsi2>
 800195e:	2315      	movs	r3, #21
 8001960:	469c      	mov	ip, r3
 8001962:	4484      	add	ip, r0
 8001964:	0002      	movs	r2, r0
 8001966:	4663      	mov	r3, ip
 8001968:	3220      	adds	r2, #32
 800196a:	2b1c      	cmp	r3, #28
 800196c:	dc00      	bgt.n	8001970 <__aeabi_ddiv+0x4c0>
 800196e:	e72e      	b.n	80017ce <__aeabi_ddiv+0x31e>
 8001970:	0023      	movs	r3, r4
 8001972:	3808      	subs	r0, #8
 8001974:	4083      	lsls	r3, r0
 8001976:	4699      	mov	r9, r3
 8001978:	2300      	movs	r3, #0
 800197a:	4698      	mov	r8, r3
 800197c:	e736      	b.n	80017ec <__aeabi_ddiv+0x33c>
 800197e:	f001 f9bb 	bl	8002cf8 <__clzsi2>
 8001982:	0002      	movs	r2, r0
 8001984:	0003      	movs	r3, r0
 8001986:	3215      	adds	r2, #21
 8001988:	3320      	adds	r3, #32
 800198a:	2a1c      	cmp	r2, #28
 800198c:	dc00      	bgt.n	8001990 <__aeabi_ddiv+0x4e0>
 800198e:	e6fb      	b.n	8001788 <__aeabi_ddiv+0x2d8>
 8001990:	9900      	ldr	r1, [sp, #0]
 8001992:	3808      	subs	r0, #8
 8001994:	4081      	lsls	r1, r0
 8001996:	2200      	movs	r2, #0
 8001998:	468b      	mov	fp, r1
 800199a:	e702      	b.n	80017a2 <__aeabi_ddiv+0x2f2>
 800199c:	9900      	ldr	r1, [sp, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	468c      	mov	ip, r1
 80019a2:	4464      	add	r4, ip
 80019a4:	42a1      	cmp	r1, r4
 80019a6:	d900      	bls.n	80019aa <__aeabi_ddiv+0x4fa>
 80019a8:	e69a      	b.n	80016e0 <__aeabi_ddiv+0x230>
 80019aa:	42a2      	cmp	r2, r4
 80019ac:	d800      	bhi.n	80019b0 <__aeabi_ddiv+0x500>
 80019ae:	e697      	b.n	80016e0 <__aeabi_ddiv+0x230>
 80019b0:	1e83      	subs	r3, r0, #2
 80019b2:	4464      	add	r4, ip
 80019b4:	e694      	b.n	80016e0 <__aeabi_ddiv+0x230>
 80019b6:	46ac      	mov	ip, r5
 80019b8:	4461      	add	r1, ip
 80019ba:	3f01      	subs	r7, #1
 80019bc:	428d      	cmp	r5, r1
 80019be:	d900      	bls.n	80019c2 <__aeabi_ddiv+0x512>
 80019c0:	e680      	b.n	80016c4 <__aeabi_ddiv+0x214>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d800      	bhi.n	80019c8 <__aeabi_ddiv+0x518>
 80019c6:	e67d      	b.n	80016c4 <__aeabi_ddiv+0x214>
 80019c8:	1e87      	subs	r7, r0, #2
 80019ca:	4461      	add	r1, ip
 80019cc:	e67a      	b.n	80016c4 <__aeabi_ddiv+0x214>
 80019ce:	4285      	cmp	r5, r0
 80019d0:	d000      	beq.n	80019d4 <__aeabi_ddiv+0x524>
 80019d2:	e65f      	b.n	8001694 <__aeabi_ddiv+0x1e4>
 80019d4:	45b9      	cmp	r9, r7
 80019d6:	d900      	bls.n	80019da <__aeabi_ddiv+0x52a>
 80019d8:	e65c      	b.n	8001694 <__aeabi_ddiv+0x1e4>
 80019da:	e656      	b.n	800168a <__aeabi_ddiv+0x1da>
 80019dc:	42a2      	cmp	r2, r4
 80019de:	d800      	bhi.n	80019e2 <__aeabi_ddiv+0x532>
 80019e0:	e61a      	b.n	8001618 <__aeabi_ddiv+0x168>
 80019e2:	1e83      	subs	r3, r0, #2
 80019e4:	4464      	add	r4, ip
 80019e6:	e617      	b.n	8001618 <__aeabi_ddiv+0x168>
 80019e8:	428a      	cmp	r2, r1
 80019ea:	d800      	bhi.n	80019ee <__aeabi_ddiv+0x53e>
 80019ec:	e600      	b.n	80015f0 <__aeabi_ddiv+0x140>
 80019ee:	46ac      	mov	ip, r5
 80019f0:	1e83      	subs	r3, r0, #2
 80019f2:	4698      	mov	r8, r3
 80019f4:	4461      	add	r1, ip
 80019f6:	e5fb      	b.n	80015f0 <__aeabi_ddiv+0x140>
 80019f8:	4837      	ldr	r0, [pc, #220]	@ (8001ad8 <__aeabi_ddiv+0x628>)
 80019fa:	0014      	movs	r4, r2
 80019fc:	4450      	add	r0, sl
 80019fe:	4082      	lsls	r2, r0
 8001a00:	465b      	mov	r3, fp
 8001a02:	0017      	movs	r7, r2
 8001a04:	4083      	lsls	r3, r0
 8001a06:	40cc      	lsrs	r4, r1
 8001a08:	1e7a      	subs	r2, r7, #1
 8001a0a:	4197      	sbcs	r7, r2
 8001a0c:	4323      	orrs	r3, r4
 8001a0e:	433b      	orrs	r3, r7
 8001a10:	001a      	movs	r2, r3
 8001a12:	465b      	mov	r3, fp
 8001a14:	40cb      	lsrs	r3, r1
 8001a16:	0751      	lsls	r1, r2, #29
 8001a18:	d009      	beq.n	8001a2e <__aeabi_ddiv+0x57e>
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	4011      	ands	r1, r2
 8001a1e:	2904      	cmp	r1, #4
 8001a20:	d005      	beq.n	8001a2e <__aeabi_ddiv+0x57e>
 8001a22:	1d11      	adds	r1, r2, #4
 8001a24:	4291      	cmp	r1, r2
 8001a26:	4192      	sbcs	r2, r2
 8001a28:	4252      	negs	r2, r2
 8001a2a:	189b      	adds	r3, r3, r2
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	0219      	lsls	r1, r3, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_ddiv+0x584>
 8001a32:	e755      	b.n	80018e0 <__aeabi_ddiv+0x430>
 8001a34:	2200      	movs	r2, #0
 8001a36:	2301      	movs	r3, #1
 8001a38:	2400      	movs	r4, #0
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	e598      	b.n	8001570 <__aeabi_ddiv+0xc0>
 8001a3e:	000a      	movs	r2, r1
 8001a40:	42bc      	cmp	r4, r7
 8001a42:	d000      	beq.n	8001a46 <__aeabi_ddiv+0x596>
 8001a44:	e66e      	b.n	8001724 <__aeabi_ddiv+0x274>
 8001a46:	454b      	cmp	r3, r9
 8001a48:	d000      	beq.n	8001a4c <__aeabi_ddiv+0x59c>
 8001a4a:	e66b      	b.n	8001724 <__aeabi_ddiv+0x274>
 8001a4c:	e66c      	b.n	8001728 <__aeabi_ddiv+0x278>
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <__aeabi_ddiv+0x62c>)
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <__aeabi_ddiv+0x630>)
 8001a52:	4453      	add	r3, sl
 8001a54:	4592      	cmp	sl, r2
 8001a56:	da00      	bge.n	8001a5a <__aeabi_ddiv+0x5aa>
 8001a58:	e718      	b.n	800188c <__aeabi_ddiv+0x3dc>
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4249      	negs	r1, r1
 8001a5e:	1d0a      	adds	r2, r1, #4
 8001a60:	428a      	cmp	r2, r1
 8001a62:	4189      	sbcs	r1, r1
 8001a64:	4249      	negs	r1, r1
 8001a66:	448b      	add	fp, r1
 8001a68:	e666      	b.n	8001738 <__aeabi_ddiv+0x288>
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	4011      	ands	r1, r2
 8001a6e:	2904      	cmp	r1, #4
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x5c4>
 8001a72:	e661      	b.n	8001738 <__aeabi_ddiv+0x288>
 8001a74:	0011      	movs	r1, r2
 8001a76:	e7f2      	b.n	8001a5e <__aeabi_ddiv+0x5ae>
 8001a78:	42bc      	cmp	r4, r7
 8001a7a:	d800      	bhi.n	8001a7e <__aeabi_ddiv+0x5ce>
 8001a7c:	e60a      	b.n	8001694 <__aeabi_ddiv+0x1e4>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	425b      	negs	r3, r3
 8001a82:	469c      	mov	ip, r3
 8001a84:	9900      	ldr	r1, [sp, #0]
 8001a86:	444f      	add	r7, r9
 8001a88:	454f      	cmp	r7, r9
 8001a8a:	419b      	sbcs	r3, r3
 8001a8c:	44e3      	add	fp, ip
 8001a8e:	468c      	mov	ip, r1
 8001a90:	425b      	negs	r3, r3
 8001a92:	4463      	add	r3, ip
 8001a94:	18c0      	adds	r0, r0, r3
 8001a96:	e5ff      	b.n	8001698 <__aeabi_ddiv+0x1e8>
 8001a98:	4649      	mov	r1, r9
 8001a9a:	9d00      	ldr	r5, [sp, #0]
 8001a9c:	0048      	lsls	r0, r1, #1
 8001a9e:	4548      	cmp	r0, r9
 8001aa0:	4189      	sbcs	r1, r1
 8001aa2:	46ac      	mov	ip, r5
 8001aa4:	4249      	negs	r1, r1
 8001aa6:	4461      	add	r1, ip
 8001aa8:	4681      	mov	r9, r0
 8001aaa:	3a02      	subs	r2, #2
 8001aac:	1864      	adds	r4, r4, r1
 8001aae:	e7c7      	b.n	8001a40 <__aeabi_ddiv+0x590>
 8001ab0:	2480      	movs	r4, #128	@ 0x80
 8001ab2:	465b      	mov	r3, fp
 8001ab4:	0324      	lsls	r4, r4, #12
 8001ab6:	431c      	orrs	r4, r3
 8001ab8:	0324      	lsls	r4, r4, #12
 8001aba:	4690      	mov	r8, r2
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <__aeabi_ddiv+0x620>)
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	e556      	b.n	8001570 <__aeabi_ddiv+0xc0>
 8001ac2:	4599      	cmp	r9, r3
 8001ac4:	d3e8      	bcc.n	8001a98 <__aeabi_ddiv+0x5e8>
 8001ac6:	000a      	movs	r2, r1
 8001ac8:	e7bd      	b.n	8001a46 <__aeabi_ddiv+0x596>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e708      	b.n	80018e0 <__aeabi_ddiv+0x430>
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	0000043e 	.word	0x0000043e
 8001ad8:	0000041e 	.word	0x0000041e
 8001adc:	000003ff 	.word	0x000003ff
 8001ae0:	fffffc02 	.word	0xfffffc02

08001ae4 <__eqdf2>:
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	4657      	mov	r7, sl
 8001ae8:	46de      	mov	lr, fp
 8001aea:	464e      	mov	r6, r9
 8001aec:	4645      	mov	r5, r8
 8001aee:	b5e0      	push	{r5, r6, r7, lr}
 8001af0:	000d      	movs	r5, r1
 8001af2:	0004      	movs	r4, r0
 8001af4:	0fe8      	lsrs	r0, r5, #31
 8001af6:	4683      	mov	fp, r0
 8001af8:	0309      	lsls	r1, r1, #12
 8001afa:	0fd8      	lsrs	r0, r3, #31
 8001afc:	0b09      	lsrs	r1, r1, #12
 8001afe:	4682      	mov	sl, r0
 8001b00:	4819      	ldr	r0, [pc, #100]	@ (8001b68 <__eqdf2+0x84>)
 8001b02:	468c      	mov	ip, r1
 8001b04:	031f      	lsls	r7, r3, #12
 8001b06:	0069      	lsls	r1, r5, #1
 8001b08:	005e      	lsls	r6, r3, #1
 8001b0a:	0d49      	lsrs	r1, r1, #21
 8001b0c:	0b3f      	lsrs	r7, r7, #12
 8001b0e:	0d76      	lsrs	r6, r6, #21
 8001b10:	4281      	cmp	r1, r0
 8001b12:	d018      	beq.n	8001b46 <__eqdf2+0x62>
 8001b14:	4286      	cmp	r6, r0
 8001b16:	d00f      	beq.n	8001b38 <__eqdf2+0x54>
 8001b18:	2001      	movs	r0, #1
 8001b1a:	42b1      	cmp	r1, r6
 8001b1c:	d10d      	bne.n	8001b3a <__eqdf2+0x56>
 8001b1e:	45bc      	cmp	ip, r7
 8001b20:	d10b      	bne.n	8001b3a <__eqdf2+0x56>
 8001b22:	4294      	cmp	r4, r2
 8001b24:	d109      	bne.n	8001b3a <__eqdf2+0x56>
 8001b26:	45d3      	cmp	fp, sl
 8001b28:	d01c      	beq.n	8001b64 <__eqdf2+0x80>
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d105      	bne.n	8001b3a <__eqdf2+0x56>
 8001b2e:	4660      	mov	r0, ip
 8001b30:	4320      	orrs	r0, r4
 8001b32:	1e43      	subs	r3, r0, #1
 8001b34:	4198      	sbcs	r0, r3
 8001b36:	e000      	b.n	8001b3a <__eqdf2+0x56>
 8001b38:	2001      	movs	r0, #1
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	2001      	movs	r0, #1
 8001b48:	428e      	cmp	r6, r1
 8001b4a:	d1f6      	bne.n	8001b3a <__eqdf2+0x56>
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	4339      	orrs	r1, r7
 8001b50:	000f      	movs	r7, r1
 8001b52:	4317      	orrs	r7, r2
 8001b54:	4327      	orrs	r7, r4
 8001b56:	d1f0      	bne.n	8001b3a <__eqdf2+0x56>
 8001b58:	465b      	mov	r3, fp
 8001b5a:	4652      	mov	r2, sl
 8001b5c:	1a98      	subs	r0, r3, r2
 8001b5e:	1e43      	subs	r3, r0, #1
 8001b60:	4198      	sbcs	r0, r3
 8001b62:	e7ea      	b.n	8001b3a <__eqdf2+0x56>
 8001b64:	2000      	movs	r0, #0
 8001b66:	e7e8      	b.n	8001b3a <__eqdf2+0x56>
 8001b68:	000007ff 	.word	0x000007ff

08001b6c <__gedf2>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	4657      	mov	r7, sl
 8001b70:	464e      	mov	r6, r9
 8001b72:	4645      	mov	r5, r8
 8001b74:	46de      	mov	lr, fp
 8001b76:	b5e0      	push	{r5, r6, r7, lr}
 8001b78:	000d      	movs	r5, r1
 8001b7a:	030f      	lsls	r7, r1, #12
 8001b7c:	0b39      	lsrs	r1, r7, #12
 8001b7e:	b083      	sub	sp, #12
 8001b80:	0004      	movs	r4, r0
 8001b82:	4680      	mov	r8, r0
 8001b84:	9101      	str	r1, [sp, #4]
 8001b86:	0058      	lsls	r0, r3, #1
 8001b88:	0fe9      	lsrs	r1, r5, #31
 8001b8a:	4f31      	ldr	r7, [pc, #196]	@ (8001c50 <__gedf2+0xe4>)
 8001b8c:	0d40      	lsrs	r0, r0, #21
 8001b8e:	468c      	mov	ip, r1
 8001b90:	006e      	lsls	r6, r5, #1
 8001b92:	0319      	lsls	r1, r3, #12
 8001b94:	4682      	mov	sl, r0
 8001b96:	4691      	mov	r9, r2
 8001b98:	0d76      	lsrs	r6, r6, #21
 8001b9a:	0b09      	lsrs	r1, r1, #12
 8001b9c:	0fd8      	lsrs	r0, r3, #31
 8001b9e:	42be      	cmp	r6, r7
 8001ba0:	d01f      	beq.n	8001be2 <__gedf2+0x76>
 8001ba2:	45ba      	cmp	sl, r7
 8001ba4:	d00f      	beq.n	8001bc6 <__gedf2+0x5a>
 8001ba6:	2e00      	cmp	r6, #0
 8001ba8:	d12f      	bne.n	8001c0a <__gedf2+0x9e>
 8001baa:	4655      	mov	r5, sl
 8001bac:	9e01      	ldr	r6, [sp, #4]
 8001bae:	4334      	orrs	r4, r6
 8001bb0:	2d00      	cmp	r5, #0
 8001bb2:	d127      	bne.n	8001c04 <__gedf2+0x98>
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	d03a      	beq.n	8001c2e <__gedf2+0xc2>
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	d145      	bne.n	8001c48 <__gedf2+0xdc>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d11a      	bne.n	8001bf6 <__gedf2+0x8a>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	e017      	b.n	8001bf6 <__gedf2+0x8a>
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	d13b      	bne.n	8001c42 <__gedf2+0xd6>
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d102      	bne.n	8001bd4 <__gedf2+0x68>
 8001bce:	9f01      	ldr	r7, [sp, #4]
 8001bd0:	4327      	orrs	r7, r4
 8001bd2:	d0f3      	beq.n	8001bbc <__gedf2+0x50>
 8001bd4:	4584      	cmp	ip, r0
 8001bd6:	d109      	bne.n	8001bec <__gedf2+0x80>
 8001bd8:	4663      	mov	r3, ip
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <__gedf2+0x54>
 8001bde:	4660      	mov	r0, ip
 8001be0:	e009      	b.n	8001bf6 <__gedf2+0x8a>
 8001be2:	9f01      	ldr	r7, [sp, #4]
 8001be4:	4327      	orrs	r7, r4
 8001be6:	d12c      	bne.n	8001c42 <__gedf2+0xd6>
 8001be8:	45b2      	cmp	sl, r6
 8001bea:	d024      	beq.n	8001c36 <__gedf2+0xca>
 8001bec:	4663      	mov	r3, ip
 8001bee:	2002      	movs	r0, #2
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	4018      	ands	r0, r3
 8001bf4:	3801      	subs	r0, #1
 8001bf6:	b003      	add	sp, #12
 8001bf8:	bcf0      	pop	{r4, r5, r6, r7}
 8001bfa:	46bb      	mov	fp, r7
 8001bfc:	46b2      	mov	sl, r6
 8001bfe:	46a9      	mov	r9, r5
 8001c00:	46a0      	mov	r8, r4
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	d0d9      	beq.n	8001bbc <__gedf2+0x50>
 8001c08:	e7e4      	b.n	8001bd4 <__gedf2+0x68>
 8001c0a:	4654      	mov	r4, sl
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d0ed      	beq.n	8001bec <__gedf2+0x80>
 8001c10:	4584      	cmp	ip, r0
 8001c12:	d1eb      	bne.n	8001bec <__gedf2+0x80>
 8001c14:	4556      	cmp	r6, sl
 8001c16:	dce9      	bgt.n	8001bec <__gedf2+0x80>
 8001c18:	dbde      	blt.n	8001bd8 <__gedf2+0x6c>
 8001c1a:	9b01      	ldr	r3, [sp, #4]
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d8e5      	bhi.n	8001bec <__gedf2+0x80>
 8001c20:	d1da      	bne.n	8001bd8 <__gedf2+0x6c>
 8001c22:	45c8      	cmp	r8, r9
 8001c24:	d8e2      	bhi.n	8001bec <__gedf2+0x80>
 8001c26:	2000      	movs	r0, #0
 8001c28:	45c8      	cmp	r8, r9
 8001c2a:	d2e4      	bcs.n	8001bf6 <__gedf2+0x8a>
 8001c2c:	e7d4      	b.n	8001bd8 <__gedf2+0x6c>
 8001c2e:	2000      	movs	r0, #0
 8001c30:	2c00      	cmp	r4, #0
 8001c32:	d0e0      	beq.n	8001bf6 <__gedf2+0x8a>
 8001c34:	e7da      	b.n	8001bec <__gedf2+0x80>
 8001c36:	4311      	orrs	r1, r2
 8001c38:	d103      	bne.n	8001c42 <__gedf2+0xd6>
 8001c3a:	4584      	cmp	ip, r0
 8001c3c:	d1d6      	bne.n	8001bec <__gedf2+0x80>
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e7d9      	b.n	8001bf6 <__gedf2+0x8a>
 8001c42:	2002      	movs	r0, #2
 8001c44:	4240      	negs	r0, r0
 8001c46:	e7d6      	b.n	8001bf6 <__gedf2+0x8a>
 8001c48:	4584      	cmp	ip, r0
 8001c4a:	d0e6      	beq.n	8001c1a <__gedf2+0xae>
 8001c4c:	e7ce      	b.n	8001bec <__gedf2+0x80>
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	000007ff 	.word	0x000007ff

08001c54 <__ledf2>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	4657      	mov	r7, sl
 8001c58:	464e      	mov	r6, r9
 8001c5a:	4645      	mov	r5, r8
 8001c5c:	46de      	mov	lr, fp
 8001c5e:	b5e0      	push	{r5, r6, r7, lr}
 8001c60:	000d      	movs	r5, r1
 8001c62:	030f      	lsls	r7, r1, #12
 8001c64:	0004      	movs	r4, r0
 8001c66:	4680      	mov	r8, r0
 8001c68:	0fe8      	lsrs	r0, r5, #31
 8001c6a:	0b39      	lsrs	r1, r7, #12
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	b083      	sub	sp, #12
 8001c70:	0058      	lsls	r0, r3, #1
 8001c72:	4f30      	ldr	r7, [pc, #192]	@ (8001d34 <__ledf2+0xe0>)
 8001c74:	0d40      	lsrs	r0, r0, #21
 8001c76:	9101      	str	r1, [sp, #4]
 8001c78:	031e      	lsls	r6, r3, #12
 8001c7a:	0069      	lsls	r1, r5, #1
 8001c7c:	4682      	mov	sl, r0
 8001c7e:	4691      	mov	r9, r2
 8001c80:	0d49      	lsrs	r1, r1, #21
 8001c82:	0b36      	lsrs	r6, r6, #12
 8001c84:	0fd8      	lsrs	r0, r3, #31
 8001c86:	42b9      	cmp	r1, r7
 8001c88:	d020      	beq.n	8001ccc <__ledf2+0x78>
 8001c8a:	45ba      	cmp	sl, r7
 8001c8c:	d00f      	beq.n	8001cae <__ledf2+0x5a>
 8001c8e:	2900      	cmp	r1, #0
 8001c90:	d12b      	bne.n	8001cea <__ledf2+0x96>
 8001c92:	9901      	ldr	r1, [sp, #4]
 8001c94:	430c      	orrs	r4, r1
 8001c96:	4651      	mov	r1, sl
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d137      	bne.n	8001d0c <__ledf2+0xb8>
 8001c9c:	4332      	orrs	r2, r6
 8001c9e:	d038      	beq.n	8001d12 <__ledf2+0xbe>
 8001ca0:	2c00      	cmp	r4, #0
 8001ca2:	d144      	bne.n	8001d2e <__ledf2+0xda>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d119      	bne.n	8001cdc <__ledf2+0x88>
 8001ca8:	2001      	movs	r0, #1
 8001caa:	4240      	negs	r0, r0
 8001cac:	e016      	b.n	8001cdc <__ledf2+0x88>
 8001cae:	4316      	orrs	r6, r2
 8001cb0:	d113      	bne.n	8001cda <__ledf2+0x86>
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d102      	bne.n	8001cbc <__ledf2+0x68>
 8001cb6:	9f01      	ldr	r7, [sp, #4]
 8001cb8:	4327      	orrs	r7, r4
 8001cba:	d0f3      	beq.n	8001ca4 <__ledf2+0x50>
 8001cbc:	4584      	cmp	ip, r0
 8001cbe:	d020      	beq.n	8001d02 <__ledf2+0xae>
 8001cc0:	4663      	mov	r3, ip
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4018      	ands	r0, r3
 8001cc8:	3801      	subs	r0, #1
 8001cca:	e007      	b.n	8001cdc <__ledf2+0x88>
 8001ccc:	9f01      	ldr	r7, [sp, #4]
 8001cce:	4327      	orrs	r7, r4
 8001cd0:	d103      	bne.n	8001cda <__ledf2+0x86>
 8001cd2:	458a      	cmp	sl, r1
 8001cd4:	d1f4      	bne.n	8001cc0 <__ledf2+0x6c>
 8001cd6:	4316      	orrs	r6, r2
 8001cd8:	d01f      	beq.n	8001d1a <__ledf2+0xc6>
 8001cda:	2002      	movs	r0, #2
 8001cdc:	b003      	add	sp, #12
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce0:	46bb      	mov	fp, r7
 8001ce2:	46b2      	mov	sl, r6
 8001ce4:	46a9      	mov	r9, r5
 8001ce6:	46a0      	mov	r8, r4
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cea:	4654      	mov	r4, sl
 8001cec:	2c00      	cmp	r4, #0
 8001cee:	d0e7      	beq.n	8001cc0 <__ledf2+0x6c>
 8001cf0:	4584      	cmp	ip, r0
 8001cf2:	d1e5      	bne.n	8001cc0 <__ledf2+0x6c>
 8001cf4:	4551      	cmp	r1, sl
 8001cf6:	dce3      	bgt.n	8001cc0 <__ledf2+0x6c>
 8001cf8:	db03      	blt.n	8001d02 <__ledf2+0xae>
 8001cfa:	9b01      	ldr	r3, [sp, #4]
 8001cfc:	42b3      	cmp	r3, r6
 8001cfe:	d8df      	bhi.n	8001cc0 <__ledf2+0x6c>
 8001d00:	d00f      	beq.n	8001d22 <__ledf2+0xce>
 8001d02:	4663      	mov	r3, ip
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0cf      	beq.n	8001ca8 <__ledf2+0x54>
 8001d08:	4660      	mov	r0, ip
 8001d0a:	e7e7      	b.n	8001cdc <__ledf2+0x88>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d0c9      	beq.n	8001ca4 <__ledf2+0x50>
 8001d10:	e7d4      	b.n	8001cbc <__ledf2+0x68>
 8001d12:	2000      	movs	r0, #0
 8001d14:	2c00      	cmp	r4, #0
 8001d16:	d0e1      	beq.n	8001cdc <__ledf2+0x88>
 8001d18:	e7d2      	b.n	8001cc0 <__ledf2+0x6c>
 8001d1a:	4584      	cmp	ip, r0
 8001d1c:	d1d0      	bne.n	8001cc0 <__ledf2+0x6c>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e7dc      	b.n	8001cdc <__ledf2+0x88>
 8001d22:	45c8      	cmp	r8, r9
 8001d24:	d8cc      	bhi.n	8001cc0 <__ledf2+0x6c>
 8001d26:	2000      	movs	r0, #0
 8001d28:	45c8      	cmp	r8, r9
 8001d2a:	d2d7      	bcs.n	8001cdc <__ledf2+0x88>
 8001d2c:	e7e9      	b.n	8001d02 <__ledf2+0xae>
 8001d2e:	4584      	cmp	ip, r0
 8001d30:	d0e3      	beq.n	8001cfa <__ledf2+0xa6>
 8001d32:	e7c5      	b.n	8001cc0 <__ledf2+0x6c>
 8001d34:	000007ff 	.word	0x000007ff

08001d38 <__aeabi_dmul>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	4657      	mov	r7, sl
 8001d3c:	46de      	mov	lr, fp
 8001d3e:	464e      	mov	r6, r9
 8001d40:	4645      	mov	r5, r8
 8001d42:	b5e0      	push	{r5, r6, r7, lr}
 8001d44:	001f      	movs	r7, r3
 8001d46:	030b      	lsls	r3, r1, #12
 8001d48:	0b1b      	lsrs	r3, r3, #12
 8001d4a:	0016      	movs	r6, r2
 8001d4c:	469a      	mov	sl, r3
 8001d4e:	0fca      	lsrs	r2, r1, #31
 8001d50:	004b      	lsls	r3, r1, #1
 8001d52:	0004      	movs	r4, r0
 8001d54:	4693      	mov	fp, r2
 8001d56:	b087      	sub	sp, #28
 8001d58:	0d5b      	lsrs	r3, r3, #21
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dmul+0x26>
 8001d5c:	e0d5      	b.n	8001f0a <__aeabi_dmul+0x1d2>
 8001d5e:	4abb      	ldr	r2, [pc, #748]	@ (800204c <__aeabi_dmul+0x314>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dmul+0x2e>
 8001d64:	e0f8      	b.n	8001f58 <__aeabi_dmul+0x220>
 8001d66:	4651      	mov	r1, sl
 8001d68:	0f42      	lsrs	r2, r0, #29
 8001d6a:	00c9      	lsls	r1, r1, #3
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0409      	lsls	r1, r1, #16
 8001d72:	4311      	orrs	r1, r2
 8001d74:	00c2      	lsls	r2, r0, #3
 8001d76:	4691      	mov	r9, r2
 8001d78:	4ab5      	ldr	r2, [pc, #724]	@ (8002050 <__aeabi_dmul+0x318>)
 8001d7a:	468a      	mov	sl, r1
 8001d7c:	189d      	adds	r5, r3, r2
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4698      	mov	r8, r3
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	033c      	lsls	r4, r7, #12
 8001d86:	007b      	lsls	r3, r7, #1
 8001d88:	0ffa      	lsrs	r2, r7, #31
 8001d8a:	0030      	movs	r0, r6
 8001d8c:	0b24      	lsrs	r4, r4, #12
 8001d8e:	0d5b      	lsrs	r3, r3, #21
 8001d90:	9200      	str	r2, [sp, #0]
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dmul+0x5e>
 8001d94:	e096      	b.n	8001ec4 <__aeabi_dmul+0x18c>
 8001d96:	4aad      	ldr	r2, [pc, #692]	@ (800204c <__aeabi_dmul+0x314>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <__aeabi_dmul+0xc8>
 8001d9c:	0f72      	lsrs	r2, r6, #29
 8001d9e:	00e4      	lsls	r4, r4, #3
 8001da0:	4322      	orrs	r2, r4
 8001da2:	2480      	movs	r4, #128	@ 0x80
 8001da4:	0424      	lsls	r4, r4, #16
 8001da6:	4314      	orrs	r4, r2
 8001da8:	4aa9      	ldr	r2, [pc, #676]	@ (8002050 <__aeabi_dmul+0x318>)
 8001daa:	00f0      	lsls	r0, r6, #3
 8001dac:	4694      	mov	ip, r2
 8001dae:	4463      	add	r3, ip
 8001db0:	195b      	adds	r3, r3, r5
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	4642      	mov	r2, r8
 8001db8:	2600      	movs	r6, #0
 8001dba:	2a0a      	cmp	r2, #10
 8001dbc:	dc42      	bgt.n	8001e44 <__aeabi_dmul+0x10c>
 8001dbe:	465a      	mov	r2, fp
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	404a      	eors	r2, r1
 8001dc4:	4693      	mov	fp, r2
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	2a02      	cmp	r2, #2
 8001dca:	dc32      	bgt.n	8001e32 <__aeabi_dmul+0xfa>
 8001dcc:	3a01      	subs	r2, #1
 8001dce:	2a01      	cmp	r2, #1
 8001dd0:	d900      	bls.n	8001dd4 <__aeabi_dmul+0x9c>
 8001dd2:	e149      	b.n	8002068 <__aeabi_dmul+0x330>
 8001dd4:	2e02      	cmp	r6, #2
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dmul+0xa2>
 8001dd8:	e0ca      	b.n	8001f70 <__aeabi_dmul+0x238>
 8001dda:	2e01      	cmp	r6, #1
 8001ddc:	d13d      	bne.n	8001e5a <__aeabi_dmul+0x122>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2400      	movs	r4, #0
 8001de2:	2200      	movs	r2, #0
 8001de4:	0010      	movs	r0, r2
 8001de6:	465a      	mov	r2, fp
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	4323      	orrs	r3, r4
 8001dec:	07d2      	lsls	r2, r2, #31
 8001dee:	4313      	orrs	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	b007      	add	sp, #28
 8001df4:	bcf0      	pop	{r4, r5, r6, r7}
 8001df6:	46bb      	mov	fp, r7
 8001df8:	46b2      	mov	sl, r6
 8001dfa:	46a9      	mov	r9, r5
 8001dfc:	46a0      	mov	r8, r4
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e00:	4b92      	ldr	r3, [pc, #584]	@ (800204c <__aeabi_dmul+0x314>)
 8001e02:	4326      	orrs	r6, r4
 8001e04:	18eb      	adds	r3, r5, r3
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dmul+0xd4>
 8001e0a:	e0bb      	b.n	8001f84 <__aeabi_dmul+0x24c>
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4641      	mov	r1, r8
 8001e10:	4311      	orrs	r1, r2
 8001e12:	465a      	mov	r2, fp
 8001e14:	4688      	mov	r8, r1
 8001e16:	9900      	ldr	r1, [sp, #0]
 8001e18:	404a      	eors	r2, r1
 8001e1a:	2180      	movs	r1, #128	@ 0x80
 8001e1c:	0109      	lsls	r1, r1, #4
 8001e1e:	468c      	mov	ip, r1
 8001e20:	0029      	movs	r1, r5
 8001e22:	4461      	add	r1, ip
 8001e24:	9101      	str	r1, [sp, #4]
 8001e26:	4641      	mov	r1, r8
 8001e28:	290a      	cmp	r1, #10
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dmul+0xf6>
 8001e2c:	e233      	b.n	8002296 <__aeabi_dmul+0x55e>
 8001e2e:	4693      	mov	fp, r2
 8001e30:	2603      	movs	r6, #3
 8001e32:	4642      	mov	r2, r8
 8001e34:	2701      	movs	r7, #1
 8001e36:	4097      	lsls	r7, r2
 8001e38:	21a6      	movs	r1, #166	@ 0xa6
 8001e3a:	003a      	movs	r2, r7
 8001e3c:	00c9      	lsls	r1, r1, #3
 8001e3e:	400a      	ands	r2, r1
 8001e40:	420f      	tst	r7, r1
 8001e42:	d031      	beq.n	8001ea8 <__aeabi_dmul+0x170>
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	2e02      	cmp	r6, #2
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dmul+0x114>
 8001e4a:	e235      	b.n	80022b8 <__aeabi_dmul+0x580>
 8001e4c:	2e03      	cmp	r6, #3
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dmul+0x11a>
 8001e50:	e1d2      	b.n	80021f8 <__aeabi_dmul+0x4c0>
 8001e52:	4654      	mov	r4, sl
 8001e54:	4648      	mov	r0, r9
 8001e56:	2e01      	cmp	r6, #1
 8001e58:	d0c1      	beq.n	8001dde <__aeabi_dmul+0xa6>
 8001e5a:	9a01      	ldr	r2, [sp, #4]
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <__aeabi_dmul+0x31c>)
 8001e5e:	4694      	mov	ip, r2
 8001e60:	4463      	add	r3, ip
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dc00      	bgt.n	8001e68 <__aeabi_dmul+0x130>
 8001e66:	e0c0      	b.n	8001fea <__aeabi_dmul+0x2b2>
 8001e68:	0742      	lsls	r2, r0, #29
 8001e6a:	d009      	beq.n	8001e80 <__aeabi_dmul+0x148>
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	4002      	ands	r2, r0
 8001e70:	2a04      	cmp	r2, #4
 8001e72:	d005      	beq.n	8001e80 <__aeabi_dmul+0x148>
 8001e74:	1d02      	adds	r2, r0, #4
 8001e76:	4282      	cmp	r2, r0
 8001e78:	4180      	sbcs	r0, r0
 8001e7a:	4240      	negs	r0, r0
 8001e7c:	1824      	adds	r4, r4, r0
 8001e7e:	0010      	movs	r0, r2
 8001e80:	01e2      	lsls	r2, r4, #7
 8001e82:	d506      	bpl.n	8001e92 <__aeabi_dmul+0x15a>
 8001e84:	4b74      	ldr	r3, [pc, #464]	@ (8002058 <__aeabi_dmul+0x320>)
 8001e86:	9a01      	ldr	r2, [sp, #4]
 8001e88:	401c      	ands	r4, r3
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	4694      	mov	ip, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4463      	add	r3, ip
 8001e92:	4a72      	ldr	r2, [pc, #456]	@ (800205c <__aeabi_dmul+0x324>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	dc6b      	bgt.n	8001f70 <__aeabi_dmul+0x238>
 8001e98:	0762      	lsls	r2, r4, #29
 8001e9a:	08c0      	lsrs	r0, r0, #3
 8001e9c:	0264      	lsls	r4, r4, #9
 8001e9e:	055b      	lsls	r3, r3, #21
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	0b24      	lsrs	r4, r4, #12
 8001ea4:	0d5b      	lsrs	r3, r3, #21
 8001ea6:	e79d      	b.n	8001de4 <__aeabi_dmul+0xac>
 8001ea8:	2190      	movs	r1, #144	@ 0x90
 8001eaa:	0089      	lsls	r1, r1, #2
 8001eac:	420f      	tst	r7, r1
 8001eae:	d163      	bne.n	8001f78 <__aeabi_dmul+0x240>
 8001eb0:	2288      	movs	r2, #136	@ 0x88
 8001eb2:	423a      	tst	r2, r7
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_dmul+0x180>
 8001eb6:	e0d7      	b.n	8002068 <__aeabi_dmul+0x330>
 8001eb8:	9b00      	ldr	r3, [sp, #0]
 8001eba:	46a2      	mov	sl, r4
 8001ebc:	469b      	mov	fp, r3
 8001ebe:	4681      	mov	r9, r0
 8001ec0:	9602      	str	r6, [sp, #8]
 8001ec2:	e7bf      	b.n	8001e44 <__aeabi_dmul+0x10c>
 8001ec4:	0023      	movs	r3, r4
 8001ec6:	4333      	orrs	r3, r6
 8001ec8:	d100      	bne.n	8001ecc <__aeabi_dmul+0x194>
 8001eca:	e07f      	b.n	8001fcc <__aeabi_dmul+0x294>
 8001ecc:	2c00      	cmp	r4, #0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x19a>
 8001ed0:	e1ad      	b.n	800222e <__aeabi_dmul+0x4f6>
 8001ed2:	0020      	movs	r0, r4
 8001ed4:	f000 ff10 	bl	8002cf8 <__clzsi2>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	3a0b      	subs	r2, #11
 8001ede:	201d      	movs	r0, #29
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	1a82      	subs	r2, r0, r2
 8001ee4:	0030      	movs	r0, r6
 8001ee6:	3908      	subs	r1, #8
 8001ee8:	40d0      	lsrs	r0, r2
 8001eea:	408c      	lsls	r4, r1
 8001eec:	4304      	orrs	r4, r0
 8001eee:	0030      	movs	r0, r6
 8001ef0:	4088      	lsls	r0, r1
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8002060 <__aeabi_dmul+0x328>)
 8001ef4:	1aeb      	subs	r3, r5, r3
 8001ef6:	4694      	mov	ip, r2
 8001ef8:	4463      	add	r3, ip
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	4642      	mov	r2, r8
 8001f00:	2600      	movs	r6, #0
 8001f02:	2a0a      	cmp	r2, #10
 8001f04:	dc00      	bgt.n	8001f08 <__aeabi_dmul+0x1d0>
 8001f06:	e75a      	b.n	8001dbe <__aeabi_dmul+0x86>
 8001f08:	e79c      	b.n	8001e44 <__aeabi_dmul+0x10c>
 8001f0a:	4653      	mov	r3, sl
 8001f0c:	4303      	orrs	r3, r0
 8001f0e:	4699      	mov	r9, r3
 8001f10:	d054      	beq.n	8001fbc <__aeabi_dmul+0x284>
 8001f12:	4653      	mov	r3, sl
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dmul+0x1e2>
 8001f18:	e177      	b.n	800220a <__aeabi_dmul+0x4d2>
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	f000 feec 	bl	8002cf8 <__clzsi2>
 8001f20:	230b      	movs	r3, #11
 8001f22:	425b      	negs	r3, r3
 8001f24:	469c      	mov	ip, r3
 8001f26:	0002      	movs	r2, r0
 8001f28:	4484      	add	ip, r0
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	4650      	mov	r0, sl
 8001f2e:	3908      	subs	r1, #8
 8001f30:	4088      	lsls	r0, r1
 8001f32:	231d      	movs	r3, #29
 8001f34:	4680      	mov	r8, r0
 8001f36:	4660      	mov	r0, ip
 8001f38:	1a1b      	subs	r3, r3, r0
 8001f3a:	0020      	movs	r0, r4
 8001f3c:	40d8      	lsrs	r0, r3
 8001f3e:	0003      	movs	r3, r0
 8001f40:	4640      	mov	r0, r8
 8001f42:	4303      	orrs	r3, r0
 8001f44:	469a      	mov	sl, r3
 8001f46:	0023      	movs	r3, r4
 8001f48:	408b      	lsls	r3, r1
 8001f4a:	4699      	mov	r9, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	4d44      	ldr	r5, [pc, #272]	@ (8002060 <__aeabi_dmul+0x328>)
 8001f50:	4698      	mov	r8, r3
 8001f52:	1aad      	subs	r5, r5, r2
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	e715      	b.n	8001d84 <__aeabi_dmul+0x4c>
 8001f58:	4652      	mov	r2, sl
 8001f5a:	4302      	orrs	r2, r0
 8001f5c:	4691      	mov	r9, r2
 8001f5e:	d126      	bne.n	8001fae <__aeabi_dmul+0x276>
 8001f60:	2200      	movs	r2, #0
 8001f62:	001d      	movs	r5, r3
 8001f64:	2302      	movs	r3, #2
 8001f66:	4692      	mov	sl, r2
 8001f68:	3208      	adds	r2, #8
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	9302      	str	r3, [sp, #8]
 8001f6e:	e709      	b.n	8001d84 <__aeabi_dmul+0x4c>
 8001f70:	2400      	movs	r4, #0
 8001f72:	2200      	movs	r2, #0
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <__aeabi_dmul+0x314>)
 8001f76:	e735      	b.n	8001de4 <__aeabi_dmul+0xac>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2480      	movs	r4, #128	@ 0x80
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <__aeabi_dmul+0x314>)
 8001f82:	e72f      	b.n	8001de4 <__aeabi_dmul+0xac>
 8001f84:	2202      	movs	r2, #2
 8001f86:	4641      	mov	r1, r8
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	4694      	mov	ip, r2
 8001f90:	002a      	movs	r2, r5
 8001f92:	4462      	add	r2, ip
 8001f94:	4688      	mov	r8, r1
 8001f96:	9201      	str	r2, [sp, #4]
 8001f98:	290a      	cmp	r1, #10
 8001f9a:	dd00      	ble.n	8001f9e <__aeabi_dmul+0x266>
 8001f9c:	e752      	b.n	8001e44 <__aeabi_dmul+0x10c>
 8001f9e:	465a      	mov	r2, fp
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	9900      	ldr	r1, [sp, #0]
 8001fa4:	0004      	movs	r4, r0
 8001fa6:	404a      	eors	r2, r1
 8001fa8:	4693      	mov	fp, r2
 8001faa:	2602      	movs	r6, #2
 8001fac:	e70b      	b.n	8001dc6 <__aeabi_dmul+0x8e>
 8001fae:	220c      	movs	r2, #12
 8001fb0:	001d      	movs	r5, r3
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	4681      	mov	r9, r0
 8001fb6:	4690      	mov	r8, r2
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	e6e3      	b.n	8001d84 <__aeabi_dmul+0x4c>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	469a      	mov	sl, r3
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	e6db      	b.n	8001d84 <__aeabi_dmul+0x4c>
 8001fcc:	4642      	mov	r2, r8
 8001fce:	3301      	adds	r3, #1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	002b      	movs	r3, r5
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	9201      	str	r2, [sp, #4]
 8001fda:	4642      	mov	r2, r8
 8001fdc:	2400      	movs	r4, #0
 8001fde:	2000      	movs	r0, #0
 8001fe0:	2601      	movs	r6, #1
 8001fe2:	2a0a      	cmp	r2, #10
 8001fe4:	dc00      	bgt.n	8001fe8 <__aeabi_dmul+0x2b0>
 8001fe6:	e6ea      	b.n	8001dbe <__aeabi_dmul+0x86>
 8001fe8:	e72c      	b.n	8001e44 <__aeabi_dmul+0x10c>
 8001fea:	2201      	movs	r2, #1
 8001fec:	1ad2      	subs	r2, r2, r3
 8001fee:	2a38      	cmp	r2, #56	@ 0x38
 8001ff0:	dd00      	ble.n	8001ff4 <__aeabi_dmul+0x2bc>
 8001ff2:	e6f4      	b.n	8001dde <__aeabi_dmul+0xa6>
 8001ff4:	2a1f      	cmp	r2, #31
 8001ff6:	dc00      	bgt.n	8001ffa <__aeabi_dmul+0x2c2>
 8001ff8:	e12a      	b.n	8002250 <__aeabi_dmul+0x518>
 8001ffa:	211f      	movs	r1, #31
 8001ffc:	4249      	negs	r1, r1
 8001ffe:	1acb      	subs	r3, r1, r3
 8002000:	0021      	movs	r1, r4
 8002002:	40d9      	lsrs	r1, r3
 8002004:	000b      	movs	r3, r1
 8002006:	2a20      	cmp	r2, #32
 8002008:	d005      	beq.n	8002016 <__aeabi_dmul+0x2de>
 800200a:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <__aeabi_dmul+0x32c>)
 800200c:	9d01      	ldr	r5, [sp, #4]
 800200e:	4694      	mov	ip, r2
 8002010:	4465      	add	r5, ip
 8002012:	40ac      	lsls	r4, r5
 8002014:	4320      	orrs	r0, r4
 8002016:	1e42      	subs	r2, r0, #1
 8002018:	4190      	sbcs	r0, r2
 800201a:	4318      	orrs	r0, r3
 800201c:	2307      	movs	r3, #7
 800201e:	0019      	movs	r1, r3
 8002020:	2400      	movs	r4, #0
 8002022:	4001      	ands	r1, r0
 8002024:	4203      	tst	r3, r0
 8002026:	d00c      	beq.n	8002042 <__aeabi_dmul+0x30a>
 8002028:	230f      	movs	r3, #15
 800202a:	4003      	ands	r3, r0
 800202c:	2b04      	cmp	r3, #4
 800202e:	d100      	bne.n	8002032 <__aeabi_dmul+0x2fa>
 8002030:	e140      	b.n	80022b4 <__aeabi_dmul+0x57c>
 8002032:	1d03      	adds	r3, r0, #4
 8002034:	4283      	cmp	r3, r0
 8002036:	41a4      	sbcs	r4, r4
 8002038:	0018      	movs	r0, r3
 800203a:	4264      	negs	r4, r4
 800203c:	0761      	lsls	r1, r4, #29
 800203e:	0264      	lsls	r4, r4, #9
 8002040:	0b24      	lsrs	r4, r4, #12
 8002042:	08c2      	lsrs	r2, r0, #3
 8002044:	2300      	movs	r3, #0
 8002046:	430a      	orrs	r2, r1
 8002048:	e6cc      	b.n	8001de4 <__aeabi_dmul+0xac>
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	fffffc01 	.word	0xfffffc01
 8002054:	000003ff 	.word	0x000003ff
 8002058:	feffffff 	.word	0xfeffffff
 800205c:	000007fe 	.word	0x000007fe
 8002060:	fffffc0d 	.word	0xfffffc0d
 8002064:	0000043e 	.word	0x0000043e
 8002068:	4649      	mov	r1, r9
 800206a:	464a      	mov	r2, r9
 800206c:	0409      	lsls	r1, r1, #16
 800206e:	0c09      	lsrs	r1, r1, #16
 8002070:	000d      	movs	r5, r1
 8002072:	0c16      	lsrs	r6, r2, #16
 8002074:	0c02      	lsrs	r2, r0, #16
 8002076:	0400      	lsls	r0, r0, #16
 8002078:	0c00      	lsrs	r0, r0, #16
 800207a:	4345      	muls	r5, r0
 800207c:	46ac      	mov	ip, r5
 800207e:	0005      	movs	r5, r0
 8002080:	4375      	muls	r5, r6
 8002082:	46a8      	mov	r8, r5
 8002084:	0015      	movs	r5, r2
 8002086:	000f      	movs	r7, r1
 8002088:	4375      	muls	r5, r6
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	9502      	str	r5, [sp, #8]
 800208e:	002a      	movs	r2, r5
 8002090:	9d00      	ldr	r5, [sp, #0]
 8002092:	436f      	muls	r7, r5
 8002094:	4665      	mov	r5, ip
 8002096:	0c2d      	lsrs	r5, r5, #16
 8002098:	46a9      	mov	r9, r5
 800209a:	4447      	add	r7, r8
 800209c:	444f      	add	r7, r9
 800209e:	45b8      	cmp	r8, r7
 80020a0:	d905      	bls.n	80020ae <__aeabi_dmul+0x376>
 80020a2:	0015      	movs	r5, r2
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	0252      	lsls	r2, r2, #9
 80020a8:	4690      	mov	r8, r2
 80020aa:	4445      	add	r5, r8
 80020ac:	9502      	str	r5, [sp, #8]
 80020ae:	0c3d      	lsrs	r5, r7, #16
 80020b0:	9503      	str	r5, [sp, #12]
 80020b2:	4665      	mov	r5, ip
 80020b4:	042d      	lsls	r5, r5, #16
 80020b6:	043f      	lsls	r7, r7, #16
 80020b8:	0c2d      	lsrs	r5, r5, #16
 80020ba:	46ac      	mov	ip, r5
 80020bc:	003d      	movs	r5, r7
 80020be:	4465      	add	r5, ip
 80020c0:	9504      	str	r5, [sp, #16]
 80020c2:	0c25      	lsrs	r5, r4, #16
 80020c4:	0424      	lsls	r4, r4, #16
 80020c6:	0c24      	lsrs	r4, r4, #16
 80020c8:	46ac      	mov	ip, r5
 80020ca:	0025      	movs	r5, r4
 80020cc:	4375      	muls	r5, r6
 80020ce:	46a8      	mov	r8, r5
 80020d0:	4665      	mov	r5, ip
 80020d2:	000f      	movs	r7, r1
 80020d4:	4369      	muls	r1, r5
 80020d6:	4441      	add	r1, r8
 80020d8:	4689      	mov	r9, r1
 80020da:	4367      	muls	r7, r4
 80020dc:	0c39      	lsrs	r1, r7, #16
 80020de:	4449      	add	r1, r9
 80020e0:	436e      	muls	r6, r5
 80020e2:	4588      	cmp	r8, r1
 80020e4:	d903      	bls.n	80020ee <__aeabi_dmul+0x3b6>
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	0252      	lsls	r2, r2, #9
 80020ea:	4690      	mov	r8, r2
 80020ec:	4446      	add	r6, r8
 80020ee:	0c0d      	lsrs	r5, r1, #16
 80020f0:	46a8      	mov	r8, r5
 80020f2:	0035      	movs	r5, r6
 80020f4:	4445      	add	r5, r8
 80020f6:	9505      	str	r5, [sp, #20]
 80020f8:	9d03      	ldr	r5, [sp, #12]
 80020fa:	043f      	lsls	r7, r7, #16
 80020fc:	46a8      	mov	r8, r5
 80020fe:	0c3f      	lsrs	r7, r7, #16
 8002100:	0409      	lsls	r1, r1, #16
 8002102:	19c9      	adds	r1, r1, r7
 8002104:	4488      	add	r8, r1
 8002106:	4645      	mov	r5, r8
 8002108:	9503      	str	r5, [sp, #12]
 800210a:	4655      	mov	r5, sl
 800210c:	042e      	lsls	r6, r5, #16
 800210e:	0c36      	lsrs	r6, r6, #16
 8002110:	0c2f      	lsrs	r7, r5, #16
 8002112:	0035      	movs	r5, r6
 8002114:	4345      	muls	r5, r0
 8002116:	4378      	muls	r0, r7
 8002118:	4681      	mov	r9, r0
 800211a:	0038      	movs	r0, r7
 800211c:	46a8      	mov	r8, r5
 800211e:	0c2d      	lsrs	r5, r5, #16
 8002120:	46aa      	mov	sl, r5
 8002122:	9a00      	ldr	r2, [sp, #0]
 8002124:	4350      	muls	r0, r2
 8002126:	4372      	muls	r2, r6
 8002128:	444a      	add	r2, r9
 800212a:	4452      	add	r2, sl
 800212c:	4591      	cmp	r9, r2
 800212e:	d903      	bls.n	8002138 <__aeabi_dmul+0x400>
 8002130:	2580      	movs	r5, #128	@ 0x80
 8002132:	026d      	lsls	r5, r5, #9
 8002134:	46a9      	mov	r9, r5
 8002136:	4448      	add	r0, r9
 8002138:	0c15      	lsrs	r5, r2, #16
 800213a:	46a9      	mov	r9, r5
 800213c:	4645      	mov	r5, r8
 800213e:	042d      	lsls	r5, r5, #16
 8002140:	0c2d      	lsrs	r5, r5, #16
 8002142:	46a8      	mov	r8, r5
 8002144:	4665      	mov	r5, ip
 8002146:	437d      	muls	r5, r7
 8002148:	0412      	lsls	r2, r2, #16
 800214a:	4448      	add	r0, r9
 800214c:	4490      	add	r8, r2
 800214e:	46a9      	mov	r9, r5
 8002150:	0032      	movs	r2, r6
 8002152:	4665      	mov	r5, ip
 8002154:	4362      	muls	r2, r4
 8002156:	436e      	muls	r6, r5
 8002158:	437c      	muls	r4, r7
 800215a:	0c17      	lsrs	r7, r2, #16
 800215c:	1936      	adds	r6, r6, r4
 800215e:	19bf      	adds	r7, r7, r6
 8002160:	42bc      	cmp	r4, r7
 8002162:	d903      	bls.n	800216c <__aeabi_dmul+0x434>
 8002164:	2480      	movs	r4, #128	@ 0x80
 8002166:	0264      	lsls	r4, r4, #9
 8002168:	46a4      	mov	ip, r4
 800216a:	44e1      	add	r9, ip
 800216c:	9c02      	ldr	r4, [sp, #8]
 800216e:	9e03      	ldr	r6, [sp, #12]
 8002170:	46a4      	mov	ip, r4
 8002172:	9d05      	ldr	r5, [sp, #20]
 8002174:	4466      	add	r6, ip
 8002176:	428e      	cmp	r6, r1
 8002178:	4189      	sbcs	r1, r1
 800217a:	46ac      	mov	ip, r5
 800217c:	0412      	lsls	r2, r2, #16
 800217e:	043c      	lsls	r4, r7, #16
 8002180:	0c12      	lsrs	r2, r2, #16
 8002182:	18a2      	adds	r2, r4, r2
 8002184:	4462      	add	r2, ip
 8002186:	4249      	negs	r1, r1
 8002188:	1854      	adds	r4, r2, r1
 800218a:	4446      	add	r6, r8
 800218c:	46a4      	mov	ip, r4
 800218e:	4546      	cmp	r6, r8
 8002190:	41a4      	sbcs	r4, r4
 8002192:	4682      	mov	sl, r0
 8002194:	4264      	negs	r4, r4
 8002196:	46a0      	mov	r8, r4
 8002198:	42aa      	cmp	r2, r5
 800219a:	4192      	sbcs	r2, r2
 800219c:	458c      	cmp	ip, r1
 800219e:	4189      	sbcs	r1, r1
 80021a0:	44e2      	add	sl, ip
 80021a2:	44d0      	add	r8, sl
 80021a4:	4249      	negs	r1, r1
 80021a6:	4252      	negs	r2, r2
 80021a8:	430a      	orrs	r2, r1
 80021aa:	45a0      	cmp	r8, r4
 80021ac:	41a4      	sbcs	r4, r4
 80021ae:	4582      	cmp	sl, r0
 80021b0:	4189      	sbcs	r1, r1
 80021b2:	4264      	negs	r4, r4
 80021b4:	4249      	negs	r1, r1
 80021b6:	430c      	orrs	r4, r1
 80021b8:	4641      	mov	r1, r8
 80021ba:	0c3f      	lsrs	r7, r7, #16
 80021bc:	19d2      	adds	r2, r2, r7
 80021be:	1912      	adds	r2, r2, r4
 80021c0:	0dcc      	lsrs	r4, r1, #23
 80021c2:	9904      	ldr	r1, [sp, #16]
 80021c4:	0270      	lsls	r0, r6, #9
 80021c6:	4308      	orrs	r0, r1
 80021c8:	1e41      	subs	r1, r0, #1
 80021ca:	4188      	sbcs	r0, r1
 80021cc:	4641      	mov	r1, r8
 80021ce:	444a      	add	r2, r9
 80021d0:	0df6      	lsrs	r6, r6, #23
 80021d2:	0252      	lsls	r2, r2, #9
 80021d4:	4330      	orrs	r0, r6
 80021d6:	0249      	lsls	r1, r1, #9
 80021d8:	4314      	orrs	r4, r2
 80021da:	4308      	orrs	r0, r1
 80021dc:	01d2      	lsls	r2, r2, #7
 80021de:	d535      	bpl.n	800224c <__aeabi_dmul+0x514>
 80021e0:	2201      	movs	r2, #1
 80021e2:	0843      	lsrs	r3, r0, #1
 80021e4:	4002      	ands	r2, r0
 80021e6:	4313      	orrs	r3, r2
 80021e8:	07e0      	lsls	r0, r4, #31
 80021ea:	4318      	orrs	r0, r3
 80021ec:	0864      	lsrs	r4, r4, #1
 80021ee:	e634      	b.n	8001e5a <__aeabi_dmul+0x122>
 80021f0:	9b00      	ldr	r3, [sp, #0]
 80021f2:	46a2      	mov	sl, r4
 80021f4:	469b      	mov	fp, r3
 80021f6:	4681      	mov	r9, r0
 80021f8:	2480      	movs	r4, #128	@ 0x80
 80021fa:	4653      	mov	r3, sl
 80021fc:	0324      	lsls	r4, r4, #12
 80021fe:	431c      	orrs	r4, r3
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	464a      	mov	r2, r9
 8002204:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <__aeabi_dmul+0x588>)
 8002206:	0b24      	lsrs	r4, r4, #12
 8002208:	e5ec      	b.n	8001de4 <__aeabi_dmul+0xac>
 800220a:	f000 fd75 	bl	8002cf8 <__clzsi2>
 800220e:	2315      	movs	r3, #21
 8002210:	469c      	mov	ip, r3
 8002212:	4484      	add	ip, r0
 8002214:	0002      	movs	r2, r0
 8002216:	4663      	mov	r3, ip
 8002218:	3220      	adds	r2, #32
 800221a:	2b1c      	cmp	r3, #28
 800221c:	dc00      	bgt.n	8002220 <__aeabi_dmul+0x4e8>
 800221e:	e684      	b.n	8001f2a <__aeabi_dmul+0x1f2>
 8002220:	2300      	movs	r3, #0
 8002222:	4699      	mov	r9, r3
 8002224:	0023      	movs	r3, r4
 8002226:	3808      	subs	r0, #8
 8002228:	4083      	lsls	r3, r0
 800222a:	469a      	mov	sl, r3
 800222c:	e68e      	b.n	8001f4c <__aeabi_dmul+0x214>
 800222e:	f000 fd63 	bl	8002cf8 <__clzsi2>
 8002232:	0002      	movs	r2, r0
 8002234:	0003      	movs	r3, r0
 8002236:	3215      	adds	r2, #21
 8002238:	3320      	adds	r3, #32
 800223a:	2a1c      	cmp	r2, #28
 800223c:	dc00      	bgt.n	8002240 <__aeabi_dmul+0x508>
 800223e:	e64e      	b.n	8001ede <__aeabi_dmul+0x1a6>
 8002240:	0002      	movs	r2, r0
 8002242:	0034      	movs	r4, r6
 8002244:	3a08      	subs	r2, #8
 8002246:	2000      	movs	r0, #0
 8002248:	4094      	lsls	r4, r2
 800224a:	e652      	b.n	8001ef2 <__aeabi_dmul+0x1ba>
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	e604      	b.n	8001e5a <__aeabi_dmul+0x122>
 8002250:	4b1c      	ldr	r3, [pc, #112]	@ (80022c4 <__aeabi_dmul+0x58c>)
 8002252:	0021      	movs	r1, r4
 8002254:	469c      	mov	ip, r3
 8002256:	0003      	movs	r3, r0
 8002258:	9d01      	ldr	r5, [sp, #4]
 800225a:	40d3      	lsrs	r3, r2
 800225c:	4465      	add	r5, ip
 800225e:	40a9      	lsls	r1, r5
 8002260:	4319      	orrs	r1, r3
 8002262:	0003      	movs	r3, r0
 8002264:	40ab      	lsls	r3, r5
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	4183      	sbcs	r3, r0
 800226a:	4319      	orrs	r1, r3
 800226c:	0008      	movs	r0, r1
 800226e:	40d4      	lsrs	r4, r2
 8002270:	074b      	lsls	r3, r1, #29
 8002272:	d009      	beq.n	8002288 <__aeabi_dmul+0x550>
 8002274:	230f      	movs	r3, #15
 8002276:	400b      	ands	r3, r1
 8002278:	2b04      	cmp	r3, #4
 800227a:	d005      	beq.n	8002288 <__aeabi_dmul+0x550>
 800227c:	1d0b      	adds	r3, r1, #4
 800227e:	428b      	cmp	r3, r1
 8002280:	4180      	sbcs	r0, r0
 8002282:	4240      	negs	r0, r0
 8002284:	1824      	adds	r4, r4, r0
 8002286:	0018      	movs	r0, r3
 8002288:	0223      	lsls	r3, r4, #8
 800228a:	d400      	bmi.n	800228e <__aeabi_dmul+0x556>
 800228c:	e6d6      	b.n	800203c <__aeabi_dmul+0x304>
 800228e:	2301      	movs	r3, #1
 8002290:	2400      	movs	r4, #0
 8002292:	2200      	movs	r2, #0
 8002294:	e5a6      	b.n	8001de4 <__aeabi_dmul+0xac>
 8002296:	290f      	cmp	r1, #15
 8002298:	d1aa      	bne.n	80021f0 <__aeabi_dmul+0x4b8>
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	4652      	mov	r2, sl
 800229e:	031b      	lsls	r3, r3, #12
 80022a0:	421a      	tst	r2, r3
 80022a2:	d0a9      	beq.n	80021f8 <__aeabi_dmul+0x4c0>
 80022a4:	421c      	tst	r4, r3
 80022a6:	d1a7      	bne.n	80021f8 <__aeabi_dmul+0x4c0>
 80022a8:	431c      	orrs	r4, r3
 80022aa:	9b00      	ldr	r3, [sp, #0]
 80022ac:	0002      	movs	r2, r0
 80022ae:	469b      	mov	fp, r3
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <__aeabi_dmul+0x588>)
 80022b2:	e597      	b.n	8001de4 <__aeabi_dmul+0xac>
 80022b4:	2400      	movs	r4, #0
 80022b6:	e6c1      	b.n	800203c <__aeabi_dmul+0x304>
 80022b8:	2400      	movs	r4, #0
 80022ba:	4b01      	ldr	r3, [pc, #4]	@ (80022c0 <__aeabi_dmul+0x588>)
 80022bc:	0022      	movs	r2, r4
 80022be:	e591      	b.n	8001de4 <__aeabi_dmul+0xac>
 80022c0:	000007ff 	.word	0x000007ff
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__aeabi_dsub>:
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	464e      	mov	r6, r9
 80022cc:	4645      	mov	r5, r8
 80022ce:	46de      	mov	lr, fp
 80022d0:	4657      	mov	r7, sl
 80022d2:	b5e0      	push	{r5, r6, r7, lr}
 80022d4:	b085      	sub	sp, #20
 80022d6:	9000      	str	r0, [sp, #0]
 80022d8:	9101      	str	r1, [sp, #4]
 80022da:	030c      	lsls	r4, r1, #12
 80022dc:	004f      	lsls	r7, r1, #1
 80022de:	0fce      	lsrs	r6, r1, #31
 80022e0:	0a61      	lsrs	r1, r4, #9
 80022e2:	9c00      	ldr	r4, [sp, #0]
 80022e4:	46b0      	mov	r8, r6
 80022e6:	0f64      	lsrs	r4, r4, #29
 80022e8:	430c      	orrs	r4, r1
 80022ea:	9900      	ldr	r1, [sp, #0]
 80022ec:	0d7f      	lsrs	r7, r7, #21
 80022ee:	00c8      	lsls	r0, r1, #3
 80022f0:	0011      	movs	r1, r2
 80022f2:	001a      	movs	r2, r3
 80022f4:	031b      	lsls	r3, r3, #12
 80022f6:	469c      	mov	ip, r3
 80022f8:	9100      	str	r1, [sp, #0]
 80022fa:	9201      	str	r2, [sp, #4]
 80022fc:	0051      	lsls	r1, r2, #1
 80022fe:	0d4b      	lsrs	r3, r1, #21
 8002300:	4699      	mov	r9, r3
 8002302:	9b01      	ldr	r3, [sp, #4]
 8002304:	9d00      	ldr	r5, [sp, #0]
 8002306:	0fd9      	lsrs	r1, r3, #31
 8002308:	4663      	mov	r3, ip
 800230a:	0f6a      	lsrs	r2, r5, #29
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	4313      	orrs	r3, r2
 8002310:	00ea      	lsls	r2, r5, #3
 8002312:	4694      	mov	ip, r2
 8002314:	4693      	mov	fp, r2
 8002316:	4ac1      	ldr	r2, [pc, #772]	@ (800261c <__aeabi_dsub+0x354>)
 8002318:	9003      	str	r0, [sp, #12]
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	4591      	cmp	r9, r2
 800231e:	d100      	bne.n	8002322 <__aeabi_dsub+0x5a>
 8002320:	e0cd      	b.n	80024be <__aeabi_dsub+0x1f6>
 8002322:	2501      	movs	r5, #1
 8002324:	4069      	eors	r1, r5
 8002326:	464d      	mov	r5, r9
 8002328:	1b7d      	subs	r5, r7, r5
 800232a:	46aa      	mov	sl, r5
 800232c:	428e      	cmp	r6, r1
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x6a>
 8002330:	e080      	b.n	8002434 <__aeabi_dsub+0x16c>
 8002332:	2d00      	cmp	r5, #0
 8002334:	dc00      	bgt.n	8002338 <__aeabi_dsub+0x70>
 8002336:	e335      	b.n	80029a4 <__aeabi_dsub+0x6dc>
 8002338:	4649      	mov	r1, r9
 800233a:	2900      	cmp	r1, #0
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x78>
 800233e:	e0df      	b.n	8002500 <__aeabi_dsub+0x238>
 8002340:	4297      	cmp	r7, r2
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0x7e>
 8002344:	e194      	b.n	8002670 <__aeabi_dsub+0x3a8>
 8002346:	4652      	mov	r2, sl
 8002348:	2501      	movs	r5, #1
 800234a:	2a38      	cmp	r2, #56	@ 0x38
 800234c:	dc19      	bgt.n	8002382 <__aeabi_dsub+0xba>
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	9b02      	ldr	r3, [sp, #8]
 8002352:	0412      	lsls	r2, r2, #16
 8002354:	4313      	orrs	r3, r2
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	4652      	mov	r2, sl
 800235a:	2a1f      	cmp	r2, #31
 800235c:	dd00      	ble.n	8002360 <__aeabi_dsub+0x98>
 800235e:	e1e3      	b.n	8002728 <__aeabi_dsub+0x460>
 8002360:	4653      	mov	r3, sl
 8002362:	2220      	movs	r2, #32
 8002364:	4661      	mov	r1, ip
 8002366:	9d02      	ldr	r5, [sp, #8]
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	4095      	lsls	r5, r2
 800236c:	40d9      	lsrs	r1, r3
 800236e:	430d      	orrs	r5, r1
 8002370:	4661      	mov	r1, ip
 8002372:	4091      	lsls	r1, r2
 8002374:	000a      	movs	r2, r1
 8002376:	1e51      	subs	r1, r2, #1
 8002378:	418a      	sbcs	r2, r1
 800237a:	4315      	orrs	r5, r2
 800237c:	9a02      	ldr	r2, [sp, #8]
 800237e:	40da      	lsrs	r2, r3
 8002380:	1aa4      	subs	r4, r4, r2
 8002382:	1b45      	subs	r5, r0, r5
 8002384:	42a8      	cmp	r0, r5
 8002386:	4180      	sbcs	r0, r0
 8002388:	4240      	negs	r0, r0
 800238a:	1a24      	subs	r4, r4, r0
 800238c:	0223      	lsls	r3, r4, #8
 800238e:	d400      	bmi.n	8002392 <__aeabi_dsub+0xca>
 8002390:	e13d      	b.n	800260e <__aeabi_dsub+0x346>
 8002392:	0264      	lsls	r4, r4, #9
 8002394:	0a64      	lsrs	r4, r4, #9
 8002396:	2c00      	cmp	r4, #0
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0xd4>
 800239a:	e147      	b.n	800262c <__aeabi_dsub+0x364>
 800239c:	0020      	movs	r0, r4
 800239e:	f000 fcab 	bl	8002cf8 <__clzsi2>
 80023a2:	0003      	movs	r3, r0
 80023a4:	3b08      	subs	r3, #8
 80023a6:	2120      	movs	r1, #32
 80023a8:	0028      	movs	r0, r5
 80023aa:	1aca      	subs	r2, r1, r3
 80023ac:	40d0      	lsrs	r0, r2
 80023ae:	409c      	lsls	r4, r3
 80023b0:	0002      	movs	r2, r0
 80023b2:	409d      	lsls	r5, r3
 80023b4:	4322      	orrs	r2, r4
 80023b6:	429f      	cmp	r7, r3
 80023b8:	dd00      	ble.n	80023bc <__aeabi_dsub+0xf4>
 80023ba:	e177      	b.n	80026ac <__aeabi_dsub+0x3e4>
 80023bc:	1bd8      	subs	r0, r3, r7
 80023be:	3001      	adds	r0, #1
 80023c0:	1a09      	subs	r1, r1, r0
 80023c2:	002c      	movs	r4, r5
 80023c4:	408d      	lsls	r5, r1
 80023c6:	40c4      	lsrs	r4, r0
 80023c8:	1e6b      	subs	r3, r5, #1
 80023ca:	419d      	sbcs	r5, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	40c2      	lsrs	r2, r0
 80023d0:	408b      	lsls	r3, r1
 80023d2:	4325      	orrs	r5, r4
 80023d4:	2700      	movs	r7, #0
 80023d6:	0014      	movs	r4, r2
 80023d8:	431d      	orrs	r5, r3
 80023da:	076b      	lsls	r3, r5, #29
 80023dc:	d009      	beq.n	80023f2 <__aeabi_dsub+0x12a>
 80023de:	230f      	movs	r3, #15
 80023e0:	402b      	ands	r3, r5
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d005      	beq.n	80023f2 <__aeabi_dsub+0x12a>
 80023e6:	1d2b      	adds	r3, r5, #4
 80023e8:	42ab      	cmp	r3, r5
 80023ea:	41ad      	sbcs	r5, r5
 80023ec:	426d      	negs	r5, r5
 80023ee:	1964      	adds	r4, r4, r5
 80023f0:	001d      	movs	r5, r3
 80023f2:	0223      	lsls	r3, r4, #8
 80023f4:	d400      	bmi.n	80023f8 <__aeabi_dsub+0x130>
 80023f6:	e140      	b.n	800267a <__aeabi_dsub+0x3b2>
 80023f8:	4a88      	ldr	r2, [pc, #544]	@ (800261c <__aeabi_dsub+0x354>)
 80023fa:	3701      	adds	r7, #1
 80023fc:	4297      	cmp	r7, r2
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x13a>
 8002400:	e101      	b.n	8002606 <__aeabi_dsub+0x33e>
 8002402:	2601      	movs	r6, #1
 8002404:	4643      	mov	r3, r8
 8002406:	4986      	ldr	r1, [pc, #536]	@ (8002620 <__aeabi_dsub+0x358>)
 8002408:	08ed      	lsrs	r5, r5, #3
 800240a:	4021      	ands	r1, r4
 800240c:	074a      	lsls	r2, r1, #29
 800240e:	432a      	orrs	r2, r5
 8002410:	057c      	lsls	r4, r7, #21
 8002412:	024d      	lsls	r5, r1, #9
 8002414:	0b2d      	lsrs	r5, r5, #12
 8002416:	0d64      	lsrs	r4, r4, #21
 8002418:	401e      	ands	r6, r3
 800241a:	0524      	lsls	r4, r4, #20
 800241c:	432c      	orrs	r4, r5
 800241e:	07f6      	lsls	r6, r6, #31
 8002420:	4334      	orrs	r4, r6
 8002422:	0010      	movs	r0, r2
 8002424:	0021      	movs	r1, r4
 8002426:	b005      	add	sp, #20
 8002428:	bcf0      	pop	{r4, r5, r6, r7}
 800242a:	46bb      	mov	fp, r7
 800242c:	46b2      	mov	sl, r6
 800242e:	46a9      	mov	r9, r5
 8002430:	46a0      	mov	r8, r4
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002434:	2d00      	cmp	r5, #0
 8002436:	dc00      	bgt.n	800243a <__aeabi_dsub+0x172>
 8002438:	e2d0      	b.n	80029dc <__aeabi_dsub+0x714>
 800243a:	4649      	mov	r1, r9
 800243c:	2900      	cmp	r1, #0
 800243e:	d000      	beq.n	8002442 <__aeabi_dsub+0x17a>
 8002440:	e0d4      	b.n	80025ec <__aeabi_dsub+0x324>
 8002442:	4661      	mov	r1, ip
 8002444:	9b02      	ldr	r3, [sp, #8]
 8002446:	4319      	orrs	r1, r3
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x184>
 800244a:	e12b      	b.n	80026a4 <__aeabi_dsub+0x3dc>
 800244c:	1e69      	subs	r1, r5, #1
 800244e:	2d01      	cmp	r5, #1
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x18c>
 8002452:	e1d9      	b.n	8002808 <__aeabi_dsub+0x540>
 8002454:	4295      	cmp	r5, r2
 8002456:	d100      	bne.n	800245a <__aeabi_dsub+0x192>
 8002458:	e10a      	b.n	8002670 <__aeabi_dsub+0x3a8>
 800245a:	2501      	movs	r5, #1
 800245c:	2938      	cmp	r1, #56	@ 0x38
 800245e:	dc17      	bgt.n	8002490 <__aeabi_dsub+0x1c8>
 8002460:	468a      	mov	sl, r1
 8002462:	4653      	mov	r3, sl
 8002464:	2b1f      	cmp	r3, #31
 8002466:	dd00      	ble.n	800246a <__aeabi_dsub+0x1a2>
 8002468:	e1e7      	b.n	800283a <__aeabi_dsub+0x572>
 800246a:	2220      	movs	r2, #32
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	9b02      	ldr	r3, [sp, #8]
 8002470:	4661      	mov	r1, ip
 8002472:	4093      	lsls	r3, r2
 8002474:	001d      	movs	r5, r3
 8002476:	4653      	mov	r3, sl
 8002478:	40d9      	lsrs	r1, r3
 800247a:	4663      	mov	r3, ip
 800247c:	4093      	lsls	r3, r2
 800247e:	001a      	movs	r2, r3
 8002480:	430d      	orrs	r5, r1
 8002482:	1e51      	subs	r1, r2, #1
 8002484:	418a      	sbcs	r2, r1
 8002486:	4653      	mov	r3, sl
 8002488:	4315      	orrs	r5, r2
 800248a:	9a02      	ldr	r2, [sp, #8]
 800248c:	40da      	lsrs	r2, r3
 800248e:	18a4      	adds	r4, r4, r2
 8002490:	182d      	adds	r5, r5, r0
 8002492:	4285      	cmp	r5, r0
 8002494:	4180      	sbcs	r0, r0
 8002496:	4240      	negs	r0, r0
 8002498:	1824      	adds	r4, r4, r0
 800249a:	0223      	lsls	r3, r4, #8
 800249c:	d400      	bmi.n	80024a0 <__aeabi_dsub+0x1d8>
 800249e:	e0b6      	b.n	800260e <__aeabi_dsub+0x346>
 80024a0:	4b5e      	ldr	r3, [pc, #376]	@ (800261c <__aeabi_dsub+0x354>)
 80024a2:	3701      	adds	r7, #1
 80024a4:	429f      	cmp	r7, r3
 80024a6:	d100      	bne.n	80024aa <__aeabi_dsub+0x1e2>
 80024a8:	e0ad      	b.n	8002606 <__aeabi_dsub+0x33e>
 80024aa:	2101      	movs	r1, #1
 80024ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002620 <__aeabi_dsub+0x358>)
 80024ae:	086a      	lsrs	r2, r5, #1
 80024b0:	401c      	ands	r4, r3
 80024b2:	4029      	ands	r1, r5
 80024b4:	430a      	orrs	r2, r1
 80024b6:	07e5      	lsls	r5, r4, #31
 80024b8:	4315      	orrs	r5, r2
 80024ba:	0864      	lsrs	r4, r4, #1
 80024bc:	e78d      	b.n	80023da <__aeabi_dsub+0x112>
 80024be:	4a59      	ldr	r2, [pc, #356]	@ (8002624 <__aeabi_dsub+0x35c>)
 80024c0:	9b02      	ldr	r3, [sp, #8]
 80024c2:	4692      	mov	sl, r2
 80024c4:	4662      	mov	r2, ip
 80024c6:	44ba      	add	sl, r7
 80024c8:	431a      	orrs	r2, r3
 80024ca:	d02c      	beq.n	8002526 <__aeabi_dsub+0x25e>
 80024cc:	428e      	cmp	r6, r1
 80024ce:	d02e      	beq.n	800252e <__aeabi_dsub+0x266>
 80024d0:	4652      	mov	r2, sl
 80024d2:	2a00      	cmp	r2, #0
 80024d4:	d060      	beq.n	8002598 <__aeabi_dsub+0x2d0>
 80024d6:	2f00      	cmp	r7, #0
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x214>
 80024da:	e0db      	b.n	8002694 <__aeabi_dsub+0x3cc>
 80024dc:	4663      	mov	r3, ip
 80024de:	000e      	movs	r6, r1
 80024e0:	9c02      	ldr	r4, [sp, #8]
 80024e2:	08d8      	lsrs	r0, r3, #3
 80024e4:	0762      	lsls	r2, r4, #29
 80024e6:	4302      	orrs	r2, r0
 80024e8:	08e4      	lsrs	r4, r4, #3
 80024ea:	0013      	movs	r3, r2
 80024ec:	4323      	orrs	r3, r4
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x22a>
 80024f0:	e254      	b.n	800299c <__aeabi_dsub+0x6d4>
 80024f2:	2580      	movs	r5, #128	@ 0x80
 80024f4:	032d      	lsls	r5, r5, #12
 80024f6:	4325      	orrs	r5, r4
 80024f8:	032d      	lsls	r5, r5, #12
 80024fa:	4c48      	ldr	r4, [pc, #288]	@ (800261c <__aeabi_dsub+0x354>)
 80024fc:	0b2d      	lsrs	r5, r5, #12
 80024fe:	e78c      	b.n	800241a <__aeabi_dsub+0x152>
 8002500:	4661      	mov	r1, ip
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	4319      	orrs	r1, r3
 8002506:	d100      	bne.n	800250a <__aeabi_dsub+0x242>
 8002508:	e0cc      	b.n	80026a4 <__aeabi_dsub+0x3dc>
 800250a:	0029      	movs	r1, r5
 800250c:	3901      	subs	r1, #1
 800250e:	2d01      	cmp	r5, #1
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x24c>
 8002512:	e188      	b.n	8002826 <__aeabi_dsub+0x55e>
 8002514:	4295      	cmp	r5, r2
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x252>
 8002518:	e0aa      	b.n	8002670 <__aeabi_dsub+0x3a8>
 800251a:	2501      	movs	r5, #1
 800251c:	2938      	cmp	r1, #56	@ 0x38
 800251e:	dd00      	ble.n	8002522 <__aeabi_dsub+0x25a>
 8002520:	e72f      	b.n	8002382 <__aeabi_dsub+0xba>
 8002522:	468a      	mov	sl, r1
 8002524:	e718      	b.n	8002358 <__aeabi_dsub+0x90>
 8002526:	2201      	movs	r2, #1
 8002528:	4051      	eors	r1, r2
 800252a:	428e      	cmp	r6, r1
 800252c:	d1d0      	bne.n	80024d0 <__aeabi_dsub+0x208>
 800252e:	4653      	mov	r3, sl
 8002530:	2b00      	cmp	r3, #0
 8002532:	d100      	bne.n	8002536 <__aeabi_dsub+0x26e>
 8002534:	e0be      	b.n	80026b4 <__aeabi_dsub+0x3ec>
 8002536:	2f00      	cmp	r7, #0
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x274>
 800253a:	e138      	b.n	80027ae <__aeabi_dsub+0x4e6>
 800253c:	46ca      	mov	sl, r9
 800253e:	0022      	movs	r2, r4
 8002540:	4302      	orrs	r2, r0
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x27e>
 8002544:	e1e2      	b.n	800290c <__aeabi_dsub+0x644>
 8002546:	4653      	mov	r3, sl
 8002548:	1e59      	subs	r1, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x288>
 800254e:	e20d      	b.n	800296c <__aeabi_dsub+0x6a4>
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <__aeabi_dsub+0x354>)
 8002552:	4592      	cmp	sl, r2
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x290>
 8002556:	e1d2      	b.n	80028fe <__aeabi_dsub+0x636>
 8002558:	2701      	movs	r7, #1
 800255a:	2938      	cmp	r1, #56	@ 0x38
 800255c:	dc13      	bgt.n	8002586 <__aeabi_dsub+0x2be>
 800255e:	291f      	cmp	r1, #31
 8002560:	dd00      	ble.n	8002564 <__aeabi_dsub+0x29c>
 8002562:	e1ee      	b.n	8002942 <__aeabi_dsub+0x67a>
 8002564:	2220      	movs	r2, #32
 8002566:	9b02      	ldr	r3, [sp, #8]
 8002568:	1a52      	subs	r2, r2, r1
 800256a:	0025      	movs	r5, r4
 800256c:	0007      	movs	r7, r0
 800256e:	469a      	mov	sl, r3
 8002570:	40cc      	lsrs	r4, r1
 8002572:	4090      	lsls	r0, r2
 8002574:	4095      	lsls	r5, r2
 8002576:	40cf      	lsrs	r7, r1
 8002578:	44a2      	add	sl, r4
 800257a:	1e42      	subs	r2, r0, #1
 800257c:	4190      	sbcs	r0, r2
 800257e:	4653      	mov	r3, sl
 8002580:	432f      	orrs	r7, r5
 8002582:	4307      	orrs	r7, r0
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	003d      	movs	r5, r7
 8002588:	4465      	add	r5, ip
 800258a:	4565      	cmp	r5, ip
 800258c:	4192      	sbcs	r2, r2
 800258e:	9b02      	ldr	r3, [sp, #8]
 8002590:	4252      	negs	r2, r2
 8002592:	464f      	mov	r7, r9
 8002594:	18d4      	adds	r4, r2, r3
 8002596:	e780      	b.n	800249a <__aeabi_dsub+0x1d2>
 8002598:	4a23      	ldr	r2, [pc, #140]	@ (8002628 <__aeabi_dsub+0x360>)
 800259a:	1c7d      	adds	r5, r7, #1
 800259c:	4215      	tst	r5, r2
 800259e:	d000      	beq.n	80025a2 <__aeabi_dsub+0x2da>
 80025a0:	e0aa      	b.n	80026f8 <__aeabi_dsub+0x430>
 80025a2:	4662      	mov	r2, ip
 80025a4:	0025      	movs	r5, r4
 80025a6:	9b02      	ldr	r3, [sp, #8]
 80025a8:	4305      	orrs	r5, r0
 80025aa:	431a      	orrs	r2, r3
 80025ac:	2f00      	cmp	r7, #0
 80025ae:	d000      	beq.n	80025b2 <__aeabi_dsub+0x2ea>
 80025b0:	e0f5      	b.n	800279e <__aeabi_dsub+0x4d6>
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x2f0>
 80025b6:	e16b      	b.n	8002890 <__aeabi_dsub+0x5c8>
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d100      	bne.n	80025be <__aeabi_dsub+0x2f6>
 80025bc:	e152      	b.n	8002864 <__aeabi_dsub+0x59c>
 80025be:	4663      	mov	r3, ip
 80025c0:	1ac5      	subs	r5, r0, r3
 80025c2:	9b02      	ldr	r3, [sp, #8]
 80025c4:	1ae2      	subs	r2, r4, r3
 80025c6:	42a8      	cmp	r0, r5
 80025c8:	419b      	sbcs	r3, r3
 80025ca:	425b      	negs	r3, r3
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	021a      	lsls	r2, r3, #8
 80025d0:	d400      	bmi.n	80025d4 <__aeabi_dsub+0x30c>
 80025d2:	e1d5      	b.n	8002980 <__aeabi_dsub+0x6b8>
 80025d4:	4663      	mov	r3, ip
 80025d6:	1a1d      	subs	r5, r3, r0
 80025d8:	45ac      	cmp	ip, r5
 80025da:	4192      	sbcs	r2, r2
 80025dc:	2601      	movs	r6, #1
 80025de:	9b02      	ldr	r3, [sp, #8]
 80025e0:	4252      	negs	r2, r2
 80025e2:	1b1c      	subs	r4, r3, r4
 80025e4:	4688      	mov	r8, r1
 80025e6:	1aa4      	subs	r4, r4, r2
 80025e8:	400e      	ands	r6, r1
 80025ea:	e6f6      	b.n	80023da <__aeabi_dsub+0x112>
 80025ec:	4297      	cmp	r7, r2
 80025ee:	d03f      	beq.n	8002670 <__aeabi_dsub+0x3a8>
 80025f0:	4652      	mov	r2, sl
 80025f2:	2501      	movs	r5, #1
 80025f4:	2a38      	cmp	r2, #56	@ 0x38
 80025f6:	dd00      	ble.n	80025fa <__aeabi_dsub+0x332>
 80025f8:	e74a      	b.n	8002490 <__aeabi_dsub+0x1c8>
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	9b02      	ldr	r3, [sp, #8]
 80025fe:	0412      	lsls	r2, r2, #16
 8002600:	4313      	orrs	r3, r2
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	e72d      	b.n	8002462 <__aeabi_dsub+0x19a>
 8002606:	003c      	movs	r4, r7
 8002608:	2500      	movs	r5, #0
 800260a:	2200      	movs	r2, #0
 800260c:	e705      	b.n	800241a <__aeabi_dsub+0x152>
 800260e:	2307      	movs	r3, #7
 8002610:	402b      	ands	r3, r5
 8002612:	2b00      	cmp	r3, #0
 8002614:	d000      	beq.n	8002618 <__aeabi_dsub+0x350>
 8002616:	e6e2      	b.n	80023de <__aeabi_dsub+0x116>
 8002618:	e06b      	b.n	80026f2 <__aeabi_dsub+0x42a>
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	000007ff 	.word	0x000007ff
 8002620:	ff7fffff 	.word	0xff7fffff
 8002624:	fffff801 	.word	0xfffff801
 8002628:	000007fe 	.word	0x000007fe
 800262c:	0028      	movs	r0, r5
 800262e:	f000 fb63 	bl	8002cf8 <__clzsi2>
 8002632:	0003      	movs	r3, r0
 8002634:	3318      	adds	r3, #24
 8002636:	2b1f      	cmp	r3, #31
 8002638:	dc00      	bgt.n	800263c <__aeabi_dsub+0x374>
 800263a:	e6b4      	b.n	80023a6 <__aeabi_dsub+0xde>
 800263c:	002a      	movs	r2, r5
 800263e:	3808      	subs	r0, #8
 8002640:	4082      	lsls	r2, r0
 8002642:	429f      	cmp	r7, r3
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x380>
 8002646:	e0b9      	b.n	80027bc <__aeabi_dsub+0x4f4>
 8002648:	1bdb      	subs	r3, r3, r7
 800264a:	1c58      	adds	r0, r3, #1
 800264c:	281f      	cmp	r0, #31
 800264e:	dc00      	bgt.n	8002652 <__aeabi_dsub+0x38a>
 8002650:	e1a0      	b.n	8002994 <__aeabi_dsub+0x6cc>
 8002652:	0015      	movs	r5, r2
 8002654:	3b1f      	subs	r3, #31
 8002656:	40dd      	lsrs	r5, r3
 8002658:	2820      	cmp	r0, #32
 800265a:	d005      	beq.n	8002668 <__aeabi_dsub+0x3a0>
 800265c:	2340      	movs	r3, #64	@ 0x40
 800265e:	1a1b      	subs	r3, r3, r0
 8002660:	409a      	lsls	r2, r3
 8002662:	1e53      	subs	r3, r2, #1
 8002664:	419a      	sbcs	r2, r3
 8002666:	4315      	orrs	r5, r2
 8002668:	2307      	movs	r3, #7
 800266a:	2700      	movs	r7, #0
 800266c:	402b      	ands	r3, r5
 800266e:	e7d0      	b.n	8002612 <__aeabi_dsub+0x34a>
 8002670:	08c0      	lsrs	r0, r0, #3
 8002672:	0762      	lsls	r2, r4, #29
 8002674:	4302      	orrs	r2, r0
 8002676:	08e4      	lsrs	r4, r4, #3
 8002678:	e737      	b.n	80024ea <__aeabi_dsub+0x222>
 800267a:	08ea      	lsrs	r2, r5, #3
 800267c:	0763      	lsls	r3, r4, #29
 800267e:	431a      	orrs	r2, r3
 8002680:	4bd3      	ldr	r3, [pc, #844]	@ (80029d0 <__aeabi_dsub+0x708>)
 8002682:	08e4      	lsrs	r4, r4, #3
 8002684:	429f      	cmp	r7, r3
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x3c2>
 8002688:	e72f      	b.n	80024ea <__aeabi_dsub+0x222>
 800268a:	0324      	lsls	r4, r4, #12
 800268c:	0b25      	lsrs	r5, r4, #12
 800268e:	057c      	lsls	r4, r7, #21
 8002690:	0d64      	lsrs	r4, r4, #21
 8002692:	e6c2      	b.n	800241a <__aeabi_dsub+0x152>
 8002694:	46ca      	mov	sl, r9
 8002696:	0022      	movs	r2, r4
 8002698:	4302      	orrs	r2, r0
 800269a:	d158      	bne.n	800274e <__aeabi_dsub+0x486>
 800269c:	4663      	mov	r3, ip
 800269e:	000e      	movs	r6, r1
 80026a0:	9c02      	ldr	r4, [sp, #8]
 80026a2:	9303      	str	r3, [sp, #12]
 80026a4:	9b03      	ldr	r3, [sp, #12]
 80026a6:	4657      	mov	r7, sl
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	e7e7      	b.n	800267c <__aeabi_dsub+0x3b4>
 80026ac:	4cc9      	ldr	r4, [pc, #804]	@ (80029d4 <__aeabi_dsub+0x70c>)
 80026ae:	1aff      	subs	r7, r7, r3
 80026b0:	4014      	ands	r4, r2
 80026b2:	e692      	b.n	80023da <__aeabi_dsub+0x112>
 80026b4:	4dc8      	ldr	r5, [pc, #800]	@ (80029d8 <__aeabi_dsub+0x710>)
 80026b6:	1c7a      	adds	r2, r7, #1
 80026b8:	422a      	tst	r2, r5
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x3f6>
 80026bc:	e084      	b.n	80027c8 <__aeabi_dsub+0x500>
 80026be:	0022      	movs	r2, r4
 80026c0:	4302      	orrs	r2, r0
 80026c2:	2f00      	cmp	r7, #0
 80026c4:	d000      	beq.n	80026c8 <__aeabi_dsub+0x400>
 80026c6:	e0ef      	b.n	80028a8 <__aeabi_dsub+0x5e0>
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d100      	bne.n	80026ce <__aeabi_dsub+0x406>
 80026cc:	e0e5      	b.n	800289a <__aeabi_dsub+0x5d2>
 80026ce:	4662      	mov	r2, ip
 80026d0:	9902      	ldr	r1, [sp, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x410>
 80026d6:	e0c5      	b.n	8002864 <__aeabi_dsub+0x59c>
 80026d8:	4663      	mov	r3, ip
 80026da:	18c5      	adds	r5, r0, r3
 80026dc:	468c      	mov	ip, r1
 80026de:	4285      	cmp	r5, r0
 80026e0:	4180      	sbcs	r0, r0
 80026e2:	4464      	add	r4, ip
 80026e4:	4240      	negs	r0, r0
 80026e6:	1824      	adds	r4, r4, r0
 80026e8:	0223      	lsls	r3, r4, #8
 80026ea:	d502      	bpl.n	80026f2 <__aeabi_dsub+0x42a>
 80026ec:	4bb9      	ldr	r3, [pc, #740]	@ (80029d4 <__aeabi_dsub+0x70c>)
 80026ee:	3701      	adds	r7, #1
 80026f0:	401c      	ands	r4, r3
 80026f2:	46ba      	mov	sl, r7
 80026f4:	9503      	str	r5, [sp, #12]
 80026f6:	e7d5      	b.n	80026a4 <__aeabi_dsub+0x3dc>
 80026f8:	4662      	mov	r2, ip
 80026fa:	1a85      	subs	r5, r0, r2
 80026fc:	42a8      	cmp	r0, r5
 80026fe:	4192      	sbcs	r2, r2
 8002700:	4252      	negs	r2, r2
 8002702:	4691      	mov	r9, r2
 8002704:	9b02      	ldr	r3, [sp, #8]
 8002706:	1ae3      	subs	r3, r4, r3
 8002708:	001a      	movs	r2, r3
 800270a:	464b      	mov	r3, r9
 800270c:	1ad2      	subs	r2, r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	4691      	mov	r9, r2
 8002712:	021a      	lsls	r2, r3, #8
 8002714:	d46c      	bmi.n	80027f0 <__aeabi_dsub+0x528>
 8002716:	464a      	mov	r2, r9
 8002718:	464c      	mov	r4, r9
 800271a:	432a      	orrs	r2, r5
 800271c:	d000      	beq.n	8002720 <__aeabi_dsub+0x458>
 800271e:	e63a      	b.n	8002396 <__aeabi_dsub+0xce>
 8002720:	2600      	movs	r6, #0
 8002722:	2400      	movs	r4, #0
 8002724:	2500      	movs	r5, #0
 8002726:	e678      	b.n	800241a <__aeabi_dsub+0x152>
 8002728:	9902      	ldr	r1, [sp, #8]
 800272a:	4653      	mov	r3, sl
 800272c:	000d      	movs	r5, r1
 800272e:	3a20      	subs	r2, #32
 8002730:	40d5      	lsrs	r5, r2
 8002732:	2b20      	cmp	r3, #32
 8002734:	d006      	beq.n	8002744 <__aeabi_dsub+0x47c>
 8002736:	2240      	movs	r2, #64	@ 0x40
 8002738:	1ad2      	subs	r2, r2, r3
 800273a:	000b      	movs	r3, r1
 800273c:	4093      	lsls	r3, r2
 800273e:	4662      	mov	r2, ip
 8002740:	431a      	orrs	r2, r3
 8002742:	4693      	mov	fp, r2
 8002744:	465b      	mov	r3, fp
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	4193      	sbcs	r3, r2
 800274a:	431d      	orrs	r5, r3
 800274c:	e619      	b.n	8002382 <__aeabi_dsub+0xba>
 800274e:	4653      	mov	r3, sl
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x490>
 8002756:	e0c6      	b.n	80028e6 <__aeabi_dsub+0x61e>
 8002758:	4e9d      	ldr	r6, [pc, #628]	@ (80029d0 <__aeabi_dsub+0x708>)
 800275a:	45b2      	cmp	sl, r6
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x498>
 800275e:	e6bd      	b.n	80024dc <__aeabi_dsub+0x214>
 8002760:	4688      	mov	r8, r1
 8002762:	000e      	movs	r6, r1
 8002764:	2501      	movs	r5, #1
 8002766:	2a38      	cmp	r2, #56	@ 0x38
 8002768:	dc10      	bgt.n	800278c <__aeabi_dsub+0x4c4>
 800276a:	2a1f      	cmp	r2, #31
 800276c:	dc7f      	bgt.n	800286e <__aeabi_dsub+0x5a6>
 800276e:	2120      	movs	r1, #32
 8002770:	0025      	movs	r5, r4
 8002772:	1a89      	subs	r1, r1, r2
 8002774:	0007      	movs	r7, r0
 8002776:	4088      	lsls	r0, r1
 8002778:	408d      	lsls	r5, r1
 800277a:	40d7      	lsrs	r7, r2
 800277c:	40d4      	lsrs	r4, r2
 800277e:	1e41      	subs	r1, r0, #1
 8002780:	4188      	sbcs	r0, r1
 8002782:	9b02      	ldr	r3, [sp, #8]
 8002784:	433d      	orrs	r5, r7
 8002786:	1b1b      	subs	r3, r3, r4
 8002788:	4305      	orrs	r5, r0
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	4662      	mov	r2, ip
 800278e:	1b55      	subs	r5, r2, r5
 8002790:	45ac      	cmp	ip, r5
 8002792:	4192      	sbcs	r2, r2
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	4252      	negs	r2, r2
 8002798:	464f      	mov	r7, r9
 800279a:	1a9c      	subs	r4, r3, r2
 800279c:	e5f6      	b.n	800238c <__aeabi_dsub+0xc4>
 800279e:	2d00      	cmp	r5, #0
 80027a0:	d000      	beq.n	80027a4 <__aeabi_dsub+0x4dc>
 80027a2:	e0b7      	b.n	8002914 <__aeabi_dsub+0x64c>
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	d100      	bne.n	80027aa <__aeabi_dsub+0x4e2>
 80027a8:	e0f0      	b.n	800298c <__aeabi_dsub+0x6c4>
 80027aa:	2601      	movs	r6, #1
 80027ac:	400e      	ands	r6, r1
 80027ae:	4663      	mov	r3, ip
 80027b0:	9802      	ldr	r0, [sp, #8]
 80027b2:	08d9      	lsrs	r1, r3, #3
 80027b4:	0742      	lsls	r2, r0, #29
 80027b6:	430a      	orrs	r2, r1
 80027b8:	08c4      	lsrs	r4, r0, #3
 80027ba:	e696      	b.n	80024ea <__aeabi_dsub+0x222>
 80027bc:	4c85      	ldr	r4, [pc, #532]	@ (80029d4 <__aeabi_dsub+0x70c>)
 80027be:	1aff      	subs	r7, r7, r3
 80027c0:	4014      	ands	r4, r2
 80027c2:	0762      	lsls	r2, r4, #29
 80027c4:	08e4      	lsrs	r4, r4, #3
 80027c6:	e760      	b.n	800268a <__aeabi_dsub+0x3c2>
 80027c8:	4981      	ldr	r1, [pc, #516]	@ (80029d0 <__aeabi_dsub+0x708>)
 80027ca:	428a      	cmp	r2, r1
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x508>
 80027ce:	e0c9      	b.n	8002964 <__aeabi_dsub+0x69c>
 80027d0:	4663      	mov	r3, ip
 80027d2:	18c1      	adds	r1, r0, r3
 80027d4:	4281      	cmp	r1, r0
 80027d6:	4180      	sbcs	r0, r0
 80027d8:	9b02      	ldr	r3, [sp, #8]
 80027da:	4240      	negs	r0, r0
 80027dc:	18e3      	adds	r3, r4, r3
 80027de:	181b      	adds	r3, r3, r0
 80027e0:	07dd      	lsls	r5, r3, #31
 80027e2:	085c      	lsrs	r4, r3, #1
 80027e4:	2307      	movs	r3, #7
 80027e6:	0849      	lsrs	r1, r1, #1
 80027e8:	430d      	orrs	r5, r1
 80027ea:	0017      	movs	r7, r2
 80027ec:	402b      	ands	r3, r5
 80027ee:	e710      	b.n	8002612 <__aeabi_dsub+0x34a>
 80027f0:	4663      	mov	r3, ip
 80027f2:	1a1d      	subs	r5, r3, r0
 80027f4:	45ac      	cmp	ip, r5
 80027f6:	4192      	sbcs	r2, r2
 80027f8:	2601      	movs	r6, #1
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	4252      	negs	r2, r2
 80027fe:	1b1c      	subs	r4, r3, r4
 8002800:	4688      	mov	r8, r1
 8002802:	1aa4      	subs	r4, r4, r2
 8002804:	400e      	ands	r6, r1
 8002806:	e5c6      	b.n	8002396 <__aeabi_dsub+0xce>
 8002808:	4663      	mov	r3, ip
 800280a:	18c5      	adds	r5, r0, r3
 800280c:	9b02      	ldr	r3, [sp, #8]
 800280e:	4285      	cmp	r5, r0
 8002810:	4180      	sbcs	r0, r0
 8002812:	469c      	mov	ip, r3
 8002814:	4240      	negs	r0, r0
 8002816:	4464      	add	r4, ip
 8002818:	1824      	adds	r4, r4, r0
 800281a:	2701      	movs	r7, #1
 800281c:	0223      	lsls	r3, r4, #8
 800281e:	d400      	bmi.n	8002822 <__aeabi_dsub+0x55a>
 8002820:	e6f5      	b.n	800260e <__aeabi_dsub+0x346>
 8002822:	2702      	movs	r7, #2
 8002824:	e641      	b.n	80024aa <__aeabi_dsub+0x1e2>
 8002826:	4663      	mov	r3, ip
 8002828:	1ac5      	subs	r5, r0, r3
 800282a:	42a8      	cmp	r0, r5
 800282c:	4180      	sbcs	r0, r0
 800282e:	9b02      	ldr	r3, [sp, #8]
 8002830:	4240      	negs	r0, r0
 8002832:	1ae4      	subs	r4, r4, r3
 8002834:	2701      	movs	r7, #1
 8002836:	1a24      	subs	r4, r4, r0
 8002838:	e5a8      	b.n	800238c <__aeabi_dsub+0xc4>
 800283a:	9d02      	ldr	r5, [sp, #8]
 800283c:	4652      	mov	r2, sl
 800283e:	002b      	movs	r3, r5
 8002840:	3a20      	subs	r2, #32
 8002842:	40d3      	lsrs	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	4653      	mov	r3, sl
 8002848:	2b20      	cmp	r3, #32
 800284a:	d006      	beq.n	800285a <__aeabi_dsub+0x592>
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	1ad2      	subs	r2, r2, r3
 8002850:	002b      	movs	r3, r5
 8002852:	4093      	lsls	r3, r2
 8002854:	4662      	mov	r2, ip
 8002856:	431a      	orrs	r2, r3
 8002858:	4693      	mov	fp, r2
 800285a:	465d      	mov	r5, fp
 800285c:	1e6b      	subs	r3, r5, #1
 800285e:	419d      	sbcs	r5, r3
 8002860:	430d      	orrs	r5, r1
 8002862:	e615      	b.n	8002490 <__aeabi_dsub+0x1c8>
 8002864:	0762      	lsls	r2, r4, #29
 8002866:	08c0      	lsrs	r0, r0, #3
 8002868:	4302      	orrs	r2, r0
 800286a:	08e4      	lsrs	r4, r4, #3
 800286c:	e70d      	b.n	800268a <__aeabi_dsub+0x3c2>
 800286e:	0011      	movs	r1, r2
 8002870:	0027      	movs	r7, r4
 8002872:	3920      	subs	r1, #32
 8002874:	40cf      	lsrs	r7, r1
 8002876:	2a20      	cmp	r2, #32
 8002878:	d005      	beq.n	8002886 <__aeabi_dsub+0x5be>
 800287a:	2140      	movs	r1, #64	@ 0x40
 800287c:	1a8a      	subs	r2, r1, r2
 800287e:	4094      	lsls	r4, r2
 8002880:	0025      	movs	r5, r4
 8002882:	4305      	orrs	r5, r0
 8002884:	9503      	str	r5, [sp, #12]
 8002886:	9d03      	ldr	r5, [sp, #12]
 8002888:	1e6a      	subs	r2, r5, #1
 800288a:	4195      	sbcs	r5, r2
 800288c:	433d      	orrs	r5, r7
 800288e:	e77d      	b.n	800278c <__aeabi_dsub+0x4c4>
 8002890:	2a00      	cmp	r2, #0
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x5ce>
 8002894:	e744      	b.n	8002720 <__aeabi_dsub+0x458>
 8002896:	2601      	movs	r6, #1
 8002898:	400e      	ands	r6, r1
 800289a:	4663      	mov	r3, ip
 800289c:	08d9      	lsrs	r1, r3, #3
 800289e:	9b02      	ldr	r3, [sp, #8]
 80028a0:	075a      	lsls	r2, r3, #29
 80028a2:	430a      	orrs	r2, r1
 80028a4:	08dc      	lsrs	r4, r3, #3
 80028a6:	e6f0      	b.n	800268a <__aeabi_dsub+0x3c2>
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d028      	beq.n	80028fe <__aeabi_dsub+0x636>
 80028ac:	4662      	mov	r2, ip
 80028ae:	9f02      	ldr	r7, [sp, #8]
 80028b0:	08c0      	lsrs	r0, r0, #3
 80028b2:	433a      	orrs	r2, r7
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x5f0>
 80028b6:	e6dc      	b.n	8002672 <__aeabi_dsub+0x3aa>
 80028b8:	0762      	lsls	r2, r4, #29
 80028ba:	4310      	orrs	r0, r2
 80028bc:	2280      	movs	r2, #128	@ 0x80
 80028be:	08e4      	lsrs	r4, r4, #3
 80028c0:	0312      	lsls	r2, r2, #12
 80028c2:	4214      	tst	r4, r2
 80028c4:	d009      	beq.n	80028da <__aeabi_dsub+0x612>
 80028c6:	08fd      	lsrs	r5, r7, #3
 80028c8:	4215      	tst	r5, r2
 80028ca:	d106      	bne.n	80028da <__aeabi_dsub+0x612>
 80028cc:	4663      	mov	r3, ip
 80028ce:	2601      	movs	r6, #1
 80028d0:	002c      	movs	r4, r5
 80028d2:	08d8      	lsrs	r0, r3, #3
 80028d4:	077b      	lsls	r3, r7, #29
 80028d6:	4318      	orrs	r0, r3
 80028d8:	400e      	ands	r6, r1
 80028da:	0f42      	lsrs	r2, r0, #29
 80028dc:	00c0      	lsls	r0, r0, #3
 80028de:	08c0      	lsrs	r0, r0, #3
 80028e0:	0752      	lsls	r2, r2, #29
 80028e2:	4302      	orrs	r2, r0
 80028e4:	e601      	b.n	80024ea <__aeabi_dsub+0x222>
 80028e6:	4663      	mov	r3, ip
 80028e8:	1a1d      	subs	r5, r3, r0
 80028ea:	45ac      	cmp	ip, r5
 80028ec:	4192      	sbcs	r2, r2
 80028ee:	9b02      	ldr	r3, [sp, #8]
 80028f0:	4252      	negs	r2, r2
 80028f2:	1b1c      	subs	r4, r3, r4
 80028f4:	000e      	movs	r6, r1
 80028f6:	4688      	mov	r8, r1
 80028f8:	2701      	movs	r7, #1
 80028fa:	1aa4      	subs	r4, r4, r2
 80028fc:	e546      	b.n	800238c <__aeabi_dsub+0xc4>
 80028fe:	4663      	mov	r3, ip
 8002900:	08d9      	lsrs	r1, r3, #3
 8002902:	9b02      	ldr	r3, [sp, #8]
 8002904:	075a      	lsls	r2, r3, #29
 8002906:	430a      	orrs	r2, r1
 8002908:	08dc      	lsrs	r4, r3, #3
 800290a:	e5ee      	b.n	80024ea <__aeabi_dsub+0x222>
 800290c:	4663      	mov	r3, ip
 800290e:	9c02      	ldr	r4, [sp, #8]
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	e6c7      	b.n	80026a4 <__aeabi_dsub+0x3dc>
 8002914:	08c0      	lsrs	r0, r0, #3
 8002916:	2a00      	cmp	r2, #0
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x654>
 800291a:	e6aa      	b.n	8002672 <__aeabi_dsub+0x3aa>
 800291c:	0762      	lsls	r2, r4, #29
 800291e:	4310      	orrs	r0, r2
 8002920:	2280      	movs	r2, #128	@ 0x80
 8002922:	08e4      	lsrs	r4, r4, #3
 8002924:	0312      	lsls	r2, r2, #12
 8002926:	4214      	tst	r4, r2
 8002928:	d0d7      	beq.n	80028da <__aeabi_dsub+0x612>
 800292a:	9f02      	ldr	r7, [sp, #8]
 800292c:	08fd      	lsrs	r5, r7, #3
 800292e:	4215      	tst	r5, r2
 8002930:	d1d3      	bne.n	80028da <__aeabi_dsub+0x612>
 8002932:	4663      	mov	r3, ip
 8002934:	2601      	movs	r6, #1
 8002936:	08d8      	lsrs	r0, r3, #3
 8002938:	077b      	lsls	r3, r7, #29
 800293a:	002c      	movs	r4, r5
 800293c:	4318      	orrs	r0, r3
 800293e:	400e      	ands	r6, r1
 8002940:	e7cb      	b.n	80028da <__aeabi_dsub+0x612>
 8002942:	000a      	movs	r2, r1
 8002944:	0027      	movs	r7, r4
 8002946:	3a20      	subs	r2, #32
 8002948:	40d7      	lsrs	r7, r2
 800294a:	2920      	cmp	r1, #32
 800294c:	d005      	beq.n	800295a <__aeabi_dsub+0x692>
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	1a52      	subs	r2, r2, r1
 8002952:	4094      	lsls	r4, r2
 8002954:	0025      	movs	r5, r4
 8002956:	4305      	orrs	r5, r0
 8002958:	9503      	str	r5, [sp, #12]
 800295a:	9d03      	ldr	r5, [sp, #12]
 800295c:	1e6a      	subs	r2, r5, #1
 800295e:	4195      	sbcs	r5, r2
 8002960:	432f      	orrs	r7, r5
 8002962:	e610      	b.n	8002586 <__aeabi_dsub+0x2be>
 8002964:	0014      	movs	r4, r2
 8002966:	2500      	movs	r5, #0
 8002968:	2200      	movs	r2, #0
 800296a:	e556      	b.n	800241a <__aeabi_dsub+0x152>
 800296c:	9b02      	ldr	r3, [sp, #8]
 800296e:	4460      	add	r0, ip
 8002970:	4699      	mov	r9, r3
 8002972:	4560      	cmp	r0, ip
 8002974:	4192      	sbcs	r2, r2
 8002976:	444c      	add	r4, r9
 8002978:	4252      	negs	r2, r2
 800297a:	0005      	movs	r5, r0
 800297c:	18a4      	adds	r4, r4, r2
 800297e:	e74c      	b.n	800281a <__aeabi_dsub+0x552>
 8002980:	001a      	movs	r2, r3
 8002982:	001c      	movs	r4, r3
 8002984:	432a      	orrs	r2, r5
 8002986:	d000      	beq.n	800298a <__aeabi_dsub+0x6c2>
 8002988:	e6b3      	b.n	80026f2 <__aeabi_dsub+0x42a>
 800298a:	e6c9      	b.n	8002720 <__aeabi_dsub+0x458>
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	2600      	movs	r6, #0
 8002990:	0324      	lsls	r4, r4, #12
 8002992:	e5ae      	b.n	80024f2 <__aeabi_dsub+0x22a>
 8002994:	2120      	movs	r1, #32
 8002996:	2500      	movs	r5, #0
 8002998:	1a09      	subs	r1, r1, r0
 800299a:	e517      	b.n	80023cc <__aeabi_dsub+0x104>
 800299c:	2200      	movs	r2, #0
 800299e:	2500      	movs	r5, #0
 80029a0:	4c0b      	ldr	r4, [pc, #44]	@ (80029d0 <__aeabi_dsub+0x708>)
 80029a2:	e53a      	b.n	800241a <__aeabi_dsub+0x152>
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d100      	bne.n	80029aa <__aeabi_dsub+0x6e2>
 80029a8:	e5f6      	b.n	8002598 <__aeabi_dsub+0x2d0>
 80029aa:	464b      	mov	r3, r9
 80029ac:	1bda      	subs	r2, r3, r7
 80029ae:	4692      	mov	sl, r2
 80029b0:	2f00      	cmp	r7, #0
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x6ee>
 80029b4:	e66f      	b.n	8002696 <__aeabi_dsub+0x3ce>
 80029b6:	2a38      	cmp	r2, #56	@ 0x38
 80029b8:	dc05      	bgt.n	80029c6 <__aeabi_dsub+0x6fe>
 80029ba:	2680      	movs	r6, #128	@ 0x80
 80029bc:	0436      	lsls	r6, r6, #16
 80029be:	4334      	orrs	r4, r6
 80029c0:	4688      	mov	r8, r1
 80029c2:	000e      	movs	r6, r1
 80029c4:	e6d1      	b.n	800276a <__aeabi_dsub+0x4a2>
 80029c6:	4688      	mov	r8, r1
 80029c8:	000e      	movs	r6, r1
 80029ca:	2501      	movs	r5, #1
 80029cc:	e6de      	b.n	800278c <__aeabi_dsub+0x4c4>
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	000007ff 	.word	0x000007ff
 80029d4:	ff7fffff 	.word	0xff7fffff
 80029d8:	000007fe 	.word	0x000007fe
 80029dc:	2d00      	cmp	r5, #0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x71a>
 80029e0:	e668      	b.n	80026b4 <__aeabi_dsub+0x3ec>
 80029e2:	464b      	mov	r3, r9
 80029e4:	1bd9      	subs	r1, r3, r7
 80029e6:	2f00      	cmp	r7, #0
 80029e8:	d101      	bne.n	80029ee <__aeabi_dsub+0x726>
 80029ea:	468a      	mov	sl, r1
 80029ec:	e5a7      	b.n	800253e <__aeabi_dsub+0x276>
 80029ee:	2701      	movs	r7, #1
 80029f0:	2938      	cmp	r1, #56	@ 0x38
 80029f2:	dd00      	ble.n	80029f6 <__aeabi_dsub+0x72e>
 80029f4:	e5c7      	b.n	8002586 <__aeabi_dsub+0x2be>
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	0412      	lsls	r2, r2, #16
 80029fa:	4314      	orrs	r4, r2
 80029fc:	e5af      	b.n	800255e <__aeabi_dsub+0x296>
 80029fe:	46c0      	nop			@ (mov r8, r8)

08002a00 <__aeabi_dcmpun>:
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	46c6      	mov	lr, r8
 8002a04:	031e      	lsls	r6, r3, #12
 8002a06:	0b36      	lsrs	r6, r6, #12
 8002a08:	46b0      	mov	r8, r6
 8002a0a:	4e0d      	ldr	r6, [pc, #52]	@ (8002a40 <__aeabi_dcmpun+0x40>)
 8002a0c:	030c      	lsls	r4, r1, #12
 8002a0e:	004d      	lsls	r5, r1, #1
 8002a10:	005f      	lsls	r7, r3, #1
 8002a12:	b500      	push	{lr}
 8002a14:	0b24      	lsrs	r4, r4, #12
 8002a16:	0d6d      	lsrs	r5, r5, #21
 8002a18:	0d7f      	lsrs	r7, r7, #21
 8002a1a:	42b5      	cmp	r5, r6
 8002a1c:	d00b      	beq.n	8002a36 <__aeabi_dcmpun+0x36>
 8002a1e:	4908      	ldr	r1, [pc, #32]	@ (8002a40 <__aeabi_dcmpun+0x40>)
 8002a20:	2000      	movs	r0, #0
 8002a22:	428f      	cmp	r7, r1
 8002a24:	d104      	bne.n	8002a30 <__aeabi_dcmpun+0x30>
 8002a26:	4646      	mov	r6, r8
 8002a28:	4316      	orrs	r6, r2
 8002a2a:	0030      	movs	r0, r6
 8002a2c:	1e43      	subs	r3, r0, #1
 8002a2e:	4198      	sbcs	r0, r3
 8002a30:	bc80      	pop	{r7}
 8002a32:	46b8      	mov	r8, r7
 8002a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a36:	4304      	orrs	r4, r0
 8002a38:	2001      	movs	r0, #1
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d1f8      	bne.n	8002a30 <__aeabi_dcmpun+0x30>
 8002a3e:	e7ee      	b.n	8002a1e <__aeabi_dcmpun+0x1e>
 8002a40:	000007ff 	.word	0x000007ff

08002a44 <__aeabi_d2iz>:
 8002a44:	000b      	movs	r3, r1
 8002a46:	0002      	movs	r2, r0
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4d16      	ldr	r5, [pc, #88]	@ (8002aa4 <__aeabi_d2iz+0x60>)
 8002a4c:	030c      	lsls	r4, r1, #12
 8002a4e:	b082      	sub	sp, #8
 8002a50:	0049      	lsls	r1, r1, #1
 8002a52:	2000      	movs	r0, #0
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	0b24      	lsrs	r4, r4, #12
 8002a5a:	0d49      	lsrs	r1, r1, #21
 8002a5c:	0fde      	lsrs	r6, r3, #31
 8002a5e:	42a9      	cmp	r1, r5
 8002a60:	dd04      	ble.n	8002a6c <__aeabi_d2iz+0x28>
 8002a62:	4811      	ldr	r0, [pc, #68]	@ (8002aa8 <__aeabi_d2iz+0x64>)
 8002a64:	4281      	cmp	r1, r0
 8002a66:	dd03      	ble.n	8002a70 <__aeabi_d2iz+0x2c>
 8002a68:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <__aeabi_d2iz+0x68>)
 8002a6a:	18f0      	adds	r0, r6, r3
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	2080      	movs	r0, #128	@ 0x80
 8002a72:	0340      	lsls	r0, r0, #13
 8002a74:	4320      	orrs	r0, r4
 8002a76:	4c0e      	ldr	r4, [pc, #56]	@ (8002ab0 <__aeabi_d2iz+0x6c>)
 8002a78:	1a64      	subs	r4, r4, r1
 8002a7a:	2c1f      	cmp	r4, #31
 8002a7c:	dd08      	ble.n	8002a90 <__aeabi_d2iz+0x4c>
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <__aeabi_d2iz+0x70>)
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	40d8      	lsrs	r0, r3
 8002a84:	0003      	movs	r3, r0
 8002a86:	4258      	negs	r0, r3
 8002a88:	2e00      	cmp	r6, #0
 8002a8a:	d1ef      	bne.n	8002a6c <__aeabi_d2iz+0x28>
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	e7ed      	b.n	8002a6c <__aeabi_d2iz+0x28>
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <__aeabi_d2iz+0x74>)
 8002a92:	9a00      	ldr	r2, [sp, #0]
 8002a94:	469c      	mov	ip, r3
 8002a96:	0003      	movs	r3, r0
 8002a98:	4461      	add	r1, ip
 8002a9a:	408b      	lsls	r3, r1
 8002a9c:	40e2      	lsrs	r2, r4
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	e7f1      	b.n	8002a86 <__aeabi_d2iz+0x42>
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	000003fe 	.word	0x000003fe
 8002aa8:	0000041d 	.word	0x0000041d
 8002aac:	7fffffff 	.word	0x7fffffff
 8002ab0:	00000433 	.word	0x00000433
 8002ab4:	00000413 	.word	0x00000413
 8002ab8:	fffffbed 	.word	0xfffffbed

08002abc <__aeabi_i2d>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d016      	beq.n	8002af0 <__aeabi_i2d+0x34>
 8002ac2:	17c3      	asrs	r3, r0, #31
 8002ac4:	18c5      	adds	r5, r0, r3
 8002ac6:	405d      	eors	r5, r3
 8002ac8:	0fc4      	lsrs	r4, r0, #31
 8002aca:	0028      	movs	r0, r5
 8002acc:	f000 f914 	bl	8002cf8 <__clzsi2>
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <__aeabi_i2d+0x58>)
 8002ad2:	1a1b      	subs	r3, r3, r0
 8002ad4:	055b      	lsls	r3, r3, #21
 8002ad6:	0d5b      	lsrs	r3, r3, #21
 8002ad8:	280a      	cmp	r0, #10
 8002ada:	dc14      	bgt.n	8002b06 <__aeabi_i2d+0x4a>
 8002adc:	0002      	movs	r2, r0
 8002ade:	002e      	movs	r6, r5
 8002ae0:	3215      	adds	r2, #21
 8002ae2:	4096      	lsls	r6, r2
 8002ae4:	220b      	movs	r2, #11
 8002ae6:	1a12      	subs	r2, r2, r0
 8002ae8:	40d5      	lsrs	r5, r2
 8002aea:	032d      	lsls	r5, r5, #12
 8002aec:	0b2d      	lsrs	r5, r5, #12
 8002aee:	e003      	b.n	8002af8 <__aeabi_i2d+0x3c>
 8002af0:	2400      	movs	r4, #0
 8002af2:	2300      	movs	r3, #0
 8002af4:	2500      	movs	r5, #0
 8002af6:	2600      	movs	r6, #0
 8002af8:	051b      	lsls	r3, r3, #20
 8002afa:	432b      	orrs	r3, r5
 8002afc:	07e4      	lsls	r4, r4, #31
 8002afe:	4323      	orrs	r3, r4
 8002b00:	0030      	movs	r0, r6
 8002b02:	0019      	movs	r1, r3
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	380b      	subs	r0, #11
 8002b08:	4085      	lsls	r5, r0
 8002b0a:	032d      	lsls	r5, r5, #12
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	0b2d      	lsrs	r5, r5, #12
 8002b10:	e7f2      	b.n	8002af8 <__aeabi_i2d+0x3c>
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	0000041e 	.word	0x0000041e

08002b18 <__aeabi_ui2d>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	1e04      	subs	r4, r0, #0
 8002b1c:	d010      	beq.n	8002b40 <__aeabi_ui2d+0x28>
 8002b1e:	f000 f8eb 	bl	8002cf8 <__clzsi2>
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <__aeabi_ui2d+0x44>)
 8002b24:	1a1b      	subs	r3, r3, r0
 8002b26:	055b      	lsls	r3, r3, #21
 8002b28:	0d5b      	lsrs	r3, r3, #21
 8002b2a:	280a      	cmp	r0, #10
 8002b2c:	dc0f      	bgt.n	8002b4e <__aeabi_ui2d+0x36>
 8002b2e:	220b      	movs	r2, #11
 8002b30:	0021      	movs	r1, r4
 8002b32:	1a12      	subs	r2, r2, r0
 8002b34:	40d1      	lsrs	r1, r2
 8002b36:	3015      	adds	r0, #21
 8002b38:	030a      	lsls	r2, r1, #12
 8002b3a:	4084      	lsls	r4, r0
 8002b3c:	0b12      	lsrs	r2, r2, #12
 8002b3e:	e001      	b.n	8002b44 <__aeabi_ui2d+0x2c>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	4313      	orrs	r3, r2
 8002b48:	0020      	movs	r0, r4
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	0022      	movs	r2, r4
 8002b50:	380b      	subs	r0, #11
 8002b52:	4082      	lsls	r2, r0
 8002b54:	0312      	lsls	r2, r2, #12
 8002b56:	2400      	movs	r4, #0
 8002b58:	0b12      	lsrs	r2, r2, #12
 8002b5a:	e7f3      	b.n	8002b44 <__aeabi_ui2d+0x2c>
 8002b5c:	0000041e 	.word	0x0000041e

08002b60 <__aeabi_f2d>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	0242      	lsls	r2, r0, #9
 8002b64:	0043      	lsls	r3, r0, #1
 8002b66:	0fc4      	lsrs	r4, r0, #31
 8002b68:	20fe      	movs	r0, #254	@ 0xfe
 8002b6a:	0e1b      	lsrs	r3, r3, #24
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	0a55      	lsrs	r5, r2, #9
 8002b70:	4208      	tst	r0, r1
 8002b72:	d00c      	beq.n	8002b8e <__aeabi_f2d+0x2e>
 8002b74:	21e0      	movs	r1, #224	@ 0xe0
 8002b76:	0089      	lsls	r1, r1, #2
 8002b78:	468c      	mov	ip, r1
 8002b7a:	076d      	lsls	r5, r5, #29
 8002b7c:	0b12      	lsrs	r2, r2, #12
 8002b7e:	4463      	add	r3, ip
 8002b80:	051b      	lsls	r3, r3, #20
 8002b82:	4313      	orrs	r3, r2
 8002b84:	07e4      	lsls	r4, r4, #31
 8002b86:	4323      	orrs	r3, r4
 8002b88:	0028      	movs	r0, r5
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d114      	bne.n	8002bbc <__aeabi_f2d+0x5c>
 8002b92:	2d00      	cmp	r5, #0
 8002b94:	d01b      	beq.n	8002bce <__aeabi_f2d+0x6e>
 8002b96:	0028      	movs	r0, r5
 8002b98:	f000 f8ae 	bl	8002cf8 <__clzsi2>
 8002b9c:	280a      	cmp	r0, #10
 8002b9e:	dc1c      	bgt.n	8002bda <__aeabi_f2d+0x7a>
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	002a      	movs	r2, r5
 8002ba4:	1a1b      	subs	r3, r3, r0
 8002ba6:	40da      	lsrs	r2, r3
 8002ba8:	0003      	movs	r3, r0
 8002baa:	3315      	adds	r3, #21
 8002bac:	409d      	lsls	r5, r3
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <__aeabi_f2d+0x88>)
 8002bb0:	0312      	lsls	r2, r2, #12
 8002bb2:	1a1b      	subs	r3, r3, r0
 8002bb4:	055b      	lsls	r3, r3, #21
 8002bb6:	0b12      	lsrs	r2, r2, #12
 8002bb8:	0d5b      	lsrs	r3, r3, #21
 8002bba:	e7e1      	b.n	8002b80 <__aeabi_f2d+0x20>
 8002bbc:	2d00      	cmp	r5, #0
 8002bbe:	d009      	beq.n	8002bd4 <__aeabi_f2d+0x74>
 8002bc0:	0b13      	lsrs	r3, r2, #12
 8002bc2:	2280      	movs	r2, #128	@ 0x80
 8002bc4:	0312      	lsls	r2, r2, #12
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	076d      	lsls	r5, r5, #29
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <__aeabi_f2d+0x8c>)
 8002bcc:	e7d8      	b.n	8002b80 <__aeabi_f2d+0x20>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	e7d5      	b.n	8002b80 <__aeabi_f2d+0x20>
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <__aeabi_f2d+0x8c>)
 8002bd8:	e7d2      	b.n	8002b80 <__aeabi_f2d+0x20>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	002a      	movs	r2, r5
 8002bde:	3b0b      	subs	r3, #11
 8002be0:	409a      	lsls	r2, r3
 8002be2:	2500      	movs	r5, #0
 8002be4:	e7e3      	b.n	8002bae <__aeabi_f2d+0x4e>
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	00000389 	.word	0x00000389
 8002bec:	000007ff 	.word	0x000007ff

08002bf0 <__aeabi_d2f>:
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	004b      	lsls	r3, r1, #1
 8002bf4:	030f      	lsls	r7, r1, #12
 8002bf6:	0d5b      	lsrs	r3, r3, #21
 8002bf8:	4c3b      	ldr	r4, [pc, #236]	@ (8002ce8 <__aeabi_d2f+0xf8>)
 8002bfa:	0f45      	lsrs	r5, r0, #29
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	0a7f      	lsrs	r7, r7, #9
 8002c00:	1c5e      	adds	r6, r3, #1
 8002c02:	432f      	orrs	r7, r5
 8002c04:	9000      	str	r0, [sp, #0]
 8002c06:	9101      	str	r1, [sp, #4]
 8002c08:	0fca      	lsrs	r2, r1, #31
 8002c0a:	00c5      	lsls	r5, r0, #3
 8002c0c:	4226      	tst	r6, r4
 8002c0e:	d00b      	beq.n	8002c28 <__aeabi_d2f+0x38>
 8002c10:	4936      	ldr	r1, [pc, #216]	@ (8002cec <__aeabi_d2f+0xfc>)
 8002c12:	185c      	adds	r4, r3, r1
 8002c14:	2cfe      	cmp	r4, #254	@ 0xfe
 8002c16:	dd13      	ble.n	8002c40 <__aeabi_d2f+0x50>
 8002c18:	20ff      	movs	r0, #255	@ 0xff
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	05c0      	lsls	r0, r0, #23
 8002c1e:	4318      	orrs	r0, r3
 8002c20:	07d2      	lsls	r2, r2, #31
 8002c22:	4310      	orrs	r0, r2
 8002c24:	b003      	add	sp, #12
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <__aeabi_d2f+0x42>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e7f4      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002c32:	433d      	orrs	r5, r7
 8002c34:	d0f0      	beq.n	8002c18 <__aeabi_d2f+0x28>
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	03db      	lsls	r3, r3, #15
 8002c3a:	20ff      	movs	r0, #255	@ 0xff
 8002c3c:	433b      	orrs	r3, r7
 8002c3e:	e7ed      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002c40:	2c00      	cmp	r4, #0
 8002c42:	dd14      	ble.n	8002c6e <__aeabi_d2f+0x7e>
 8002c44:	9b00      	ldr	r3, [sp, #0]
 8002c46:	00ff      	lsls	r7, r7, #3
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	4183      	sbcs	r3, r0
 8002c4e:	0f69      	lsrs	r1, r5, #29
 8002c50:	433b      	orrs	r3, r7
 8002c52:	430b      	orrs	r3, r1
 8002c54:	0759      	lsls	r1, r3, #29
 8002c56:	d041      	beq.n	8002cdc <__aeabi_d2f+0xec>
 8002c58:	210f      	movs	r1, #15
 8002c5a:	4019      	ands	r1, r3
 8002c5c:	2904      	cmp	r1, #4
 8002c5e:	d028      	beq.n	8002cb2 <__aeabi_d2f+0xc2>
 8002c60:	3304      	adds	r3, #4
 8002c62:	0159      	lsls	r1, r3, #5
 8002c64:	d525      	bpl.n	8002cb2 <__aeabi_d2f+0xc2>
 8002c66:	3401      	adds	r4, #1
 8002c68:	2300      	movs	r3, #0
 8002c6a:	b2e0      	uxtb	r0, r4
 8002c6c:	e7d6      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002c6e:	0021      	movs	r1, r4
 8002c70:	3117      	adds	r1, #23
 8002c72:	dbdb      	blt.n	8002c2c <__aeabi_d2f+0x3c>
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	201e      	movs	r0, #30
 8002c78:	0409      	lsls	r1, r1, #16
 8002c7a:	4339      	orrs	r1, r7
 8002c7c:	1b00      	subs	r0, r0, r4
 8002c7e:	281f      	cmp	r0, #31
 8002c80:	dd1b      	ble.n	8002cba <__aeabi_d2f+0xca>
 8002c82:	2602      	movs	r6, #2
 8002c84:	4276      	negs	r6, r6
 8002c86:	1b34      	subs	r4, r6, r4
 8002c88:	000e      	movs	r6, r1
 8002c8a:	40e6      	lsrs	r6, r4
 8002c8c:	0034      	movs	r4, r6
 8002c8e:	2820      	cmp	r0, #32
 8002c90:	d004      	beq.n	8002c9c <__aeabi_d2f+0xac>
 8002c92:	4817      	ldr	r0, [pc, #92]	@ (8002cf0 <__aeabi_d2f+0x100>)
 8002c94:	4684      	mov	ip, r0
 8002c96:	4463      	add	r3, ip
 8002c98:	4099      	lsls	r1, r3
 8002c9a:	430d      	orrs	r5, r1
 8002c9c:	002b      	movs	r3, r5
 8002c9e:	1e59      	subs	r1, r3, #1
 8002ca0:	418b      	sbcs	r3, r1
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	0759      	lsls	r1, r3, #29
 8002ca6:	d015      	beq.n	8002cd4 <__aeabi_d2f+0xe4>
 8002ca8:	210f      	movs	r1, #15
 8002caa:	2400      	movs	r4, #0
 8002cac:	4019      	ands	r1, r3
 8002cae:	2904      	cmp	r1, #4
 8002cb0:	d117      	bne.n	8002ce2 <__aeabi_d2f+0xf2>
 8002cb2:	019b      	lsls	r3, r3, #6
 8002cb4:	0a5b      	lsrs	r3, r3, #9
 8002cb6:	b2e0      	uxtb	r0, r4
 8002cb8:	e7b0      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002cba:	4c0e      	ldr	r4, [pc, #56]	@ (8002cf4 <__aeabi_d2f+0x104>)
 8002cbc:	191c      	adds	r4, r3, r4
 8002cbe:	002b      	movs	r3, r5
 8002cc0:	40a5      	lsls	r5, r4
 8002cc2:	40c3      	lsrs	r3, r0
 8002cc4:	40a1      	lsls	r1, r4
 8002cc6:	1e68      	subs	r0, r5, #1
 8002cc8:	4185      	sbcs	r5, r0
 8002cca:	4329      	orrs	r1, r5
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	2400      	movs	r4, #0
 8002cd0:	0759      	lsls	r1, r3, #29
 8002cd2:	d1c1      	bne.n	8002c58 <__aeabi_d2f+0x68>
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	0a5b      	lsrs	r3, r3, #9
 8002cda:	e79f      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	b2e0      	uxtb	r0, r4
 8002ce0:	e79c      	b.n	8002c1c <__aeabi_d2f+0x2c>
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	e7e5      	b.n	8002cb2 <__aeabi_d2f+0xc2>
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	000007fe 	.word	0x000007fe
 8002cec:	fffffc80 	.word	0xfffffc80
 8002cf0:	fffffca2 	.word	0xfffffca2
 8002cf4:	fffffc82 	.word	0xfffffc82

08002cf8 <__clzsi2>:
 8002cf8:	211c      	movs	r1, #28
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d301      	bcc.n	8002d06 <__clzsi2+0xe>
 8002d02:	0c00      	lsrs	r0, r0, #16
 8002d04:	3910      	subs	r1, #16
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	d301      	bcc.n	8002d10 <__clzsi2+0x18>
 8002d0c:	0a00      	lsrs	r0, r0, #8
 8002d0e:	3908      	subs	r1, #8
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0x22>
 8002d16:	0900      	lsrs	r0, r0, #4
 8002d18:	3904      	subs	r1, #4
 8002d1a:	a202      	add	r2, pc, #8	@ (adr r2, 8002d24 <__clzsi2+0x2c>)
 8002d1c:	5c10      	ldrb	r0, [r2, r0]
 8002d1e:	1840      	adds	r0, r0, r1
 8002d20:	4770      	bx	lr
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	02020304 	.word	0x02020304
 8002d28:	01010101 	.word	0x01010101
	...

08002d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	240c      	movs	r4, #12
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	0018      	movs	r0, r3
 8002d40:	2314      	movs	r3, #20
 8002d42:	001a      	movs	r2, r3
 8002d44:	2100      	movs	r1, #0
 8002d46:	f006 fb16 	bl	8009376 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	03c9      	lsls	r1, r1, #15
 8002d54:	430a      	orrs	r2, r1
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	03db      	lsls	r3, r3, #15
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d6c:	2180      	movs	r1, #128	@ 0x80
 8002d6e:	0289      	lsls	r1, r1, #10
 8002d70:	430a      	orrs	r2, r1
 8002d72:	615a      	str	r2, [r3, #20]
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	02c9      	lsls	r1, r1, #11
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <MX_GPIO_Init+0xa4>)
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	02db      	lsls	r3, r3, #11
 8002d98:	4013      	ands	r3, r2
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <MX_GPIO_Init+0xa8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	2105      	movs	r1, #5
 8002da4:	0018      	movs	r0, r3
 8002da6:	f002 f917 	bl	8004fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002daa:	0021      	movs	r1, r4
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2205      	movs	r2, #5
 8002db0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2201      	movs	r2, #1
 8002db6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <MX_GPIO_Init+0xa8>)
 8002dc8:	0019      	movs	r1, r3
 8002dca:	0010      	movs	r0, r2
 8002dcc:	f001 ff8c 	bl	8004ce8 <HAL_GPIO_Init>

}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b009      	add	sp, #36	@ 0x24
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	48000400 	.word	0x48000400

08002de0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002de6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e58 <MX_I2C1_Init+0x78>)
 8002de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002dec:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <MX_I2C1_Init+0x7c>)
 8002dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002df0:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df6:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dfc:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e08:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f002 f8f9 	bl	8005014 <HAL_I2C_Init>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e26:	f001 fbe8 	bl	80045fa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f002 fff4 	bl	8005e1c <HAL_I2CEx_ConfigAnalogFilter>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e38:	f001 fbdf 	bl	80045fa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <MX_I2C1_Init+0x74>)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	0018      	movs	r0, r3
 8002e42:	f003 f837 	bl	8005eb4 <HAL_I2CEx_ConfigDigitalFilter>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e4a:	f001 fbd6 	bl	80045fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200001f0 	.word	0x200001f0
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	2000090e 	.word	0x2000090e

08002e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	@ 0x2c
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	2414      	movs	r4, #20
 8002e6a:	193b      	adds	r3, r7, r4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2314      	movs	r3, #20
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f006 fa7f 	bl	8009376 <memset>
  if(i2cHandle->Instance==I2C1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <HAL_I2C_MspInit+0x94>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d133      	bne.n	8002eea <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	0289      	lsls	r1, r1, #10
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	029b      	lsls	r3, r3, #10
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e9e:	193b      	adds	r3, r7, r4
 8002ea0:	22c0      	movs	r2, #192	@ 0xc0
 8002ea2:	00d2      	lsls	r2, r2, #3
 8002ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea6:	0021      	movs	r1, r4
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	2212      	movs	r2, #18
 8002eac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	187a      	adds	r2, r7, r1
 8002ec2:	2390      	movs	r3, #144	@ 0x90
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f001 ff0d 	bl	8004ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002ed4:	2180      	movs	r1, #128	@ 0x80
 8002ed6:	0389      	lsls	r1, r1, #14
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_I2C_MspInit+0x98>)
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	039b      	lsls	r3, r3, #14
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b00b      	add	sp, #44	@ 0x2c
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	40005400 	.word	0x40005400
 8002ef8:	40021000 	.word	0x40021000

08002efc <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	0008      	movs	r0, r1
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	0019      	movs	r1, r3
 8002f0a:	230b      	movs	r3, #11
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	1c02      	adds	r2, r0, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	2308      	movs	r3, #8
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	1c0a      	adds	r2, r1, #0
 8002f18:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <lsm6dsox_read_reg+0x2a>
  {
    return -1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	425b      	negs	r3, r3
 8002f24:	e00f      	b.n	8002f46 <lsm6dsox_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685c      	ldr	r4, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68d8      	ldr	r0, [r3, #12]
 8002f2e:	2308      	movs	r3, #8
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	881d      	ldrh	r5, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	230b      	movs	r3, #11
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	7819      	ldrb	r1, [r3, #0]
 8002f3c:	002b      	movs	r3, r5
 8002f3e:	47a0      	blx	r4
 8002f40:	0003      	movs	r3, r0
 8002f42:	617b      	str	r3, [r7, #20]

  return ret;
 8002f44:	697b      	ldr	r3, [r7, #20]
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b006      	add	sp, #24
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}

08002f4e <lsm6dsox_write_reg>:
  *
  */
int32_t __weak lsm6dsox_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8002f4e:	b5b0      	push	{r4, r5, r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	0008      	movs	r0, r1
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	1c02      	adds	r2, r0, #0
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	2308      	movs	r3, #8
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	1c0a      	adds	r2, r1, #0
 8002f6a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <lsm6dsox_write_reg+0x2a>
  {
    return -1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	425b      	negs	r3, r3
 8002f76:	e00f      	b.n	8002f98 <lsm6dsox_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681c      	ldr	r4, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68d8      	ldr	r0, [r3, #12]
 8002f80:	2308      	movs	r3, #8
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	230b      	movs	r3, #11
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	7819      	ldrb	r1, [r3, #0]
 8002f8e:	002b      	movs	r3, r5
 8002f90:	47a0      	blx	r4
 8002f92:	0003      	movs	r3, r0
 8002f94:	617b      	str	r3, [r7, #20]

  return ret;
 8002f96:	697b      	ldr	r3, [r7, #20]
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b006      	add	sp, #24
 8002f9e:	bdb0      	pop	{r4, r5, r7, pc}

08002fa0 <lsm6dsox_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dsox_from_fs2_to_mg(int16_t lsb)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	1dbb      	adds	r3, r7, #6
 8002faa:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	2200      	movs	r2, #0
 8002fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7fd fecc 	bl	8000d50 <__aeabi_i2f>
 8002fb8:	1c03      	adds	r3, r0, #0
 8002fba:	4904      	ldr	r1, [pc, #16]	@ (8002fcc <lsm6dsox_from_fs2_to_mg+0x2c>)
 8002fbc:	1c18      	adds	r0, r3, #0
 8002fbe:	f7fd fd89 	bl	8000ad4 <__aeabi_fmul>
 8002fc2:	1c03      	adds	r3, r0, #0
}
 8002fc4:	1c18      	adds	r0, r3, #0
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	3d79db23 	.word	0x3d79db23

08002fd0 <lsm6dsox_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dsox_from_fs2000_to_mdps(int16_t lsb)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 70.0f;
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd feb4 	bl	8000d50 <__aeabi_i2f>
 8002fe8:	1c03      	adds	r3, r0, #0
 8002fea:	4904      	ldr	r1, [pc, #16]	@ (8002ffc <lsm6dsox_from_fs2000_to_mdps+0x2c>)
 8002fec:	1c18      	adds	r0, r3, #0
 8002fee:	f7fd fd71 	bl	8000ad4 <__aeabi_fmul>
 8002ff2:	1c03      	adds	r3, r0, #0
}
 8002ff4:	1c18      	adds	r0, r3, #0
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	428c0000 	.word	0x428c0000

08003000 <lsm6dsox_from_lsb_to_celsius>:

float_t lsm6dsox_from_lsb_to_celsius(int16_t lsb)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	0002      	movs	r2, r0
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	2200      	movs	r2, #0
 8003010:	5e9b      	ldrsh	r3, [r3, r2]
 8003012:	0018      	movs	r0, r3
 8003014:	f7fd fe9c 	bl	8000d50 <__aeabi_i2f>
 8003018:	1c03      	adds	r3, r0, #0
 800301a:	2187      	movs	r1, #135	@ 0x87
 800301c:	05c9      	lsls	r1, r1, #23
 800301e:	1c18      	adds	r0, r3, #0
 8003020:	f7fd fc38 	bl	8000894 <__aeabi_fdiv>
 8003024:	1c03      	adds	r3, r0, #0
 8003026:	4904      	ldr	r1, [pc, #16]	@ (8003038 <lsm6dsox_from_lsb_to_celsius+0x38>)
 8003028:	1c18      	adds	r0, r3, #0
 800302a:	f7fd faa9 	bl	8000580 <__aeabi_fadd>
 800302e:	1c03      	adds	r3, r0, #0
}
 8003030:	1c18      	adds	r0, r3, #0
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}
 8003038:	41c80000 	.word	0x41c80000

0800303c <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	000a      	movs	r2, r1
 8003046:	1cfb      	adds	r3, r7, #3
 8003048:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800304a:	2408      	movs	r4, #8
 800304c:	193a      	adds	r2, r7, r4
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	2301      	movs	r3, #1
 8003052:	2110      	movs	r1, #16
 8003054:	f7ff ff52 	bl	8002efc <lsm6dsox_read_reg>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d117      	bne.n	8003092 <lsm6dsox_xl_full_scale_set+0x56>
  {
    reg.fs_xl = (uint8_t) val;
 8003062:	1cfb      	adds	r3, r7, #3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2203      	movs	r2, #3
 8003068:	4013      	ands	r3, r2
 800306a:	b2da      	uxtb	r2, r3
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2103      	movs	r1, #3
 8003070:	400a      	ands	r2, r1
 8003072:	0090      	lsls	r0, r2, #2
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	210c      	movs	r1, #12
 8003078:	438a      	bics	r2, r1
 800307a:	1c11      	adds	r1, r2, #0
 800307c:	1c02      	adds	r2, r0, #0
 800307e:	430a      	orrs	r2, r1
 8003080:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003082:	193a      	adds	r2, r7, r4
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	2301      	movs	r3, #1
 8003088:	2110      	movs	r1, #16
 800308a:	f7ff ff60 	bl	8002f4e <lsm6dsox_write_reg>
 800308e:	0003      	movs	r3, r0
 8003090:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b005      	add	sp, #20
 800309a:	bd90      	pop	{r4, r7, pc}

0800309c <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	000a      	movs	r2, r1
 80030a6:	1cfb      	adds	r3, r7, #3
 80030a8:	701a      	strb	r2, [r3, #0]
  lsm6dsox_odr_xl_t odr_xl =  val;
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	1cfa      	adds	r2, r7, #3
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	701a      	strb	r2, [r3, #0]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80030b4:	2414      	movs	r4, #20
 80030b6:	193a      	adds	r2, r7, r4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 febe 	bl	8003e3e <lsm6dsox_fsm_enable_get>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]

  if (ret == 0)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d000      	beq.n	80030ce <lsm6dsox_xl_data_rate_set+0x32>
 80030cc:	e105      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80030ce:	0021      	movs	r1, r4
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	07db      	lsls	r3, r3, #31
 80030d6:	0fdb      	lsrs	r3, r3, #31
 80030d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	079b      	lsls	r3, r3, #30
 80030e0:	0fdb      	lsrs	r3, r3, #31
 80030e2:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80030e4:	4313      	orrs	r3, r2
 80030e6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	075b      	lsls	r3, r3, #29
 80030ee:	0fdb      	lsrs	r3, r3, #31
 80030f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	071b      	lsls	r3, r3, #28
 80030fc:	0fdb      	lsrs	r3, r3, #31
 80030fe:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003100:	4313      	orrs	r3, r2
 8003102:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003104:	187b      	adds	r3, r7, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	06db      	lsls	r3, r3, #27
 800310a:	0fdb      	lsrs	r3, r3, #31
 800310c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800310e:	4313      	orrs	r3, r2
 8003110:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003112:	187b      	adds	r3, r7, r1
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	069b      	lsls	r3, r3, #26
 8003118:	0fdb      	lsrs	r3, r3, #31
 800311a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800311c:	4313      	orrs	r3, r2
 800311e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003120:	187b      	adds	r3, r7, r1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	065b      	lsls	r3, r3, #25
 8003126:	0fdb      	lsrs	r3, r3, #31
 8003128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800312a:	4313      	orrs	r3, r2
 800312c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800312e:	187b      	adds	r3, r7, r1
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	0fdb      	lsrs	r3, r3, #31
 8003136:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003138:	4313      	orrs	r3, r2
 800313a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800313c:	187b      	adds	r3, r7, r1
 800313e:	785b      	ldrb	r3, [r3, #1]
 8003140:	07db      	lsls	r3, r3, #31
 8003142:	0fdb      	lsrs	r3, r3, #31
 8003144:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003146:	4313      	orrs	r3, r2
 8003148:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800314a:	187b      	adds	r3, r7, r1
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	079b      	lsls	r3, r3, #30
 8003150:	0fdb      	lsrs	r3, r3, #31
 8003152:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003154:	4313      	orrs	r3, r2
 8003156:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003158:	187b      	adds	r3, r7, r1
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	075b      	lsls	r3, r3, #29
 800315e:	0fdb      	lsrs	r3, r3, #31
 8003160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003162:	4313      	orrs	r3, r2
 8003164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003166:	187b      	adds	r3, r7, r1
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	071b      	lsls	r3, r3, #28
 800316c:	0fdb      	lsrs	r3, r3, #31
 800316e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003170:	4313      	orrs	r3, r2
 8003172:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003174:	187b      	adds	r3, r7, r1
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	06db      	lsls	r3, r3, #27
 800317a:	0fdb      	lsrs	r3, r3, #31
 800317c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800317e:	4313      	orrs	r3, r2
 8003180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003182:	187b      	adds	r3, r7, r1
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	0fdb      	lsrs	r3, r3, #31
 800318a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800318c:	4313      	orrs	r3, r2
 800318e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003190:	187b      	adds	r3, r7, r1
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	065b      	lsls	r3, r3, #25
 8003196:	0fdb      	lsrs	r3, r3, #31
 8003198:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800319a:	4313      	orrs	r3, r2
 800319c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	0fdb      	lsrs	r3, r3, #31
 80031a6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d000      	beq.n	80031b2 <lsm6dsox_xl_data_rate_set+0x116>
 80031b0:	e093      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 80031b2:	2413      	movs	r4, #19
 80031b4:	193a      	adds	r2, r7, r4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fe65 	bl	8003e8a <lsm6dsox_fsm_data_rate_get>
 80031c0:	0003      	movs	r3, r0
 80031c2:	61bb      	str	r3, [r7, #24]

      if (ret == 0)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d000      	beq.n	80031cc <lsm6dsox_xl_data_rate_set+0x130>
 80031ca:	e086      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80031cc:	193b      	adds	r3, r7, r4
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d052      	beq.n	800327a <lsm6dsox_xl_data_rate_set+0x1de>
 80031d4:	dd00      	ble.n	80031d8 <lsm6dsox_xl_data_rate_set+0x13c>
 80031d6:	e07a      	b.n	80032ce <lsm6dsox_xl_data_rate_set+0x232>
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d02d      	beq.n	8003238 <lsm6dsox_xl_data_rate_set+0x19c>
 80031dc:	dd00      	ble.n	80031e0 <lsm6dsox_xl_data_rate_set+0x144>
 80031de:	e076      	b.n	80032ce <lsm6dsox_xl_data_rate_set+0x232>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <lsm6dsox_xl_data_rate_set+0x14e>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d00f      	beq.n	8003208 <lsm6dsox_xl_data_rate_set+0x16c>
 80031e8:	e071      	b.n	80032ce <lsm6dsox_xl_data_rate_set+0x232>
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80031ea:	1cfb      	adds	r3, r7, #3
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <lsm6dsox_xl_data_rate_set+0x160>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80031f2:	231f      	movs	r3, #31
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80031fa:	e06e      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
              odr_xl = val;
 80031fc:	231f      	movs	r3, #31
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	1cfa      	adds	r2, r7, #3
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]
            break;
 8003206:	e068      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003208:	1cfb      	adds	r3, r7, #3
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003210:	231f      	movs	r3, #31
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8003218:	e05f      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800321a:	1cfb      	adds	r3, r7, #3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d104      	bne.n	800322c <lsm6dsox_xl_data_rate_set+0x190>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003222:	231f      	movs	r3, #31
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
            break;
 800322a:	e056      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
              odr_xl = val;
 800322c:	231f      	movs	r3, #31
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	1cfa      	adds	r2, r7, #3
 8003232:	7812      	ldrb	r2, [r2, #0]
 8003234:	701a      	strb	r2, [r3, #0]
            break;
 8003236:	e050      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003238:	1cfb      	adds	r3, r7, #3
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <lsm6dsox_xl_data_rate_set+0x1ae>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003240:	231f      	movs	r3, #31
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2203      	movs	r2, #3
 8003246:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8003248:	e047      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800324a:	1cfb      	adds	r3, r7, #3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d104      	bne.n	800325c <lsm6dsox_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2203      	movs	r2, #3
 8003258:	701a      	strb	r2, [r3, #0]
            break;
 800325a:	e03e      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800325c:	1cfb      	adds	r3, r7, #3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d104      	bne.n	800326e <lsm6dsox_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003264:	231f      	movs	r3, #31
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
            break;
 800326c:	e035      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
              odr_xl = val;
 800326e:	231f      	movs	r3, #31
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	1cfa      	adds	r2, r7, #3
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	701a      	strb	r2, [r3, #0]
            break;
 8003278:	e02f      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800327a:	1cfb      	adds	r3, r7, #3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <lsm6dsox_xl_data_rate_set+0x1f0>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003282:	231f      	movs	r3, #31
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2204      	movs	r2, #4
 8003288:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 800328a:	e026      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800328c:	1cfb      	adds	r3, r7, #3
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d104      	bne.n	800329e <lsm6dsox_xl_data_rate_set+0x202>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003294:	231f      	movs	r3, #31
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2204      	movs	r2, #4
 800329a:	701a      	strb	r2, [r3, #0]
            break;
 800329c:	e01d      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800329e:	1cfb      	adds	r3, r7, #3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d104      	bne.n	80032b0 <lsm6dsox_xl_data_rate_set+0x214>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80032a6:	231f      	movs	r3, #31
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2204      	movs	r2, #4
 80032ac:	701a      	strb	r2, [r3, #0]
            break;
 80032ae:	e014      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 80032b0:	1cfb      	adds	r3, r7, #3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d104      	bne.n	80032c2 <lsm6dsox_xl_data_rate_set+0x226>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80032b8:	231f      	movs	r3, #31
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2204      	movs	r2, #4
 80032be:	701a      	strb	r2, [r3, #0]
            break;
 80032c0:	e00b      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>
              odr_xl = val;
 80032c2:	231f      	movs	r3, #31
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	1cfa      	adds	r2, r7, #3
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	701a      	strb	r2, [r3, #0]
            break;
 80032cc:	e005      	b.n	80032da <lsm6dsox_xl_data_rate_set+0x23e>

          default:
            odr_xl = val;
 80032ce:	231f      	movs	r3, #31
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	1cfa      	adds	r2, r7, #3
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	701a      	strb	r2, [r3, #0]
            break;
 80032d8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 80032da:	2010      	movs	r0, #16
 80032dc:	183b      	adds	r3, r7, r0
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	2108      	movs	r1, #8
 80032e2:	438a      	bics	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]

  if (ret == 0)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d000      	beq.n	80032ee <lsm6dsox_xl_data_rate_set+0x252>
 80032ec:	e0a2      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80032ee:	0004      	movs	r4, r0
 80032f0:	183a      	adds	r2, r7, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fe5f 	bl	8003fba <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 80032fc:	193b      	adds	r3, r7, r4
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	4013      	ands	r3, r2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d100      	bne.n	800330c <lsm6dsox_xl_data_rate_set+0x270>
 800330a:	e093      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800330c:	240f      	movs	r4, #15
 800330e:	193a      	adds	r2, r7, r4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0011      	movs	r1, r2
 8003314:	0018      	movs	r0, r3
 8003316:	f000 fe04 	bl	8003f22 <lsm6dsox_mlc_data_rate_get>
 800331a:	0003      	movs	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]

      if (ret == 0)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d000      	beq.n	8003326 <lsm6dsox_xl_data_rate_set+0x28a>
 8003324:	e086      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
      {
        switch (mlc_odr)
 8003326:	193b      	adds	r3, r7, r4
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d052      	beq.n	80033d4 <lsm6dsox_xl_data_rate_set+0x338>
 800332e:	dd00      	ble.n	8003332 <lsm6dsox_xl_data_rate_set+0x296>
 8003330:	e07a      	b.n	8003428 <lsm6dsox_xl_data_rate_set+0x38c>
 8003332:	2b02      	cmp	r3, #2
 8003334:	d02d      	beq.n	8003392 <lsm6dsox_xl_data_rate_set+0x2f6>
 8003336:	dd00      	ble.n	800333a <lsm6dsox_xl_data_rate_set+0x29e>
 8003338:	e076      	b.n	8003428 <lsm6dsox_xl_data_rate_set+0x38c>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <lsm6dsox_xl_data_rate_set+0x2a8>
 800333e:	2b01      	cmp	r3, #1
 8003340:	d00f      	beq.n	8003362 <lsm6dsox_xl_data_rate_set+0x2c6>
 8003342:	e071      	b.n	8003428 <lsm6dsox_xl_data_rate_set+0x38c>
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003344:	1cfb      	adds	r3, r7, #3
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <lsm6dsox_xl_data_rate_set+0x2ba>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800334c:	231f      	movs	r3, #31
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8003354:	e06e      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
              odr_xl = val;
 8003356:	231f      	movs	r3, #31
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	1cfa      	adds	r2, r7, #3
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	701a      	strb	r2, [r3, #0]
            break;
 8003360:	e068      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003362:	1cfb      	adds	r3, r7, #3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <lsm6dsox_xl_data_rate_set+0x2d8>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800336a:	231f      	movs	r3, #31
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8003372:	e05f      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8003374:	1cfb      	adds	r3, r7, #3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d104      	bne.n	8003386 <lsm6dsox_xl_data_rate_set+0x2ea>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800337c:	231f      	movs	r3, #31
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2202      	movs	r2, #2
 8003382:	701a      	strb	r2, [r3, #0]
            break;
 8003384:	e056      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
              odr_xl = val;
 8003386:	231f      	movs	r3, #31
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	1cfa      	adds	r2, r7, #3
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
            break;
 8003390:	e050      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003392:	1cfb      	adds	r3, r7, #3
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d104      	bne.n	80033a4 <lsm6dsox_xl_data_rate_set+0x308>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800339a:	231f      	movs	r3, #31
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80033a2:	e047      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80033a4:	1cfb      	adds	r3, r7, #3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d104      	bne.n	80033b6 <lsm6dsox_xl_data_rate_set+0x31a>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80033ac:	231f      	movs	r3, #31
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	2203      	movs	r2, #3
 80033b2:	701a      	strb	r2, [r3, #0]
            break;
 80033b4:	e03e      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80033b6:	1cfb      	adds	r3, r7, #3
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d104      	bne.n	80033c8 <lsm6dsox_xl_data_rate_set+0x32c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80033be:	231f      	movs	r3, #31
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	2203      	movs	r2, #3
 80033c4:	701a      	strb	r2, [r3, #0]
            break;
 80033c6:	e035      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
              odr_xl = val;
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	1cfa      	adds	r2, r7, #3
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
            break;
 80033d2:	e02f      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80033d4:	1cfb      	adds	r3, r7, #3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <lsm6dsox_xl_data_rate_set+0x34a>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80033dc:	231f      	movs	r3, #31
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2204      	movs	r2, #4
 80033e2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80033e4:	e026      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80033e6:	1cfb      	adds	r3, r7, #3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d104      	bne.n	80033f8 <lsm6dsox_xl_data_rate_set+0x35c>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80033ee:	231f      	movs	r3, #31
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2204      	movs	r2, #4
 80033f4:	701a      	strb	r2, [r3, #0]
            break;
 80033f6:	e01d      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80033f8:	1cfb      	adds	r3, r7, #3
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d104      	bne.n	800340a <lsm6dsox_xl_data_rate_set+0x36e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003400:	231f      	movs	r3, #31
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2204      	movs	r2, #4
 8003406:	701a      	strb	r2, [r3, #0]
            break;
 8003408:	e014      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 800340a:	1cfb      	adds	r3, r7, #3
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d104      	bne.n	800341c <lsm6dsox_xl_data_rate_set+0x380>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003412:	231f      	movs	r3, #31
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	2204      	movs	r2, #4
 8003418:	701a      	strb	r2, [r3, #0]
            break;
 800341a:	e00b      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>
              odr_xl = val;
 800341c:	231f      	movs	r3, #31
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	1cfa      	adds	r2, r7, #3
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	701a      	strb	r2, [r3, #0]
            break;
 8003426:	e005      	b.n	8003434 <lsm6dsox_xl_data_rate_set+0x398>

          default:
            odr_xl = val;
 8003428:	231f      	movs	r3, #31
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	1cfa      	adds	r2, r7, #3
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	701a      	strb	r2, [r3, #0]
            break;
 8003432:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <lsm6dsox_xl_data_rate_set+0x3b0>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800343a:	230c      	movs	r3, #12
 800343c:	18fa      	adds	r2, r7, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	2301      	movs	r3, #1
 8003442:	2110      	movs	r1, #16
 8003444:	f7ff fd5a 	bl	8002efc <lsm6dsox_read_reg>
 8003448:	0003      	movs	r3, r0
 800344a:	61bb      	str	r3, [r7, #24]
  }

  if (ret == 0)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d117      	bne.n	8003482 <lsm6dsox_xl_data_rate_set+0x3e6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8003452:	231f      	movs	r3, #31
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	220f      	movs	r2, #15
 800345a:	4013      	ands	r3, r2
 800345c:	b2da      	uxtb	r2, r3
 800345e:	240c      	movs	r4, #12
 8003460:	193b      	adds	r3, r7, r4
 8003462:	0110      	lsls	r0, r2, #4
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	210f      	movs	r1, #15
 8003468:	400a      	ands	r2, r1
 800346a:	1c11      	adds	r1, r2, #0
 800346c:	1c02      	adds	r2, r0, #0
 800346e:	430a      	orrs	r2, r1
 8003470:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003472:	193a      	adds	r2, r7, r4
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	2301      	movs	r3, #1
 8003478:	2110      	movs	r1, #16
 800347a:	f7ff fd68 	bl	8002f4e <lsm6dsox_write_reg>
 800347e:	0003      	movs	r3, r0
 8003480:	61bb      	str	r3, [r7, #24]
  }

  return ret;
 8003482:	69bb      	ldr	r3, [r7, #24]
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b009      	add	sp, #36	@ 0x24
 800348a:	bd90      	pop	{r4, r7, pc}

0800348c <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	000a      	movs	r2, r1
 8003496:	1cfb      	adds	r3, r7, #3
 8003498:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800349a:	2408      	movs	r4, #8
 800349c:	193a      	adds	r2, r7, r4
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	2301      	movs	r3, #1
 80034a2:	2111      	movs	r1, #17
 80034a4:	f7ff fd2a 	bl	8002efc <lsm6dsox_read_reg>
 80034a8:	0003      	movs	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d117      	bne.n	80034e2 <lsm6dsox_gy_full_scale_set+0x56>
  {
    reg.fs_g = (uint8_t) val;
 80034b2:	1cfb      	adds	r3, r7, #3
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2207      	movs	r2, #7
 80034b8:	4013      	ands	r3, r2
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	2107      	movs	r1, #7
 80034c0:	400a      	ands	r2, r1
 80034c2:	1890      	adds	r0, r2, r2
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	210e      	movs	r1, #14
 80034c8:	438a      	bics	r2, r1
 80034ca:	1c11      	adds	r1, r2, #0
 80034cc:	1c02      	adds	r2, r0, #0
 80034ce:	430a      	orrs	r2, r1
 80034d0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80034d2:	193a      	adds	r2, r7, r4
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	2301      	movs	r3, #1
 80034d8:	2111      	movs	r1, #17
 80034da:	f7ff fd38 	bl	8002f4e <lsm6dsox_write_reg>
 80034de:	0003      	movs	r3, r0
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b005      	add	sp, #20
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b089      	sub	sp, #36	@ 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	000a      	movs	r2, r1
 80034f6:	1cfb      	adds	r3, r7, #3
 80034f8:	701a      	strb	r2, [r3, #0]
  lsm6dsox_odr_g_t odr_gy =  val;
 80034fa:	231f      	movs	r3, #31
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	1cfa      	adds	r2, r7, #3
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	701a      	strb	r2, [r3, #0]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8003504:	2414      	movs	r4, #20
 8003506:	193a      	adds	r2, r7, r4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fc96 	bl	8003e3e <lsm6dsox_fsm_enable_get>
 8003512:	0003      	movs	r3, r0
 8003514:	61bb      	str	r3, [r7, #24]

  if (ret == 0)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d000      	beq.n	800351e <lsm6dsox_gy_data_rate_set+0x32>
 800351c:	e105      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	07db      	lsls	r3, r3, #31
 8003526:	0fdb      	lsrs	r3, r3, #31
 8003528:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800352a:	187b      	adds	r3, r7, r1
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	079b      	lsls	r3, r3, #30
 8003530:	0fdb      	lsrs	r3, r3, #31
 8003532:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003534:	4313      	orrs	r3, r2
 8003536:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003538:	187b      	adds	r3, r7, r1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	075b      	lsls	r3, r3, #29
 800353e:	0fdb      	lsrs	r3, r3, #31
 8003540:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003542:	4313      	orrs	r3, r2
 8003544:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003546:	187b      	adds	r3, r7, r1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	071b      	lsls	r3, r3, #28
 800354c:	0fdb      	lsrs	r3, r3, #31
 800354e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003550:	4313      	orrs	r3, r2
 8003552:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003554:	187b      	adds	r3, r7, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	06db      	lsls	r3, r3, #27
 800355a:	0fdb      	lsrs	r3, r3, #31
 800355c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800355e:	4313      	orrs	r3, r2
 8003560:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003562:	187b      	adds	r3, r7, r1
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	0fdb      	lsrs	r3, r3, #31
 800356a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800356c:	4313      	orrs	r3, r2
 800356e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003570:	187b      	adds	r3, r7, r1
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	065b      	lsls	r3, r3, #25
 8003576:	0fdb      	lsrs	r3, r3, #31
 8003578:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800357a:	4313      	orrs	r3, r2
 800357c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800357e:	187b      	adds	r3, r7, r1
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	0fdb      	lsrs	r3, r3, #31
 8003586:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003588:	4313      	orrs	r3, r2
 800358a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800358c:	187b      	adds	r3, r7, r1
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	07db      	lsls	r3, r3, #31
 8003592:	0fdb      	lsrs	r3, r3, #31
 8003594:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003596:	4313      	orrs	r3, r2
 8003598:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800359a:	187b      	adds	r3, r7, r1
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	079b      	lsls	r3, r3, #30
 80035a0:	0fdb      	lsrs	r3, r3, #31
 80035a2:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	075b      	lsls	r3, r3, #29
 80035ae:	0fdb      	lsrs	r3, r3, #31
 80035b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	785b      	ldrb	r3, [r3, #1]
 80035ba:	071b      	lsls	r3, r3, #28
 80035bc:	0fdb      	lsrs	r3, r3, #31
 80035be:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80035c4:	187b      	adds	r3, r7, r1
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	06db      	lsls	r3, r3, #27
 80035ca:	0fdb      	lsrs	r3, r3, #31
 80035cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	069b      	lsls	r3, r3, #26
 80035d8:	0fdb      	lsrs	r3, r3, #31
 80035da:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80035dc:	4313      	orrs	r3, r2
 80035de:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	065b      	lsls	r3, r3, #25
 80035e6:	0fdb      	lsrs	r3, r3, #31
 80035e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	0fdb      	lsrs	r3, r3, #31
 80035f6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d000      	beq.n	8003602 <lsm6dsox_gy_data_rate_set+0x116>
 8003600:	e093      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003602:	2413      	movs	r4, #19
 8003604:	193a      	adds	r2, r7, r4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fc3d 	bl	8003e8a <lsm6dsox_fsm_data_rate_get>
 8003610:	0003      	movs	r3, r0
 8003612:	61bb      	str	r3, [r7, #24]

      if (ret == 0)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d000      	beq.n	800361c <lsm6dsox_gy_data_rate_set+0x130>
 800361a:	e086      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 800361c:	193b      	adds	r3, r7, r4
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d052      	beq.n	80036ca <lsm6dsox_gy_data_rate_set+0x1de>
 8003624:	dd00      	ble.n	8003628 <lsm6dsox_gy_data_rate_set+0x13c>
 8003626:	e07a      	b.n	800371e <lsm6dsox_gy_data_rate_set+0x232>
 8003628:	2b02      	cmp	r3, #2
 800362a:	d02d      	beq.n	8003688 <lsm6dsox_gy_data_rate_set+0x19c>
 800362c:	dd00      	ble.n	8003630 <lsm6dsox_gy_data_rate_set+0x144>
 800362e:	e076      	b.n	800371e <lsm6dsox_gy_data_rate_set+0x232>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <lsm6dsox_gy_data_rate_set+0x14e>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d00f      	beq.n	8003658 <lsm6dsox_gy_data_rate_set+0x16c>
 8003638:	e071      	b.n	800371e <lsm6dsox_gy_data_rate_set+0x232>
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800363a:	1cfb      	adds	r3, r7, #3
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <lsm6dsox_gy_data_rate_set+0x160>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 8003642:	231f      	movs	r3, #31
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 800364a:	e06e      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
              odr_gy = val;
 800364c:	231f      	movs	r3, #31
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	1cfa      	adds	r2, r7, #3
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	701a      	strb	r2, [r3, #0]
            break;
 8003656:	e068      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003658:	1cfb      	adds	r3, r7, #3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003660:	231f      	movs	r3, #31
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8003668:	e05f      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800366a:	1cfb      	adds	r3, r7, #3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d104      	bne.n	800367c <lsm6dsox_gy_data_rate_set+0x190>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003672:	231f      	movs	r3, #31
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]
            break;
 800367a:	e056      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
              odr_gy = val;
 800367c:	231f      	movs	r3, #31
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	1cfa      	adds	r2, r7, #3
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	701a      	strb	r2, [r3, #0]
            break;
 8003686:	e050      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003688:	1cfb      	adds	r3, r7, #3
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <lsm6dsox_gy_data_rate_set+0x1ae>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003690:	231f      	movs	r3, #31
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2203      	movs	r2, #3
 8003696:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8003698:	e047      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800369a:	1cfb      	adds	r3, r7, #3
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d104      	bne.n	80036ac <lsm6dsox_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80036a2:	231f      	movs	r3, #31
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2203      	movs	r2, #3
 80036a8:	701a      	strb	r2, [r3, #0]
            break;
 80036aa:	e03e      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80036ac:	1cfb      	adds	r3, r7, #3
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d104      	bne.n	80036be <lsm6dsox_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80036b4:	231f      	movs	r3, #31
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2203      	movs	r2, #3
 80036ba:	701a      	strb	r2, [r3, #0]
            break;
 80036bc:	e035      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
              odr_gy = val;
 80036be:	231f      	movs	r3, #31
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	1cfa      	adds	r2, r7, #3
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	701a      	strb	r2, [r3, #0]
            break;
 80036c8:	e02f      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80036ca:	1cfb      	adds	r3, r7, #3
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <lsm6dsox_gy_data_rate_set+0x1f0>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2204      	movs	r2, #4
 80036d8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80036da:	e026      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80036dc:	1cfb      	adds	r3, r7, #3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d104      	bne.n	80036ee <lsm6dsox_gy_data_rate_set+0x202>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80036e4:	231f      	movs	r3, #31
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2204      	movs	r2, #4
 80036ea:	701a      	strb	r2, [r3, #0]
            break;
 80036ec:	e01d      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80036ee:	1cfb      	adds	r3, r7, #3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d104      	bne.n	8003700 <lsm6dsox_gy_data_rate_set+0x214>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80036f6:	231f      	movs	r3, #31
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2204      	movs	r2, #4
 80036fc:	701a      	strb	r2, [r3, #0]
            break;
 80036fe:	e014      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 8003700:	1cfb      	adds	r3, r7, #3
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d104      	bne.n	8003712 <lsm6dsox_gy_data_rate_set+0x226>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003708:	231f      	movs	r3, #31
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
            break;
 8003710:	e00b      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>
              odr_gy = val;
 8003712:	231f      	movs	r3, #31
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	1cfa      	adds	r2, r7, #3
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	701a      	strb	r2, [r3, #0]
            break;
 800371c:	e005      	b.n	800372a <lsm6dsox_gy_data_rate_set+0x23e>

          default:
            odr_gy = val;
 800371e:	231f      	movs	r3, #31
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	1cfa      	adds	r2, r7, #3
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	701a      	strb	r2, [r3, #0]
            break;
 8003728:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 800372a:	2010      	movs	r0, #16
 800372c:	183b      	adds	r3, r7, r0
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	2108      	movs	r1, #8
 8003732:	438a      	bics	r2, r1
 8003734:	701a      	strb	r2, [r3, #0]

  if (ret == 0)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d000      	beq.n	800373e <lsm6dsox_gy_data_rate_set+0x252>
 800373c:	e0a4      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800373e:	0004      	movs	r4, r0
 8003740:	183a      	adds	r2, r7, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0011      	movs	r1, r2
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fc37 	bl	8003fba <lsm6dsox_embedded_sens_get>
 800374c:	0003      	movs	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003750:	193b      	adds	r3, r7, r4
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2208      	movs	r2, #8
 8003756:	4013      	ands	r3, r2
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d100      	bne.n	8003760 <lsm6dsox_gy_data_rate_set+0x274>
 800375e:	e093      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003760:	240f      	movs	r4, #15
 8003762:	193a      	adds	r2, r7, r4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fbda 	bl	8003f22 <lsm6dsox_mlc_data_rate_get>
 800376e:	0003      	movs	r3, r0
 8003770:	61bb      	str	r3, [r7, #24]

      if (ret == 0)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d000      	beq.n	800377a <lsm6dsox_gy_data_rate_set+0x28e>
 8003778:	e086      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
      {
        switch (mlc_odr)
 800377a:	193b      	adds	r3, r7, r4
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d052      	beq.n	8003828 <lsm6dsox_gy_data_rate_set+0x33c>
 8003782:	dd00      	ble.n	8003786 <lsm6dsox_gy_data_rate_set+0x29a>
 8003784:	e07a      	b.n	800387c <lsm6dsox_gy_data_rate_set+0x390>
 8003786:	2b02      	cmp	r3, #2
 8003788:	d02d      	beq.n	80037e6 <lsm6dsox_gy_data_rate_set+0x2fa>
 800378a:	dd00      	ble.n	800378e <lsm6dsox_gy_data_rate_set+0x2a2>
 800378c:	e076      	b.n	800387c <lsm6dsox_gy_data_rate_set+0x390>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <lsm6dsox_gy_data_rate_set+0x2ac>
 8003792:	2b01      	cmp	r3, #1
 8003794:	d00f      	beq.n	80037b6 <lsm6dsox_gy_data_rate_set+0x2ca>
 8003796:	e071      	b.n	800387c <lsm6dsox_gy_data_rate_set+0x390>
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003798:	1cfb      	adds	r3, r7, #3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <lsm6dsox_gy_data_rate_set+0x2be>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80037a0:	231f      	movs	r3, #31
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80037a8:	e06e      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
              odr_gy = val;
 80037aa:	231f      	movs	r3, #31
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	1cfa      	adds	r2, r7, #3
 80037b0:	7812      	ldrb	r2, [r2, #0]
 80037b2:	701a      	strb	r2, [r3, #0]
            break;
 80037b4:	e068      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80037b6:	1cfb      	adds	r3, r7, #3
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <lsm6dsox_gy_data_rate_set+0x2dc>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2202      	movs	r2, #2
 80037c4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80037c6:	e05f      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d104      	bne.n	80037da <lsm6dsox_gy_data_rate_set+0x2ee>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80037d0:	231f      	movs	r3, #31
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
            break;
 80037d8:	e056      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
              odr_gy = val;
 80037da:	231f      	movs	r3, #31
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	1cfa      	adds	r2, r7, #3
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
            break;
 80037e4:	e050      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80037e6:	1cfb      	adds	r3, r7, #3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <lsm6dsox_gy_data_rate_set+0x30c>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80037ee:	231f      	movs	r3, #31
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2203      	movs	r2, #3
 80037f4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80037f6:	e047      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80037f8:	1cfb      	adds	r3, r7, #3
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d104      	bne.n	800380a <lsm6dsox_gy_data_rate_set+0x31e>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003800:	231f      	movs	r3, #31
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2203      	movs	r2, #3
 8003806:	701a      	strb	r2, [r3, #0]
            break;
 8003808:	e03e      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800380a:	1cfb      	adds	r3, r7, #3
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d104      	bne.n	800381c <lsm6dsox_gy_data_rate_set+0x330>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2203      	movs	r2, #3
 8003818:	701a      	strb	r2, [r3, #0]
            break;
 800381a:	e035      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
              odr_gy = val;
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	1cfa      	adds	r2, r7, #3
 8003822:	7812      	ldrb	r2, [r2, #0]
 8003824:	701a      	strb	r2, [r3, #0]
            break;
 8003826:	e02f      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8003828:	1cfb      	adds	r3, r7, #3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <lsm6dsox_gy_data_rate_set+0x34e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2204      	movs	r2, #4
 8003836:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8003838:	e026      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 800383a:	1cfb      	adds	r3, r7, #3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d104      	bne.n	800384c <lsm6dsox_gy_data_rate_set+0x360>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003842:	231f      	movs	r3, #31
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
            break;
 800384a:	e01d      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 800384c:	1cfb      	adds	r3, r7, #3
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d104      	bne.n	800385e <lsm6dsox_gy_data_rate_set+0x372>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003854:	231f      	movs	r3, #31
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2204      	movs	r2, #4
 800385a:	701a      	strb	r2, [r3, #0]
            break;
 800385c:	e014      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800385e:	1cfb      	adds	r3, r7, #3
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d104      	bne.n	8003870 <lsm6dsox_gy_data_rate_set+0x384>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003866:	231f      	movs	r3, #31
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2204      	movs	r2, #4
 800386c:	701a      	strb	r2, [r3, #0]
            break;
 800386e:	e00b      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>
              odr_gy = val;
 8003870:	231f      	movs	r3, #31
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	1cfa      	adds	r2, r7, #3
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	701a      	strb	r2, [r3, #0]
            break;
 800387a:	e005      	b.n	8003888 <lsm6dsox_gy_data_rate_set+0x39c>

          default:
            odr_gy = val;
 800387c:	231f      	movs	r3, #31
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	1cfa      	adds	r2, r7, #3
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
            break;
 8003886:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <lsm6dsox_gy_data_rate_set+0x3b4>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800388e:	230c      	movs	r3, #12
 8003890:	18fa      	adds	r2, r7, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	2301      	movs	r3, #1
 8003896:	2111      	movs	r1, #17
 8003898:	f7ff fb30 	bl	8002efc <lsm6dsox_read_reg>
 800389c:	0003      	movs	r3, r0
 800389e:	61bb      	str	r3, [r7, #24]
  }

  if (ret == 0)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d117      	bne.n	80038d6 <lsm6dsox_gy_data_rate_set+0x3ea>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80038a6:	231f      	movs	r3, #31
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	220f      	movs	r2, #15
 80038ae:	4013      	ands	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	240c      	movs	r4, #12
 80038b4:	193b      	adds	r3, r7, r4
 80038b6:	0110      	lsls	r0, r2, #4
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	210f      	movs	r1, #15
 80038bc:	400a      	ands	r2, r1
 80038be:	1c11      	adds	r1, r2, #0
 80038c0:	1c02      	adds	r2, r0, #0
 80038c2:	430a      	orrs	r2, r1
 80038c4:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80038c6:	193a      	adds	r2, r7, r4
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	2301      	movs	r3, #1
 80038cc:	2111      	movs	r1, #17
 80038ce:	f7ff fb3e 	bl	8002f4e <lsm6dsox_write_reg>
 80038d2:	0003      	movs	r3, r0
 80038d4:	61bb      	str	r3, [r7, #24]
  }

  return ret;
 80038d6:	69bb      	ldr	r3, [r7, #24]
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b009      	add	sp, #36	@ 0x24
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	000a      	movs	r2, r1
 80038ea:	1cfb      	adds	r3, r7, #3
 80038ec:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80038ee:	2408      	movs	r4, #8
 80038f0:	193a      	adds	r2, r7, r4
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	2112      	movs	r1, #18
 80038f8:	f7ff fb00 	bl	8002efc <lsm6dsox_read_reg>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d117      	bne.n	8003936 <lsm6dsox_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8003906:	1cfb      	adds	r3, r7, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	b2da      	uxtb	r2, r3
 8003910:	193b      	adds	r3, r7, r4
 8003912:	2101      	movs	r1, #1
 8003914:	400a      	ands	r2, r1
 8003916:	0190      	lsls	r0, r2, #6
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	2140      	movs	r1, #64	@ 0x40
 800391c:	438a      	bics	r2, r1
 800391e:	1c11      	adds	r1, r2, #0
 8003920:	1c02      	adds	r2, r0, #0
 8003922:	430a      	orrs	r2, r1
 8003924:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003926:	193a      	adds	r2, r7, r4
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	2301      	movs	r3, #1
 800392c:	2112      	movs	r1, #18
 800392e:	f7ff fb0e 	bl	8002f4e <lsm6dsox_write_reg>
 8003932:	0003      	movs	r3, r0
 8003934:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b005      	add	sp, #20
 800393e:	bd90      	pop	{r4, r7, pc}

08003940 <lsm6dsox_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 800394a:	2408      	movs	r4, #8
 800394c:	193a      	adds	r2, r7, r4
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	2301      	movs	r3, #1
 8003952:	211e      	movs	r1, #30
 8003954:	f7ff fad2 	bl	8002efc <lsm6dsox_read_reg>
 8003958:	0003      	movs	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
 800395c:	193b      	adds	r3, r7, r4
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	07db      	lsls	r3, r3, #31
 8003962:	0fdb      	lsrs	r3, r3, #31
 8003964:	b2db      	uxtb	r3, r3
 8003966:	001a      	movs	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	701a      	strb	r2, [r3, #0]

  return ret;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b005      	add	sp, #20
 8003974:	bd90      	pop	{r4, r7, pc}

08003976 <lsm6dsox_gy_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8003976:	b590      	push	{r4, r7, lr}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 8003980:	2408      	movs	r4, #8
 8003982:	193a      	adds	r2, r7, r4
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	2301      	movs	r3, #1
 8003988:	211e      	movs	r1, #30
 800398a:	f7ff fab7 	bl	8002efc <lsm6dsox_read_reg>
 800398e:	0003      	movs	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]
  *val = reg.gda;
 8003992:	193b      	adds	r3, r7, r4
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	079b      	lsls	r3, r3, #30
 8003998:	0fdb      	lsrs	r3, r3, #31
 800399a:	b2db      	uxtb	r3, r3
 800399c:	001a      	movs	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	701a      	strb	r2, [r3, #0]

  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	0018      	movs	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b005      	add	sp, #20
 80039aa:	bd90      	pop	{r4, r7, pc}

080039ac <lsm6dsox_temp_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_temp_flag_data_ready_get(const stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 80039b6:	2408      	movs	r4, #8
 80039b8:	193a      	adds	r2, r7, r4
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	2301      	movs	r3, #1
 80039be:	211e      	movs	r1, #30
 80039c0:	f7ff fa9c 	bl	8002efc <lsm6dsox_read_reg>
 80039c4:	0003      	movs	r3, r0
 80039c6:	60fb      	str	r3, [r7, #12]
  *val = reg.tda;
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	075b      	lsls	r3, r3, #29
 80039ce:	0fdb      	lsrs	r3, r3, #31
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	001a      	movs	r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b005      	add	sp, #20
 80039e0:	bd90      	pop	{r4, r7, pc}

080039e2 <lsm6dsox_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80039e2:	b590      	push	{r4, r7, lr}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUT_TEMP_L, buff, 2);
 80039ec:	2408      	movs	r4, #8
 80039ee:	193a      	adds	r2, r7, r4
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	2302      	movs	r3, #2
 80039f4:	2120      	movs	r1, #32
 80039f6:	f7ff fa81 	bl	8002efc <lsm6dsox_read_reg>
 80039fa:	0003      	movs	r3, r0
 80039fc:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80039fe:	0021      	movs	r1, r4
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	b21a      	sxth	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	5e9b      	ldrsh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	187a      	adds	r2, r7, r1
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	801a      	strh	r2, [r3, #0]

  return ret;
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b005      	add	sp, #20
 8003a2c:	bd90      	pop	{r4, r7, pc}

08003a2e <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8003a2e:	b590      	push	{r4, r7, lr}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 8003a38:	240c      	movs	r4, #12
 8003a3a:	193a      	adds	r2, r7, r4
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	2306      	movs	r3, #6
 8003a40:	2122      	movs	r1, #34	@ 0x22
 8003a42:	f7ff fa5b 	bl	8002efc <lsm6dsox_read_reg>
 8003a46:	0003      	movs	r3, r0
 8003a48:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003a4a:	0021      	movs	r1, r4
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	187a      	adds	r2, r7, r1
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	78da      	ldrb	r2, [r3, #3]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	3302      	adds	r3, #2
 8003a78:	b212      	sxth	r2, r2
 8003a7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	3302      	adds	r3, #2
 8003a80:	2200      	movs	r2, #0
 8003a82:	5e9b      	ldrsh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	187a      	adds	r2, r7, r1
 8003a8c:	7892      	ldrb	r2, [r2, #2]
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3302      	adds	r3, #2
 8003a96:	b212      	sxth	r2, r2
 8003a98:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	795a      	ldrb	r2, [r3, #5]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	b212      	sxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	5e9b      	ldrsh	r3, [r3, r2]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	187a      	adds	r2, r7, r1
 8003ab6:	7912      	ldrb	r2, [r2, #4]
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	b212      	sxth	r2, r2
 8003ac2:	801a      	strh	r2, [r3, #0]

  return ret;
 8003ac4:	697b      	ldr	r3, [r7, #20]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b007      	add	sp, #28
 8003acc:	bd90      	pop	{r4, r7, pc}

08003ace <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8003ace:	b590      	push	{r4, r7, lr}
 8003ad0:	b087      	sub	sp, #28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8003ad8:	240c      	movs	r4, #12
 8003ada:	193a      	adds	r2, r7, r4
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	2306      	movs	r3, #6
 8003ae0:	2128      	movs	r1, #40	@ 0x28
 8003ae2:	f7ff fa0b 	bl	8002efc <lsm6dsox_read_reg>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003aea:	0021      	movs	r1, r4
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	b21a      	sxth	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	5e9b      	ldrsh	r3, [r3, r2]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	187a      	adds	r2, r7, r1
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	78da      	ldrb	r2, [r3, #3]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	3302      	adds	r3, #2
 8003b18:	b212      	sxth	r2, r2
 8003b1a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	2200      	movs	r2, #0
 8003b22:	5e9b      	ldrsh	r3, [r3, r2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	187a      	adds	r2, r7, r1
 8003b2c:	7892      	ldrb	r2, [r2, #2]
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	3302      	adds	r3, #2
 8003b36:	b212      	sxth	r2, r2
 8003b38:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	795a      	ldrb	r2, [r3, #5]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	b212      	sxth	r2, r2
 8003b44:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	187a      	adds	r2, r7, r1
 8003b56:	7912      	ldrb	r2, [r2, #4]
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	b212      	sxth	r2, r2
 8003b62:	801a      	strh	r2, [r3, #0]

  return ret;
 8003b64:	697b      	ldr	r3, [r7, #20]
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b007      	add	sp, #28
 8003b6c:	bd90      	pop	{r4, r7, pc}

08003b6e <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8003b6e:	b590      	push	{r4, r7, lr}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	000a      	movs	r2, r1
 8003b78:	1cfb      	adds	r3, r7, #3
 8003b7a:	701a      	strb	r2, [r3, #0]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003b7c:	2408      	movs	r4, #8
 8003b7e:	193a      	adds	r2, r7, r4
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	2301      	movs	r3, #1
 8003b84:	2101      	movs	r1, #1
 8003b86:	f7ff f9b9 	bl	8002efc <lsm6dsox_read_reg>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d115      	bne.n	8003bc0 <lsm6dsox_mem_bank_set+0x52>
  {
    reg.reg_access = (uint8_t)val;
 8003b94:	1cfb      	adds	r3, r7, #3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	0190      	lsls	r0, r2, #6
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	213f      	movs	r1, #63	@ 0x3f
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	1c11      	adds	r1, r2, #0
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	430a      	orrs	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003bb0:	193a      	adds	r2, r7, r4
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	f7ff f9c9 	bl	8002f4e <lsm6dsox_write_reg>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b005      	add	sp, #20
 8003bc8:	bd90      	pop	{r4, r7, pc}

08003bca <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	210f      	movs	r1, #15
 8003bdc:	f7ff f98e 	bl	8002efc <lsm6dsox_read_reg>
 8003be0:	0003      	movs	r3, r0
 8003be2:	60fb      	str	r3, [r7, #12]

  return ret;
 8003be4:	68fb      	ldr	r3, [r7, #12]
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}

08003bee <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	000a      	movs	r2, r1
 8003bf8:	1cfb      	adds	r3, r7, #3
 8003bfa:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003bfc:	2408      	movs	r4, #8
 8003bfe:	193a      	adds	r2, r7, r4
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	2301      	movs	r3, #1
 8003c04:	2112      	movs	r1, #18
 8003c06:	f7ff f979 	bl	8002efc <lsm6dsox_read_reg>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d117      	bne.n	8003c44 <lsm6dsox_reset_set+0x56>
  {
    reg.sw_reset = val;
 8003c14:	1cfb      	adds	r3, r7, #3
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	2101      	movs	r1, #1
 8003c22:	400a      	ands	r2, r1
 8003c24:	0010      	movs	r0, r2
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	1c11      	adds	r1, r2, #0
 8003c2e:	1c02      	adds	r2, r0, #0
 8003c30:	430a      	orrs	r2, r1
 8003c32:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003c34:	193a      	adds	r2, r7, r4
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff f987 	bl	8002f4e <lsm6dsox_write_reg>
 8003c40:	0003      	movs	r3, r0
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b005      	add	sp, #20
 8003c4c:	bd90      	pop	{r4, r7, pc}

08003c4e <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003c58:	2408      	movs	r4, #8
 8003c5a:	193a      	adds	r2, r7, r4
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	2301      	movs	r3, #1
 8003c60:	2112      	movs	r1, #18
 8003c62:	f7ff f94b 	bl	8002efc <lsm6dsox_read_reg>
 8003c66:	0003      	movs	r3, r0
 8003c68:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	07db      	lsls	r3, r3, #31
 8003c70:	0fdb      	lsrs	r3, r3, #31
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	001a      	movs	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	701a      	strb	r2, [r3, #0]

  return ret;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b005      	add	sp, #20
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <lsm6dsox_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_filter_lp2_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	000a      	movs	r2, r1
 8003c8e:	1cfb      	adds	r3, r7, #3
 8003c90:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003c92:	2408      	movs	r4, #8
 8003c94:	193a      	adds	r2, r7, r4
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	f7ff f92e 	bl	8002efc <lsm6dsox_read_reg>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d117      	bne.n	8003cda <lsm6dsox_xl_filter_lp2_set+0x56>
  {
    reg.lpf2_xl_en = val;
 8003caa:	1cfb      	adds	r3, r7, #3
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	193b      	adds	r3, r7, r4
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	400a      	ands	r2, r1
 8003cba:	1890      	adds	r0, r2, r2
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	1c11      	adds	r1, r2, #0
 8003cc4:	1c02      	adds	r2, r0, #0
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003cca:	193a      	adds	r2, r7, r4
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	2301      	movs	r3, #1
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	f7ff f93c 	bl	8002f4e <lsm6dsox_write_reg>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b005      	add	sp, #20
 8003ce2:	bd90      	pop	{r4, r7, pc}

08003ce4 <lsm6dsox_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_hp_path_on_out_set(const stmdev_ctx_t *ctx,
                                       lsm6dsox_hp_slope_xl_en_t val)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	000a      	movs	r2, r1
 8003cee:	1cfb      	adds	r3, r7, #3
 8003cf0:	701a      	strb	r2, [r3, #0]
  lsm6dsox_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL8_XL, (uint8_t *)&reg, 1);
 8003cf2:	2408      	movs	r4, #8
 8003cf4:	193a      	adds	r2, r7, r4
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	2117      	movs	r1, #23
 8003cfc:	f7ff f8fe 	bl	8002efc <lsm6dsox_read_reg>
 8003d00:	0003      	movs	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d139      	bne.n	8003d7e <lsm6dsox_xl_hp_path_on_out_set+0x9a>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
 8003d0a:	1cfb      	adds	r3, r7, #3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	1c1a      	adds	r2, r3, #0
 8003d12:	2301      	movs	r3, #1
 8003d14:	4013      	ands	r3, r2
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	0090      	lsls	r0, r2, #2
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	2104      	movs	r1, #4
 8003d24:	438a      	bics	r2, r1
 8003d26:	1c11      	adds	r1, r2, #0
 8003d28:	1c02      	adds	r2, r0, #0
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8003d2e:	1cfb      	adds	r3, r7, #3
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	1c1a      	adds	r2, r3, #0
 8003d36:	2301      	movs	r3, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	2101      	movs	r1, #1
 8003d40:	400a      	ands	r2, r1
 8003d42:	0110      	lsls	r0, r2, #4
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	2110      	movs	r1, #16
 8003d48:	438a      	bics	r2, r1
 8003d4a:	1c11      	adds	r1, r2, #0
 8003d4c:	1c02      	adds	r2, r0, #0
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
 8003d52:	1cfb      	adds	r3, r7, #3
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2207      	movs	r2, #7
 8003d58:	4013      	ands	r3, r2
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	0150      	lsls	r0, r2, #5
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	211f      	movs	r1, #31
 8003d64:	400a      	ands	r2, r1
 8003d66:	1c11      	adds	r1, r2, #0
 8003d68:	1c02      	adds	r2, r0, #0
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL8_XL, (uint8_t *)&reg, 1);
 8003d6e:	193a      	adds	r2, r7, r4
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	2301      	movs	r3, #1
 8003d74:	2117      	movs	r1, #23
 8003d76:	f7ff f8ea 	bl	8002f4e <lsm6dsox_write_reg>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b005      	add	sp, #20
 8003d86:	bd90      	pop	{r4, r7, pc}

08003d88 <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(const stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	000a      	movs	r2, r1
 8003d92:	1cfb      	adds	r3, r7, #3
 8003d94:	701a      	strb	r2, [r3, #0]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003d96:	240c      	movs	r4, #12
 8003d98:	193a      	adds	r2, r7, r4
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2118      	movs	r1, #24
 8003da0:	f7ff f8ac 	bl	8002efc <lsm6dsox_read_reg>
 8003da4:	0003      	movs	r3, r0
 8003da6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11a      	bne.n	8003de4 <lsm6dsox_i3c_disable_set+0x5c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003dae:	1cfb      	adds	r3, r7, #3
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	09db      	lsrs	r3, r3, #7
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	1c1a      	adds	r2, r3, #0
 8003db8:	2301      	movs	r3, #1
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	193b      	adds	r3, r7, r4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	1890      	adds	r0, r2, r2
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	2102      	movs	r1, #2
 8003dca:	438a      	bics	r2, r1
 8003dcc:	1c11      	adds	r1, r2, #0
 8003dce:	1c02      	adds	r2, r0, #0
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8003dd4:	193a      	adds	r2, r7, r4
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	2301      	movs	r3, #1
 8003dda:	2118      	movs	r1, #24
 8003ddc:	f7ff f8b7 	bl	8002f4e <lsm6dsox_write_reg>
 8003de0:	0003      	movs	r3, r0
 8003de2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <lsm6dsox_i3c_disable_set+0x74>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8003dea:	2310      	movs	r3, #16
 8003dec:	18fa      	adds	r2, r7, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	2301      	movs	r3, #1
 8003df2:	2162      	movs	r1, #98	@ 0x62
 8003df4:	f7ff f882 	bl	8002efc <lsm6dsox_read_reg>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <lsm6dsox_i3c_disable_set+0xac>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003e02:	1cfb      	adds	r3, r7, #3
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2203      	movs	r2, #3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	2410      	movs	r4, #16
 8003e0e:	193b      	adds	r3, r7, r4
 8003e10:	2103      	movs	r1, #3
 8003e12:	400a      	ands	r2, r1
 8003e14:	00d0      	lsls	r0, r2, #3
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	2118      	movs	r1, #24
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	1c11      	adds	r1, r2, #0
 8003e1e:	1c02      	adds	r2, r0, #0
 8003e20:	430a      	orrs	r2, r1
 8003e22:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8003e24:	193a      	adds	r2, r7, r4
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	2162      	movs	r1, #98	@ 0x62
 8003e2c:	f7ff f88f 	bl	8002f4e <lsm6dsox_write_reg>
 8003e30:	0003      	movs	r3, r0
 8003e32:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8003e34:	697b      	ldr	r3, [r7, #20]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b007      	add	sp, #28
 8003e3c:	bd90      	pop	{r4, r7, pc}

08003e3e <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff fe8e 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003e52:	0003      	movs	r3, r0
 8003e54:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <lsm6dsox_fsm_enable_get+0x2e>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	2302      	movs	r3, #2
 8003e62:	2146      	movs	r1, #70	@ 0x46
 8003e64:	f7ff f84a 	bl	8002efc <lsm6dsox_read_reg>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	60fb      	str	r3, [r7, #12]
                            2);
  }

  if (ret == 0)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <lsm6dsox_fsm_enable_get+0x42>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2100      	movs	r1, #0
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fe79 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2102      	movs	r1, #2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fe68 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <lsm6dsox_fsm_data_rate_get+0x30>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	18fa      	adds	r2, r7, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	215f      	movs	r1, #95	@ 0x5f
 8003eb2:	f7ff f823 	bl	8002efc <lsm6dsox_read_reg>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d12b      	bne.n	8003f18 <lsm6dsox_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	06db      	lsls	r3, r3, #27
 8003ec8:	0f9b      	lsrs	r3, r3, #30
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d014      	beq.n	8003efa <lsm6dsox_fsm_data_rate_get+0x70>
 8003ed0:	dc17      	bgt.n	8003f02 <lsm6dsox_fsm_data_rate_get+0x78>
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d00d      	beq.n	8003ef2 <lsm6dsox_fsm_data_rate_get+0x68>
 8003ed6:	dc14      	bgt.n	8003f02 <lsm6dsox_fsm_data_rate_get+0x78>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <lsm6dsox_fsm_data_rate_get+0x58>
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d004      	beq.n	8003eea <lsm6dsox_fsm_data_rate_get+0x60>
 8003ee0:	e00f      	b.n	8003f02 <lsm6dsox_fsm_data_rate_get+0x78>
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
        break;
 8003ee8:	e00f      	b.n	8003f0a <lsm6dsox_fsm_data_rate_get+0x80>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
        break;
 8003ef0:	e00b      	b.n	8003f0a <lsm6dsox_fsm_data_rate_get+0x80>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
        break;
 8003ef8:	e007      	b.n	8003f0a <lsm6dsox_fsm_data_rate_get+0x80>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2203      	movs	r2, #3
 8003efe:	701a      	strb	r2, [r3, #0]
        break;
 8003f00:	e003      	b.n	8003f0a <lsm6dsox_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
        break;
 8003f08:	46c0      	nop			@ (mov r8, r8)
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fe2d 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003f14:	0003      	movs	r3, r0
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2102      	movs	r1, #2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff fe1c 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003f36:	0003      	movs	r3, r0
 8003f38:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <lsm6dsox_mlc_data_rate_get+0x30>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8003f40:	2308      	movs	r3, #8
 8003f42:	18fa      	adds	r2, r7, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	2301      	movs	r3, #1
 8003f48:	2160      	movs	r1, #96	@ 0x60
 8003f4a:	f7fe ffd7 	bl	8002efc <lsm6dsox_read_reg>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12b      	bne.n	8003fb0 <lsm6dsox_mlc_data_rate_get+0x8e>
  {
    switch (reg.mlc_odr)
 8003f58:	2308      	movs	r3, #8
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	0f9b      	lsrs	r3, r3, #30
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d014      	beq.n	8003f92 <lsm6dsox_mlc_data_rate_get+0x70>
 8003f68:	dc17      	bgt.n	8003f9a <lsm6dsox_mlc_data_rate_get+0x78>
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d00d      	beq.n	8003f8a <lsm6dsox_mlc_data_rate_get+0x68>
 8003f6e:	dc14      	bgt.n	8003f9a <lsm6dsox_mlc_data_rate_get+0x78>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <lsm6dsox_mlc_data_rate_get+0x58>
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d004      	beq.n	8003f82 <lsm6dsox_mlc_data_rate_get+0x60>
 8003f78:	e00f      	b.n	8003f9a <lsm6dsox_mlc_data_rate_get+0x78>
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
        break;
 8003f80:	e00f      	b.n	8003fa2 <lsm6dsox_mlc_data_rate_get+0x80>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
        break;
 8003f88:	e00b      	b.n	8003fa2 <lsm6dsox_mlc_data_rate_get+0x80>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
        break;
 8003f90:	e007      	b.n	8003fa2 <lsm6dsox_mlc_data_rate_get+0x80>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2203      	movs	r2, #3
 8003f96:	701a      	strb	r2, [r3, #0]
        break;
 8003f98:	e003      	b.n	8003fa2 <lsm6dsox_mlc_data_rate_get+0x80>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
        break;
 8003fa0:	46c0      	nop			@ (mov r8, r8)
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fde1 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8003fba:	b5b0      	push	{r4, r5, r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fdd0 	bl	8003b6e <lsm6dsox_mem_bank_set>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <lsm6dsox_embedded_sens_get+0x30>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8003fd8:	2310      	movs	r3, #16
 8003fda:	18fa      	adds	r2, r7, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	f7fe ff8b 	bl	8002efc <lsm6dsox_read_reg>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d169      	bne.n	80040c4 <lsm6dsox_embedded_sens_get+0x10a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8003ff0:	240c      	movs	r4, #12
 8003ff2:	193a      	adds	r2, r7, r4
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2105      	movs	r1, #5
 8003ffa:	f7fe ff7f 	bl	8002efc <lsm6dsox_read_reg>
 8003ffe:	0003      	movs	r3, r0
 8004000:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8004002:	193b      	adds	r3, r7, r4
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	06db      	lsls	r3, r3, #27
 8004008:	0fdb      	lsrs	r3, r3, #31
 800400a:	b2da      	uxtb	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	400a      	ands	r2, r1
 8004012:	00d0      	lsls	r0, r2, #3
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	2108      	movs	r1, #8
 8004018:	438a      	bics	r2, r1
 800401a:	1c11      	adds	r1, r2, #0
 800401c:	1c02      	adds	r2, r0, #0
 800401e:	430a      	orrs	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8004022:	193b      	adds	r3, r7, r4
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	07db      	lsls	r3, r3, #31
 8004028:	0fdb      	lsrs	r3, r3, #31
 800402a:	b2da      	uxtb	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	400a      	ands	r2, r1
 8004032:	0110      	lsls	r0, r2, #4
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	2110      	movs	r1, #16
 8004038:	438a      	bics	r2, r1
 800403a:	1c11      	adds	r1, r2, #0
 800403c:	1c02      	adds	r2, r0, #0
 800403e:	430a      	orrs	r2, r1
 8004040:	701a      	strb	r2, [r3, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8004042:	2510      	movs	r5, #16
 8004044:	197b      	adds	r3, r7, r5
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	06db      	lsls	r3, r3, #27
 800404a:	0fdb      	lsrs	r3, r3, #31
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	400a      	ands	r2, r1
 8004054:	1890      	adds	r0, r2, r2
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	2102      	movs	r1, #2
 800405a:	438a      	bics	r2, r1
 800405c:	1c11      	adds	r1, r2, #0
 800405e:	1c02      	adds	r2, r0, #0
 8004060:	430a      	orrs	r2, r1
 8004062:	701a      	strb	r2, [r3, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8004064:	197b      	adds	r3, r7, r5
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	0fdb      	lsrs	r3, r3, #31
 800406c:	b2da      	uxtb	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	400a      	ands	r2, r1
 8004074:	0090      	lsls	r0, r2, #2
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	2104      	movs	r1, #4
 800407a:	438a      	bics	r2, r1
 800407c:	1c11      	adds	r1, r2, #0
 800407e:	1c02      	adds	r2, r0, #0
 8004080:	430a      	orrs	r2, r1
 8004082:	701a      	strb	r2, [r3, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8004084:	197b      	adds	r3, r7, r5
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	069b      	lsls	r3, r3, #26
 800408a:	0fdb      	lsrs	r3, r3, #31
 800408c:	b2da      	uxtb	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	400a      	ands	r2, r1
 8004094:	0010      	movs	r0, r2
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	1c11      	adds	r1, r2, #0
 800409e:	1c02      	adds	r2, r0, #0
 80040a0:	430a      	orrs	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	0fdb      	lsrs	r3, r3, #31
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	400a      	ands	r2, r1
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	2120      	movs	r1, #32
 80040ba:	438a      	bics	r2, r1
 80040bc:	1c11      	adds	r1, r2, #0
 80040be:	1c02      	adds	r2, r0, #0
 80040c0:	430a      	orrs	r2, r1
 80040c2:	701a      	strb	r2, [r3, #0]
  }

  if (ret == 0)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <lsm6dsox_embedded_sens_get+0x11e>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2100      	movs	r1, #0
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7ff fd4d 	bl	8003b6e <lsm6dsox_mem_bank_set>
 80040d4:	0003      	movs	r3, r0
 80040d6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b006      	add	sp, #24
 80040e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040e8:	f000 fcc2 	bl	8004a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040ec:	f000 f836 	bl	800415c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040f0:	f7fe fe20 	bl	8002d34 <MX_GPIO_Init>
  MX_I2C1_Init();
 80040f4:	f7fe fe74 	bl	8002de0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80040f8:	f000 fa86 	bl	8004608 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80040fc:	f000 fc10 	bl	8004920 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_I2C1_Init();
 8004100:	f7fe fe6e 	bl	8002de0 <MX_I2C1_Init>

  HAL_I2C_MspInit(&hi2c1);
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <main+0x68>)
 8004106:	0018      	movs	r0, r3
 8004108:	f7fe feaa 	bl	8002e60 <HAL_I2C_MspInit>

  // Check if IMU is good
  if (HAL_I2C_IsDeviceReady(&hi2c1, IMU_DEVICE_ADDR, 1, 100) == HAL_OK) {
 800410c:	480f      	ldr	r0, [pc, #60]	@ (800414c <main+0x68>)
 800410e:	2364      	movs	r3, #100	@ 0x64
 8004110:	2201      	movs	r2, #1
 8004112:	21d4      	movs	r1, #212	@ 0xd4
 8004114:	f001 fa76 	bl	8005604 <HAL_I2C_IsDeviceReady>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d10a      	bne.n	8004132 <main+0x4e>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <main+0x6c>)
 800411e:	2201      	movs	r2, #1
 8004120:	2104      	movs	r1, #4
 8004122:	0018      	movs	r0, r3
 8004124:	f000 ff58 	bl	8004fd8 <HAL_GPIO_WritePin>
	// Printf doesn't seem to work so we will debug with LEDs
	printf("The device is ready\n");
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <main+0x70>)
 800412a:	0018      	movs	r0, r3
 800412c:	f005 f908 	bl	8009340 <puts>
 8004130:	e009      	b.n	8004146 <main+0x62>
  }
  else {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8004132:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <main+0x6c>)
 8004134:	2201      	movs	r2, #1
 8004136:	2101      	movs	r1, #1
 8004138:	0018      	movs	r0, r3
 800413a:	f000 ff4d 	bl	8004fd8 <HAL_GPIO_WritePin>
    printf("The device is not ready :((\n");
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <main+0x74>)
 8004140:	0018      	movs	r0, r3
 8004142:	f005 f8fd 	bl	8009340 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	lsm6dsox_read_data_polling();
 8004146:	f000 f863 	bl	8004210 <lsm6dsox_read_data_polling>
 800414a:	e7fc      	b.n	8004146 <main+0x62>
 800414c:	200001f0 	.word	0x200001f0
 8004150:	48000400 	.word	0x48000400
 8004154:	0800c028 	.word	0x0800c028
 8004158:	0800c03c 	.word	0x0800c03c

0800415c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b099      	sub	sp, #100	@ 0x64
 8004160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004162:	242c      	movs	r4, #44	@ 0x2c
 8004164:	193b      	adds	r3, r7, r4
 8004166:	0018      	movs	r0, r3
 8004168:	2334      	movs	r3, #52	@ 0x34
 800416a:	001a      	movs	r2, r3
 800416c:	2100      	movs	r1, #0
 800416e:	f005 f902 	bl	8009376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004172:	231c      	movs	r3, #28
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	0018      	movs	r0, r3
 8004178:	2310      	movs	r3, #16
 800417a:	001a      	movs	r2, r3
 800417c:	2100      	movs	r1, #0
 800417e:	f005 f8fa 	bl	8009376 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004182:	003b      	movs	r3, r7
 8004184:	0018      	movs	r0, r3
 8004186:	231c      	movs	r3, #28
 8004188:	001a      	movs	r2, r3
 800418a:	2100      	movs	r1, #0
 800418c:	f005 f8f3 	bl	8009376 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004190:	0021      	movs	r1, r4
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2202      	movs	r2, #2
 8004196:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2201      	movs	r2, #1
 800419c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2210      	movs	r2, #16
 80041a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	2200      	movs	r2, #0
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	0018      	movs	r0, r3
 80041ae:	f001 fecd 	bl	8005f4c <HAL_RCC_OscConfig>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d001      	beq.n	80041ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80041b6:	f000 fa20 	bl	80045fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041ba:	211c      	movs	r1, #28
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	2207      	movs	r2, #7
 80041c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	2200      	movs	r2, #0
 80041d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2100      	movs	r1, #0
 80041d8:	0018      	movs	r0, r3
 80041da:	f002 fa3d 	bl	8006658 <HAL_RCC_ClockConfig>
 80041de:	1e03      	subs	r3, r0, #0
 80041e0:	d001      	beq.n	80041e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80041e2:	f000 fa0a 	bl	80045fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80041e6:	003b      	movs	r3, r7
 80041e8:	2221      	movs	r2, #33	@ 0x21
 80041ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80041ec:	003b      	movs	r3, r7
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80041f2:	003b      	movs	r3, r7
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041f8:	003b      	movs	r3, r7
 80041fa:	0018      	movs	r0, r3
 80041fc:	f002 fb98 	bl	8006930 <HAL_RCCEx_PeriphCLKConfig>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d001      	beq.n	8004208 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004204:	f000 f9f9 	bl	80045fa <Error_Handler>
  }
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b019      	add	sp, #100	@ 0x64
 800420e:	bd90      	pop	{r4, r7, pc}

08004210 <lsm6dsox_read_data_polling>:

/* USER CODE BEGIN 4 */
void lsm6dsox_read_data_polling(void)
{
 8004210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004212:	b08d      	sub	sp, #52	@ 0x34
 8004214:	af04      	add	r7, sp, #16
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8004216:	2408      	movs	r4, #8
 8004218:	2508      	movs	r5, #8
 800421a:	1963      	adds	r3, r4, r5
 800421c:	19db      	adds	r3, r3, r7
 800421e:	4aaf      	ldr	r2, [pc, #700]	@ (80044dc <lsm6dsox_read_data_polling+0x2cc>)
 8004220:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8004222:	1963      	adds	r3, r4, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	4aae      	ldr	r2, [pc, #696]	@ (80044e0 <lsm6dsox_read_data_polling+0x2d0>)
 8004228:	605a      	str	r2, [r3, #4]
  dev_ctx.mdelay = platform_delay;
 800422a:	1963      	adds	r3, r4, r5
 800422c:	19db      	adds	r3, r3, r7
 800422e:	4aad      	ldr	r2, [pc, #692]	@ (80044e4 <lsm6dsox_read_data_polling+0x2d4>)
 8004230:	609a      	str	r2, [r3, #8]
  dev_ctx.handle = &SENSOR_BUS;
 8004232:	1963      	adds	r3, r4, r5
 8004234:	19db      	adds	r3, r3, r7
 8004236:	4aac      	ldr	r2, [pc, #688]	@ (80044e8 <lsm6dsox_read_data_polling+0x2d8>)
 8004238:	60da      	str	r2, [r3, #12]
  /* Init test platform */
  platform_init();
 800423a:	f000 f9d9 	bl	80045f0 <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 800423e:	200a      	movs	r0, #10
 8004240:	f000 f9ca 	bl	80045d8 <platform_delay>
  /* Check device ID */
  lsm6dsox_device_id_get(&dev_ctx, &whoamI);
 8004244:	4aa9      	ldr	r2, [pc, #676]	@ (80044ec <lsm6dsox_read_data_polling+0x2dc>)
 8004246:	1963      	adds	r3, r4, r5
 8004248:	19db      	adds	r3, r3, r7
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff fcbc 	bl	8003bca <lsm6dsox_device_id_get>

  if (whoamI != LSM6DSOX_ID)
 8004252:	4ba6      	ldr	r3, [pc, #664]	@ (80044ec <lsm6dsox_read_data_polling+0x2dc>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b6c      	cmp	r3, #108	@ 0x6c
 8004258:	d001      	beq.n	800425e <lsm6dsox_read_data_polling+0x4e>
    while (1);
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	e7fd      	b.n	800425a <lsm6dsox_read_data_polling+0x4a>

  /* Restore default configuration */
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800425e:	2308      	movs	r3, #8
 8004260:	2208      	movs	r2, #8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2101      	movs	r1, #1
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff fcc0 	bl	8003bee <lsm6dsox_reset_set>

  do {
    lsm6dsox_reset_get(&dev_ctx, &rst);
 800426e:	4aa0      	ldr	r2, [pc, #640]	@ (80044f0 <lsm6dsox_read_data_polling+0x2e0>)
 8004270:	2408      	movs	r4, #8
 8004272:	2508      	movs	r5, #8
 8004274:	1963      	adds	r3, r4, r5
 8004276:	19db      	adds	r3, r3, r7
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fce7 	bl	8003c4e <lsm6dsox_reset_get>
  } while (rst);
 8004280:	4b9b      	ldr	r3, [pc, #620]	@ (80044f0 <lsm6dsox_read_data_polling+0x2e0>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f2      	bne.n	800426e <lsm6dsox_read_data_polling+0x5e>

  /* Disable I3C interface */
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 8004288:	1963      	adds	r3, r4, r5
 800428a:	19db      	adds	r3, r3, r7
 800428c:	2180      	movs	r1, #128	@ 0x80
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fd7a 	bl	8003d88 <lsm6dsox_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004294:	1963      	adds	r3, r4, r5
 8004296:	19db      	adds	r3, r3, r7
 8004298:	2101      	movs	r1, #1
 800429a:	0018      	movs	r0, r3
 800429c:	f7ff fb20 	bl	80038e0 <lsm6dsox_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_12Hz5);
 80042a0:	1963      	adds	r3, r4, r5
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	2101      	movs	r1, #1
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7fe fef8 	bl	800309c <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_12Hz5);
 80042ac:	1963      	adds	r3, r4, r5
 80042ae:	19db      	adds	r3, r3, r7
 80042b0:	2101      	movs	r1, #1
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff f91a 	bl	80034ec <lsm6dsox_gy_data_rate_set>
  /* Set full scale */
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_2g);
 80042b8:	1963      	adds	r3, r4, r5
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	2100      	movs	r1, #0
 80042be:	0018      	movs	r0, r3
 80042c0:	f7fe febc 	bl	800303c <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_2000dps);
 80042c4:	1963      	adds	r3, r4, r5
 80042c6:	19db      	adds	r3, r3, r7
 80042c8:	2106      	movs	r1, #6
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff f8de 	bl	800348c <lsm6dsox_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dsox_xl_hp_path_on_out_set(&dev_ctx, LSM6DSOX_LP_ODR_DIV_100);
 80042d0:	1963      	adds	r3, r4, r5
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	2104      	movs	r1, #4
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fd04 	bl	8003ce4 <lsm6dsox_xl_hp_path_on_out_set>
  lsm6dsox_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80042dc:	1963      	adds	r3, r4, r5
 80042de:	19db      	adds	r3, r3, r7
 80042e0:	2101      	movs	r1, #1
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7ff fcce 	bl	8003c84 <lsm6dsox_xl_filter_lp2_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dsox_xl_flag_data_ready_get(&dev_ctx, &reg);
 80042e8:	260f      	movs	r6, #15
 80042ea:	19ba      	adds	r2, r7, r6
 80042ec:	2408      	movs	r4, #8
 80042ee:	2508      	movs	r5, #8
 80042f0:	1963      	adds	r3, r4, r5
 80042f2:	19db      	adds	r3, r3, r7
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7ff fb22 	bl	8003940 <lsm6dsox_xl_flag_data_ready_get>

    if (reg) {
 80042fc:	19bb      	adds	r3, r7, r6
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d051      	beq.n	80043a8 <lsm6dsox_read_data_polling+0x198>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004304:	4b7b      	ldr	r3, [pc, #492]	@ (80044f4 <lsm6dsox_read_data_polling+0x2e4>)
 8004306:	2206      	movs	r2, #6
 8004308:	2100      	movs	r1, #0
 800430a:	0018      	movs	r0, r3
 800430c:	f005 f833 	bl	8009376 <memset>
      lsm6dsox_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004310:	4a78      	ldr	r2, [pc, #480]	@ (80044f4 <lsm6dsox_read_data_polling+0x2e4>)
 8004312:	1963      	adds	r3, r4, r5
 8004314:	19db      	adds	r3, r3, r7
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff fbd8 	bl	8003ace <lsm6dsox_acceleration_raw_get>
      acceleration_mg[0] =
        lsm6dsox_from_fs2_to_mg(data_raw_acceleration[0]);
 800431e:	4b75      	ldr	r3, [pc, #468]	@ (80044f4 <lsm6dsox_read_data_polling+0x2e4>)
 8004320:	2200      	movs	r2, #0
 8004322:	5e9b      	ldrsh	r3, [r3, r2]
 8004324:	0018      	movs	r0, r3
 8004326:	f7fe fe3b 	bl	8002fa0 <lsm6dsox_from_fs2_to_mg>
 800432a:	1c02      	adds	r2, r0, #0
      acceleration_mg[0] =
 800432c:	4b72      	ldr	r3, [pc, #456]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 800432e:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
        lsm6dsox_from_fs2_to_mg(data_raw_acceleration[1]);
 8004330:	4b70      	ldr	r3, [pc, #448]	@ (80044f4 <lsm6dsox_read_data_polling+0x2e4>)
 8004332:	2202      	movs	r2, #2
 8004334:	5e9b      	ldrsh	r3, [r3, r2]
 8004336:	0018      	movs	r0, r3
 8004338:	f7fe fe32 	bl	8002fa0 <lsm6dsox_from_fs2_to_mg>
 800433c:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
 800433e:	4b6e      	ldr	r3, [pc, #440]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 8004340:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
        lsm6dsox_from_fs2_to_mg(data_raw_acceleration[2]);
 8004342:	4b6c      	ldr	r3, [pc, #432]	@ (80044f4 <lsm6dsox_read_data_polling+0x2e4>)
 8004344:	2204      	movs	r2, #4
 8004346:	5e9b      	ldrsh	r3, [r3, r2]
 8004348:	0018      	movs	r0, r3
 800434a:	f7fe fe29 	bl	8002fa0 <lsm6dsox_from_fs2_to_mg>
 800434e:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
 8004350:	4b69      	ldr	r3, [pc, #420]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 8004352:	609a      	str	r2, [r3, #8]
      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8004354:	4b68      	ldr	r3, [pc, #416]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 8004356:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 8004358:	1c18      	adds	r0, r3, #0
 800435a:	f7fe fc01 	bl	8002b60 <__aeabi_f2d>
 800435e:	6038      	str	r0, [r7, #0]
 8004360:	6079      	str	r1, [r7, #4]
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8004362:	4b65      	ldr	r3, [pc, #404]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 8004364:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 8004366:	1c18      	adds	r0, r3, #0
 8004368:	f7fe fbfa 	bl	8002b60 <__aeabi_f2d>
 800436c:	0004      	movs	r4, r0
 800436e:	000d      	movs	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8004370:	4b61      	ldr	r3, [pc, #388]	@ (80044f8 <lsm6dsox_read_data_polling+0x2e8>)
 8004372:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 8004374:	1c18      	adds	r0, r3, #0
 8004376:	f7fe fbf3 	bl	8002b60 <__aeabi_f2d>
 800437a:	0002      	movs	r2, r0
 800437c:	000b      	movs	r3, r1
 800437e:	495f      	ldr	r1, [pc, #380]	@ (80044fc <lsm6dsox_read_data_polling+0x2ec>)
 8004380:	485f      	ldr	r0, [pc, #380]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	9400      	str	r4, [sp, #0]
 8004388:	9501      	str	r5, [sp, #4]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 fffd 	bl	800838c <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004392:	4b5b      	ldr	r3, [pc, #364]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 8004394:	0018      	movs	r0, r3
 8004396:	f7fb feb5 	bl	8000104 <strlen>
 800439a:	0003      	movs	r3, r0
 800439c:	b29a      	uxth	r2, r3
 800439e:	4b58      	ldr	r3, [pc, #352]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 f902 	bl	80045ac <tx_com>
    }

    lsm6dsox_gy_flag_data_ready_get(&dev_ctx, &reg);
 80043a8:	260f      	movs	r6, #15
 80043aa:	19ba      	adds	r2, r7, r6
 80043ac:	2408      	movs	r4, #8
 80043ae:	2508      	movs	r5, #8
 80043b0:	1963      	adds	r3, r4, r5
 80043b2:	19db      	adds	r3, r3, r7
 80043b4:	0011      	movs	r1, r2
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff fadd 	bl	8003976 <lsm6dsox_gy_flag_data_ready_get>

    if (reg) {
 80043bc:	19bb      	adds	r3, r7, r6
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d051      	beq.n	8004468 <lsm6dsox_read_data_polling+0x258>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80043c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004504 <lsm6dsox_read_data_polling+0x2f4>)
 80043c6:	2206      	movs	r2, #6
 80043c8:	2100      	movs	r1, #0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f004 ffd3 	bl	8009376 <memset>
      lsm6dsox_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 80043d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004504 <lsm6dsox_read_data_polling+0x2f4>)
 80043d2:	1963      	adds	r3, r4, r5
 80043d4:	19db      	adds	r3, r3, r7
 80043d6:	0011      	movs	r1, r2
 80043d8:	0018      	movs	r0, r3
 80043da:	f7ff fb28 	bl	8003a2e <lsm6dsox_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate[0]);
 80043de:	4b49      	ldr	r3, [pc, #292]	@ (8004504 <lsm6dsox_read_data_polling+0x2f4>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	5e9b      	ldrsh	r3, [r3, r2]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7fe fdf3 	bl	8002fd0 <lsm6dsox_from_fs2000_to_mdps>
 80043ea:	1c02      	adds	r2, r0, #0
      angular_rate_mdps[0] =
 80043ec:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 80043ee:	601a      	str	r2, [r3, #0]
      angular_rate_mdps[1] =
        lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate[1]);
 80043f0:	4b44      	ldr	r3, [pc, #272]	@ (8004504 <lsm6dsox_read_data_polling+0x2f4>)
 80043f2:	2202      	movs	r2, #2
 80043f4:	5e9b      	ldrsh	r3, [r3, r2]
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7fe fdea 	bl	8002fd0 <lsm6dsox_from_fs2000_to_mdps>
 80043fc:	1c02      	adds	r2, r0, #0
      angular_rate_mdps[1] =
 80043fe:	4b42      	ldr	r3, [pc, #264]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 8004400:	605a      	str	r2, [r3, #4]
      angular_rate_mdps[2] =
        lsm6dsox_from_fs2000_to_mdps(data_raw_angular_rate[2]);
 8004402:	4b40      	ldr	r3, [pc, #256]	@ (8004504 <lsm6dsox_read_data_polling+0x2f4>)
 8004404:	2204      	movs	r2, #4
 8004406:	5e9b      	ldrsh	r3, [r3, r2]
 8004408:	0018      	movs	r0, r3
 800440a:	f7fe fde1 	bl	8002fd0 <lsm6dsox_from_fs2000_to_mdps>
 800440e:	1c02      	adds	r2, r0, #0
      angular_rate_mdps[2] =
 8004410:	4b3d      	ldr	r3, [pc, #244]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 8004412:	609a      	str	r2, [r3, #8]
      sprintf((char *)tx_buffer,
              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004414:	4b3c      	ldr	r3, [pc, #240]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 8004416:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 8004418:	1c18      	adds	r0, r3, #0
 800441a:	f7fe fba1 	bl	8002b60 <__aeabi_f2d>
 800441e:	6038      	str	r0, [r7, #0]
 8004420:	6079      	str	r1, [r7, #4]
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004422:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 8004424:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 8004426:	1c18      	adds	r0, r3, #0
 8004428:	f7fe fb9a 	bl	8002b60 <__aeabi_f2d>
 800442c:	0004      	movs	r4, r0
 800442e:	000d      	movs	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004430:	4b35      	ldr	r3, [pc, #212]	@ (8004508 <lsm6dsox_read_data_polling+0x2f8>)
 8004432:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 8004434:	1c18      	adds	r0, r3, #0
 8004436:	f7fe fb93 	bl	8002b60 <__aeabi_f2d>
 800443a:	0002      	movs	r2, r0
 800443c:	000b      	movs	r3, r1
 800443e:	4933      	ldr	r1, [pc, #204]	@ (800450c <lsm6dsox_read_data_polling+0x2fc>)
 8004440:	482f      	ldr	r0, [pc, #188]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 8004442:	9202      	str	r2, [sp, #8]
 8004444:	9303      	str	r3, [sp, #12]
 8004446:	9400      	str	r4, [sp, #0]
 8004448:	9501      	str	r5, [sp, #4]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 ff9d 	bl	800838c <siprintf>
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004452:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 8004454:	0018      	movs	r0, r3
 8004456:	f7fb fe55 	bl	8000104 <strlen>
 800445a:	0003      	movs	r3, r0
 800445c:	b29a      	uxth	r2, r3
 800445e:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 8004460:	0011      	movs	r1, r2
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f8a2 	bl	80045ac <tx_com>
    }

    lsm6dsox_temp_flag_data_ready_get(&dev_ctx, &reg);
 8004468:	260f      	movs	r6, #15
 800446a:	19ba      	adds	r2, r7, r6
 800446c:	2408      	movs	r4, #8
 800446e:	2508      	movs	r5, #8
 8004470:	1963      	adds	r3, r4, r5
 8004472:	19db      	adds	r3, r3, r7
 8004474:	0011      	movs	r1, r2
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff fa98 	bl	80039ac <lsm6dsox_temp_flag_data_ready_get>

    if (reg) {
 800447c:	19bb      	adds	r3, r7, r6
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d100      	bne.n	8004486 <lsm6dsox_read_data_polling+0x276>
 8004484:	e730      	b.n	80042e8 <lsm6dsox_read_data_polling+0xd8>
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8004486:	4b22      	ldr	r3, [pc, #136]	@ (8004510 <lsm6dsox_read_data_polling+0x300>)
 8004488:	2200      	movs	r2, #0
 800448a:	801a      	strh	r2, [r3, #0]
      lsm6dsox_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800448c:	4a20      	ldr	r2, [pc, #128]	@ (8004510 <lsm6dsox_read_data_polling+0x300>)
 800448e:	1963      	adds	r3, r4, r5
 8004490:	19db      	adds	r3, r3, r7
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f7ff faa4 	bl	80039e2 <lsm6dsox_temperature_raw_get>
      temperature_degC = lsm6dsox_from_lsb_to_celsius(
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <lsm6dsox_read_data_polling+0x300>)
 800449c:	2200      	movs	r2, #0
 800449e:	5e9b      	ldrsh	r3, [r3, r2]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fe fdad 	bl	8003000 <lsm6dsox_from_lsb_to_celsius>
 80044a6:	1c02      	adds	r2, r0, #0
 80044a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004514 <lsm6dsox_read_data_polling+0x304>)
 80044aa:	601a      	str	r2, [r3, #0]
                           data_raw_temperature);
      sprintf((char *)tx_buffer,
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <lsm6dsox_read_data_polling+0x304>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1c18      	adds	r0, r3, #0
 80044b2:	f7fe fb55 	bl	8002b60 <__aeabi_f2d>
 80044b6:	0002      	movs	r2, r0
 80044b8:	000b      	movs	r3, r1
 80044ba:	4917      	ldr	r1, [pc, #92]	@ (8004518 <lsm6dsox_read_data_polling+0x308>)
 80044bc:	4810      	ldr	r0, [pc, #64]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 80044be:	f003 ff65 	bl	800838c <siprintf>
              "Temperature [degC]:%6.2f\r\n", temperature_degC);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7fb fe1d 	bl	8000104 <strlen>
 80044ca:	0003      	movs	r3, r0
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <lsm6dsox_read_data_polling+0x2f0>)
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f86a 	bl	80045ac <tx_com>
  while (1) {
 80044d8:	e706      	b.n	80042e8 <lsm6dsox_read_data_polling+0xd8>
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	08004565 	.word	0x08004565
 80044e4:	080045d9 	.word	0x080045d9
 80044e8:	200001f0 	.word	0x200001f0
 80044ec:	20000270 	.word	0x20000270
 80044f0:	20000271 	.word	0x20000271
 80044f4:	20000244 	.word	0x20000244
 80044f8:	20000254 	.word	0x20000254
 80044fc:	0800c058 	.word	0x0800c058
 8004500:	20000274 	.word	0x20000274
 8004504:	2000024c 	.word	0x2000024c
 8004508:	20000260 	.word	0x20000260
 800450c:	0800c080 	.word	0x0800c080
 8004510:	20000252 	.word	0x20000252
 8004514:	2000026c 	.word	0x2000026c
 8004518:	0800c0a8 	.word	0x0800c0a8

0800451c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af04      	add	r7, sp, #16
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	0008      	movs	r0, r1
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	0019      	movs	r1, r3
 800452a:	240b      	movs	r4, #11
 800452c:	193b      	adds	r3, r7, r4
 800452e:	1c02      	adds	r2, r0, #0
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	2508      	movs	r5, #8
 8004534:	197b      	adds	r3, r7, r5
 8004536:	1c0a      	adds	r2, r1, #0
 8004538:	801a      	strh	r2, [r3, #0]
  HAL_I2C_Mem_Write(handle, LSM6DSOX_I2C_ADD_L, reg,
 800453a:	193b      	adds	r3, r7, r4
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b29a      	uxth	r2, r3
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	23fa      	movs	r3, #250	@ 0xfa
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	9302      	str	r3, [sp, #8]
 8004548:	197b      	adds	r3, r7, r5
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2301      	movs	r3, #1
 8004554:	21d5      	movs	r1, #213	@ 0xd5
 8004556:	f000 fdf3 	bl	8005140 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

  return 0;
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bdb0      	pop	{r4, r5, r7, pc}

08004564 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af04      	add	r7, sp, #16
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	0008      	movs	r0, r1
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	0019      	movs	r1, r3
 8004572:	240b      	movs	r4, #11
 8004574:	193b      	adds	r3, r7, r4
 8004576:	1c02      	adds	r2, r0, #0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	2508      	movs	r5, #8
 800457c:	197b      	adds	r3, r7, r5
 800457e:	1c0a      	adds	r2, r1, #0
 8004580:	801a      	strh	r2, [r3, #0]
  HAL_I2C_Mem_Read(handle, LSM6DSOX_I2C_ADD_L, reg,
 8004582:	193b      	adds	r3, r7, r4
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b29a      	uxth	r2, r3
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	23fa      	movs	r3, #250	@ 0xfa
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	197b      	adds	r3, r7, r5
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2301      	movs	r3, #1
 800459c:	21d5      	movs	r1, #213	@ 0xd5
 800459e:	f000 fefd 	bl	800539c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bdb0      	pop	{r4, r5, r7, pc}

080045ac <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	000a      	movs	r2, r1
 80045b6:	1cbb      	adds	r3, r7, #2
 80045b8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 80045ba:	23fa      	movs	r3, #250	@ 0xfa
 80045bc:	009c      	lsls	r4, r3, #2
 80045be:	1cbb      	adds	r3, r7, #2
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4803      	ldr	r0, [pc, #12]	@ (80045d4 <tx_com+0x28>)
 80045c6:	0023      	movs	r3, r4
 80045c8:	f002 fbbe 	bl	8006d48 <HAL_UART_Transmit>
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b003      	add	sp, #12
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	200006c4 	.word	0x200006c4

080045d8 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 faa8 	bl	8004b38 <HAL_Delay>
}
 80045e8:	46c0      	nop			@ (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  return;
 80045f4:	46c0      	nop			@ (mov r8, r8)
}
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045fe:	b672      	cpsid	i
}
 8004600:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	e7fd      	b.n	8004602 <Error_Handler+0x8>
	...

08004608 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800460c:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <MX_SPI1_Init+0x74>)
 800460e:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <MX_SPI1_Init+0x78>)
 8004610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004612:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <MX_SPI1_Init+0x74>)
 8004614:	2282      	movs	r2, #130	@ 0x82
 8004616:	0052      	lsls	r2, r2, #1
 8004618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <MX_SPI1_Init+0x74>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <MX_SPI1_Init+0x74>)
 8004622:	22c0      	movs	r2, #192	@ 0xc0
 8004624:	0092      	lsls	r2, r2, #2
 8004626:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <MX_SPI1_Init+0x74>)
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800462e:	4b13      	ldr	r3, [pc, #76]	@ (800467c <MX_SPI1_Init+0x74>)
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004634:	4b11      	ldr	r3, [pc, #68]	@ (800467c <MX_SPI1_Init+0x74>)
 8004636:	2280      	movs	r2, #128	@ 0x80
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	4b0f      	ldr	r3, [pc, #60]	@ (800467c <MX_SPI1_Init+0x74>)
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004642:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <MX_SPI1_Init+0x74>)
 8004644:	2200      	movs	r2, #0
 8004646:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004648:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <MX_SPI1_Init+0x74>)
 800464a:	2200      	movs	r2, #0
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <MX_SPI1_Init+0x74>)
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004654:	4b09      	ldr	r3, [pc, #36]	@ (800467c <MX_SPI1_Init+0x74>)
 8004656:	2207      	movs	r2, #7
 8004658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800465a:	4b08      	ldr	r3, [pc, #32]	@ (800467c <MX_SPI1_Init+0x74>)
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <MX_SPI1_Init+0x74>)
 8004662:	2208      	movs	r2, #8
 8004664:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <MX_SPI1_Init+0x74>)
 8004668:	0018      	movs	r0, r3
 800466a:	f002 fa61 	bl	8006b30 <HAL_SPI_Init>
 800466e:	1e03      	subs	r3, r0, #0
 8004670:	d001      	beq.n	8004676 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004672:	f7ff ffc2 	bl	80045fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	2000065c 	.word	0x2000065c
 8004680:	40013000 	.word	0x40013000

08004684 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b08b      	sub	sp, #44	@ 0x2c
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	2414      	movs	r4, #20
 800468e:	193b      	adds	r3, r7, r4
 8004690:	0018      	movs	r0, r3
 8004692:	2314      	movs	r3, #20
 8004694:	001a      	movs	r2, r3
 8004696:	2100      	movs	r1, #0
 8004698:	f004 fe6d 	bl	8009376 <memset>
  if(spiHandle->Instance==SPI1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004714 <HAL_SPI_MspInit+0x90>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d132      	bne.n	800470c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046ac:	2180      	movs	r1, #128	@ 0x80
 80046ae:	0149      	lsls	r1, r1, #5
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]
 80046b4:	4b18      	ldr	r3, [pc, #96]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	4b15      	ldr	r3, [pc, #84]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	4b14      	ldr	r3, [pc, #80]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046c8:	2180      	movs	r1, #128	@ 0x80
 80046ca:	0289      	lsls	r1, r1, #10
 80046cc:	430a      	orrs	r2, r1
 80046ce:	615a      	str	r2, [r3, #20]
 80046d0:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_SPI_MspInit+0x94>)
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80046de:	0021      	movs	r1, r4
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	22e0      	movs	r2, #224	@ 0xe0
 80046e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	187b      	adds	r3, r7, r1
 80046e8:	2202      	movs	r2, #2
 80046ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f2:	187b      	adds	r3, r7, r1
 80046f4:	2203      	movs	r2, #3
 80046f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fe:	187a      	adds	r2, r7, r1
 8004700:	2390      	movs	r3, #144	@ 0x90
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	0011      	movs	r1, r2
 8004706:	0018      	movs	r0, r3
 8004708:	f000 faee 	bl	8004ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b00b      	add	sp, #44	@ 0x2c
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	40013000 	.word	0x40013000
 8004718:	40021000 	.word	0x40021000

0800471c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004722:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <HAL_MspInit+0x44>)
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_MspInit+0x44>)
 8004728:	2101      	movs	r1, #1
 800472a:	430a      	orrs	r2, r1
 800472c:	619a      	str	r2, [r3, #24]
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <HAL_MspInit+0x44>)
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2201      	movs	r2, #1
 8004734:	4013      	ands	r3, r2
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <HAL_MspInit+0x44>)
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	4b08      	ldr	r3, [pc, #32]	@ (8004760 <HAL_MspInit+0x44>)
 8004740:	2180      	movs	r1, #128	@ 0x80
 8004742:	0549      	lsls	r1, r1, #21
 8004744:	430a      	orrs	r2, r1
 8004746:	61da      	str	r2, [r3, #28]
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_MspInit+0x44>)
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	055b      	lsls	r3, r3, #21
 8004750:	4013      	ands	r3, r2
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	40021000 	.word	0x40021000

08004764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	e7fd      	b.n	8004768 <NMI_Handler+0x4>

0800476c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004770:	46c0      	nop			@ (mov r8, r8)
 8004772:	e7fd      	b.n	8004770 <HardFault_Handler+0x4>

08004774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f000 f9b8 	bl	8004b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	af00      	add	r7, sp, #0
  return 1;
 800479a:	2301      	movs	r3, #1
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <_kill>:

int _kill(int pid, int sig)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047ac:	f004 fdf0 	bl	8009390 <__errno>
 80047b0:	0003      	movs	r3, r0
 80047b2:	2216      	movs	r2, #22
 80047b4:	601a      	str	r2, [r3, #0]
  return -1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	425b      	negs	r3, r3
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_exit>:

void _exit (int status)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047ca:	2301      	movs	r3, #1
 80047cc:	425a      	negs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0011      	movs	r1, r2
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff ffe5 	bl	80047a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047d8:	46c0      	nop			@ (mov r8, r8)
 80047da:	e7fd      	b.n	80047d8 <_exit+0x16>

080047dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e00a      	b.n	8004804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047ee:	e000      	b.n	80047f2 <_read+0x16>
 80047f0:	bf00      	nop
 80047f2:	0001      	movs	r1, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	60ba      	str	r2, [r7, #8]
 80047fa:	b2ca      	uxtb	r2, r1
 80047fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	3301      	adds	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	dbf0      	blt.n	80047ee <_read+0x12>
  }

  return len;
 800480c:	687b      	ldr	r3, [r7, #4]
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b006      	add	sp, #24
 8004814:	bd80      	pop	{r7, pc}

08004816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e009      	b.n	800483c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	60ba      	str	r2, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	0018      	movs	r0, r3
 8004832:	e000      	b.n	8004836 <_write+0x20>
 8004834:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	dbf1      	blt.n	8004828 <_write+0x12>
  }
  return len;
 8004844:	687b      	ldr	r3, [r7, #4]
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b006      	add	sp, #24
 800484c:	bd80      	pop	{r7, pc}

0800484e <_close>:

int _close(int file)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004856:	2301      	movs	r3, #1
 8004858:	425b      	negs	r3, r3
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}

08004862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	0192      	lsls	r2, r2, #6
 8004872:	605a      	str	r2, [r3, #4]
  return 0;
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}

0800487e <_isatty>:

int _isatty(int file)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004886:	2301      	movs	r3, #1
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800489c:	2300      	movs	r3, #0
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048b0:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <_sbrk+0x5c>)
 80048b2:	4b15      	ldr	r3, [pc, #84]	@ (8004908 <_sbrk+0x60>)
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048bc:	4b13      	ldr	r3, [pc, #76]	@ (800490c <_sbrk+0x64>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <_sbrk+0x64>)
 80048c6:	4a12      	ldr	r2, [pc, #72]	@ (8004910 <_sbrk+0x68>)
 80048c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ca:	4b10      	ldr	r3, [pc, #64]	@ (800490c <_sbrk+0x64>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d207      	bcs.n	80048e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048d8:	f004 fd5a 	bl	8009390 <__errno>
 80048dc:	0003      	movs	r3, r0
 80048de:	220c      	movs	r2, #12
 80048e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	425b      	negs	r3, r3
 80048e6:	e009      	b.n	80048fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048e8:	4b08      	ldr	r3, [pc, #32]	@ (800490c <_sbrk+0x64>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048ee:	4b07      	ldr	r3, [pc, #28]	@ (800490c <_sbrk+0x64>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	18d2      	adds	r2, r2, r3
 80048f6:	4b05      	ldr	r3, [pc, #20]	@ (800490c <_sbrk+0x64>)
 80048f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80048fa:	68fb      	ldr	r3, [r7, #12]
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b006      	add	sp, #24
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20008000 	.word	0x20008000
 8004908:	00000400 	.word	0x00000400
 800490c:	200006c0 	.word	0x200006c0
 8004910:	200008a0 	.word	0x200008a0

08004914 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004924:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004926:	4a15      	ldr	r2, [pc, #84]	@ (800497c <MX_USART1_UART_Init+0x5c>)
 8004928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800492a:	4b13      	ldr	r3, [pc, #76]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 800492c:	22e1      	movs	r2, #225	@ 0xe1
 800492e:	0252      	lsls	r2, r2, #9
 8004930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004932:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004934:	2200      	movs	r2, #0
 8004936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004938:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 800493a:	2200      	movs	r2, #0
 800493c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800493e:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004940:	2200      	movs	r2, #0
 8004942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004946:	220c      	movs	r2, #12
 8004948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004950:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004952:	2200      	movs	r2, #0
 8004954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004956:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 800495e:	2200      	movs	r2, #0
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004962:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <MX_USART1_UART_Init+0x58>)
 8004964:	0018      	movs	r0, r3
 8004966:	f002 f99b 	bl	8006ca0 <HAL_UART_Init>
 800496a:	1e03      	subs	r3, r0, #0
 800496c:	d001      	beq.n	8004972 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800496e:	f7ff fe44 	bl	80045fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200006c4 	.word	0x200006c4
 800497c:	40013800 	.word	0x40013800

08004980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b08b      	sub	sp, #44	@ 0x2c
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	2414      	movs	r4, #20
 800498a:	193b      	adds	r3, r7, r4
 800498c:	0018      	movs	r0, r3
 800498e:	2314      	movs	r3, #20
 8004990:	001a      	movs	r2, r3
 8004992:	2100      	movs	r1, #0
 8004994:	f004 fcef 	bl	8009376 <memset>
  if(uartHandle->Instance==USART1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <HAL_UART_MspInit+0x90>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d131      	bne.n	8004a06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049a8:	2180      	movs	r1, #128	@ 0x80
 80049aa:	01c9      	lsls	r1, r1, #7
 80049ac:	430a      	orrs	r2, r1
 80049ae:	619a      	str	r2, [r3, #24]
 80049b0:	4b18      	ldr	r3, [pc, #96]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049c4:	2180      	movs	r1, #128	@ 0x80
 80049c6:	02c9      	lsls	r1, r1, #11
 80049c8:	430a      	orrs	r2, r1
 80049ca:	615a      	str	r2, [r3, #20]
 80049cc:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_UART_MspInit+0x94>)
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	02db      	lsls	r3, r3, #11
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049da:	0021      	movs	r1, r4
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	22c0      	movs	r2, #192	@ 0xc0
 80049e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	2202      	movs	r2, #2
 80049e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	2203      	movs	r2, #3
 80049f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	4a06      	ldr	r2, [pc, #24]	@ (8004a18 <HAL_UART_MspInit+0x98>)
 80049fe:	0019      	movs	r1, r3
 8004a00:	0010      	movs	r0, r2
 8004a02:	f000 f971 	bl	8004ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b00b      	add	sp, #44	@ 0x2c
 8004a0c:	bd90      	pop	{r4, r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	48000400 	.word	0x48000400

08004a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004a1c:	480d      	ldr	r0, [pc, #52]	@ (8004a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a20:	f7ff ff78 	bl	8004914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a24:	480c      	ldr	r0, [pc, #48]	@ (8004a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a26:	490d      	ldr	r1, [pc, #52]	@ (8004a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a28:	4a0d      	ldr	r2, [pc, #52]	@ (8004a60 <LoopForever+0xe>)
  movs r3, #0
 8004a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a2c:	e002      	b.n	8004a34 <LoopCopyDataInit>

08004a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a32:	3304      	adds	r3, #4

08004a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a38:	d3f9      	bcc.n	8004a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a68 <LoopForever+0x16>)
  movs r3, #0
 8004a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a40:	e001      	b.n	8004a46 <LoopFillZerobss>

08004a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a44:	3204      	adds	r2, #4

08004a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a48:	d3fb      	bcc.n	8004a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a4a:	f004 fca7 	bl	800939c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a4e:	f7ff fb49 	bl	80040e4 <main>

08004a52 <LoopForever>:

LoopForever:
    b LoopForever
 8004a52:	e7fe      	b.n	8004a52 <LoopForever>
  ldr   r0, =_estack
 8004a54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004a60:	0800c5ec 	.word	0x0800c5ec
  ldr r2, =_sbss
 8004a64:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004a68:	2000089c 	.word	0x2000089c

08004a6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a6c:	e7fe      	b.n	8004a6c <ADC1_COMP_IRQHandler>
	...

08004a70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a74:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <HAL_Init+0x24>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_Init+0x24>)
 8004a7a:	2110      	movs	r1, #16
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f000 f809 	bl	8004a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a86:	f7ff fe49 	bl	800471c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	40022000 	.word	0x40022000

08004a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004aa0:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <HAL_InitTick+0x5c>)
 8004aa2:	681c      	ldr	r4, [r3, #0]
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <HAL_InitTick+0x60>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	23fa      	movs	r3, #250	@ 0xfa
 8004aac:	0098      	lsls	r0, r3, #2
 8004aae:	f7fb fb45 	bl	800013c <__udivsi3>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f7fb fb40 	bl	800013c <__udivsi3>
 8004abc:	0003      	movs	r3, r0
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 f905 	bl	8004cce <HAL_SYSTICK_Config>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e00f      	b.n	8004aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d80b      	bhi.n	8004aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	425b      	negs	r3, r3
 8004ad8:	2200      	movs	r2, #0
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 f8e2 	bl	8004ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_InitTick+0x64>)
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b003      	add	sp, #12
 8004af2:	bd90      	pop	{r4, r7, pc}
 8004af4:	20000000 	.word	0x20000000
 8004af8:	20000008 	.word	0x20000008
 8004afc:	20000004 	.word	0x20000004

08004b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b04:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_IncTick+0x1c>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	001a      	movs	r2, r3
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_IncTick+0x20>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	18d2      	adds	r2, r2, r3
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <HAL_IncTick+0x20>)
 8004b12:	601a      	str	r2, [r3, #0]
}
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	20000008 	.word	0x20000008
 8004b20:	2000074c 	.word	0x2000074c

08004b24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  return uwTick;
 8004b28:	4b02      	ldr	r3, [pc, #8]	@ (8004b34 <HAL_GetTick+0x10>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	2000074c 	.word	0x2000074c

08004b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7ff fff0 	bl	8004b24 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	d005      	beq.n	8004b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b52:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <HAL_Delay+0x44>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	001a      	movs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	f7ff ffe0 	bl	8004b24 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d8f7      	bhi.n	8004b60 <HAL_Delay+0x28>
  {
  }
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46c0      	nop			@ (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	20000008 	.word	0x20000008

08004b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	0002      	movs	r2, r0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	1dfb      	adds	r3, r7, #7
 8004b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	1dfb      	adds	r3, r7, #7
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b94:	d828      	bhi.n	8004be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b96:	4a2f      	ldr	r2, [pc, #188]	@ (8004c54 <__NVIC_SetPriority+0xd4>)
 8004b98:	1dfb      	adds	r3, r7, #7
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	33c0      	adds	r3, #192	@ 0xc0
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	589b      	ldr	r3, [r3, r2]
 8004ba6:	1dfa      	adds	r2, r7, #7
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	0011      	movs	r1, r2
 8004bac:	2203      	movs	r2, #3
 8004bae:	400a      	ands	r2, r1
 8004bb0:	00d2      	lsls	r2, r2, #3
 8004bb2:	21ff      	movs	r1, #255	@ 0xff
 8004bb4:	4091      	lsls	r1, r2
 8004bb6:	000a      	movs	r2, r1
 8004bb8:	43d2      	mvns	r2, r2
 8004bba:	401a      	ands	r2, r3
 8004bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	1dfb      	adds	r3, r7, #7
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	2303      	movs	r3, #3
 8004bce:	4003      	ands	r3, r0
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bd4:	481f      	ldr	r0, [pc, #124]	@ (8004c54 <__NVIC_SetPriority+0xd4>)
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	430a      	orrs	r2, r1
 8004be0:	33c0      	adds	r3, #192	@ 0xc0
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004be6:	e031      	b.n	8004c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <__NVIC_SetPriority+0xd8>)
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	0019      	movs	r1, r3
 8004bf0:	230f      	movs	r3, #15
 8004bf2:	400b      	ands	r3, r1
 8004bf4:	3b08      	subs	r3, #8
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	3306      	adds	r3, #6
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	3304      	adds	r3, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1dfa      	adds	r2, r7, #7
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	0011      	movs	r1, r2
 8004c08:	2203      	movs	r2, #3
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	00d2      	lsls	r2, r2, #3
 8004c0e:	21ff      	movs	r1, #255	@ 0xff
 8004c10:	4091      	lsls	r1, r2
 8004c12:	000a      	movs	r2, r1
 8004c14:	43d2      	mvns	r2, r2
 8004c16:	401a      	ands	r2, r3
 8004c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	22ff      	movs	r2, #255	@ 0xff
 8004c20:	401a      	ands	r2, r3
 8004c22:	1dfb      	adds	r3, r7, #7
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	0018      	movs	r0, r3
 8004c28:	2303      	movs	r3, #3
 8004c2a:	4003      	ands	r3, r0
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c30:	4809      	ldr	r0, [pc, #36]	@ (8004c58 <__NVIC_SetPriority+0xd8>)
 8004c32:	1dfb      	adds	r3, r7, #7
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	001c      	movs	r4, r3
 8004c38:	230f      	movs	r3, #15
 8004c3a:	4023      	ands	r3, r4
 8004c3c:	3b08      	subs	r3, #8
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	430a      	orrs	r2, r1
 8004c42:	3306      	adds	r3, #6
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	18c3      	adds	r3, r0, r3
 8004c48:	3304      	adds	r3, #4
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	46c0      	nop			@ (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b003      	add	sp, #12
 8004c52:	bd90      	pop	{r4, r7, pc}
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	045b      	lsls	r3, r3, #17
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d301      	bcc.n	8004c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c70:	2301      	movs	r3, #1
 8004c72:	e010      	b.n	8004c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <SysTick_Config+0x44>)
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	425b      	negs	r3, r3
 8004c80:	2103      	movs	r1, #3
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7ff ff7c 	bl	8004b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SysTick_Config+0x44>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <SysTick_Config+0x44>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	210f      	movs	r1, #15
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	1c02      	adds	r2, r0, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	0011      	movs	r1, r2
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff ff5d 	bl	8004b80 <__NVIC_SetPriority>
}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b004      	add	sp, #16
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff ffbf 	bl	8004c5c <SysTick_Config>
 8004cde:	0003      	movs	r3, r0
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cf6:	e155      	b.n	8004fa4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4091      	lsls	r1, r2
 8004d02:	000a      	movs	r2, r1
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d100      	bne.n	8004d10 <HAL_GPIO_Init+0x28>
 8004d0e:	e146      	b.n	8004f9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d005      	beq.n	8004d28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2203      	movs	r2, #3
 8004d22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d130      	bne.n	8004d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	2203      	movs	r2, #3
 8004d34:	409a      	lsls	r2, r3
 8004d36:	0013      	movs	r3, r2
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	0013      	movs	r3, r2
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d5e:	2201      	movs	r2, #1
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	409a      	lsls	r2, r3
 8004d64:	0013      	movs	r3, r2
 8004d66:	43da      	mvns	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	2201      	movs	r2, #1
 8004d76:	401a      	ands	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	0013      	movs	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d017      	beq.n	8004dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	409a      	lsls	r2, r3
 8004da4:	0013      	movs	r3, r2
 8004da6:	43da      	mvns	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	409a      	lsls	r2, r3
 8004db8:	0013      	movs	r3, r2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d123      	bne.n	8004e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	08da      	lsrs	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3208      	adds	r2, #8
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	58d3      	ldr	r3, [r2, r3]
 8004dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2207      	movs	r2, #7
 8004de4:	4013      	ands	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	220f      	movs	r2, #15
 8004dea:	409a      	lsls	r2, r3
 8004dec:	0013      	movs	r3, r2
 8004dee:	43da      	mvns	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4013      	ands	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2107      	movs	r1, #7
 8004dfe:	400b      	ands	r3, r1
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	409a      	lsls	r2, r3
 8004e04:	0013      	movs	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	2203      	movs	r2, #3
 8004e26:	409a      	lsls	r2, r3
 8004e28:	0013      	movs	r3, r2
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2203      	movs	r2, #3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	0013      	movs	r3, r2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	23c0      	movs	r3, #192	@ 0xc0
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	4013      	ands	r3, r2
 8004e58:	d100      	bne.n	8004e5c <HAL_GPIO_Init+0x174>
 8004e5a:	e0a0      	b.n	8004f9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5c:	4b57      	ldr	r3, [pc, #348]	@ (8004fbc <HAL_GPIO_Init+0x2d4>)
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	4b56      	ldr	r3, [pc, #344]	@ (8004fbc <HAL_GPIO_Init+0x2d4>)
 8004e62:	2101      	movs	r1, #1
 8004e64:	430a      	orrs	r2, r1
 8004e66:	619a      	str	r2, [r3, #24]
 8004e68:	4b54      	ldr	r3, [pc, #336]	@ (8004fbc <HAL_GPIO_Init+0x2d4>)
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e74:	4a52      	ldr	r2, [pc, #328]	@ (8004fc0 <HAL_GPIO_Init+0x2d8>)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	589b      	ldr	r3, [r3, r2]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2203      	movs	r2, #3
 8004e86:	4013      	ands	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	220f      	movs	r2, #15
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	0013      	movs	r3, r2
 8004e90:	43da      	mvns	r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	2390      	movs	r3, #144	@ 0x90
 8004e9c:	05db      	lsls	r3, r3, #23
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d019      	beq.n	8004ed6 <HAL_GPIO_Init+0x1ee>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	@ (8004fc4 <HAL_GPIO_Init+0x2dc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_GPIO_Init+0x1ea>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a46      	ldr	r2, [pc, #280]	@ (8004fc8 <HAL_GPIO_Init+0x2e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00d      	beq.n	8004ece <HAL_GPIO_Init+0x1e6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a45      	ldr	r2, [pc, #276]	@ (8004fcc <HAL_GPIO_Init+0x2e4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_GPIO_Init+0x1e2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a44      	ldr	r2, [pc, #272]	@ (8004fd0 <HAL_GPIO_Init+0x2e8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_GPIO_Init+0x1de>
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	e008      	b.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004ec6:	2305      	movs	r3, #5
 8004ec8:	e006      	b.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e004      	b.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	2103      	movs	r1, #3
 8004edc:	400a      	ands	r2, r1
 8004ede:	0092      	lsls	r2, r2, #2
 8004ee0:	4093      	lsls	r3, r2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ee8:	4935      	ldr	r1, [pc, #212]	@ (8004fc0 <HAL_GPIO_Init+0x2d8>)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	3302      	adds	r3, #2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ef6:	4b37      	ldr	r3, [pc, #220]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	43da      	mvns	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	2380      	movs	r3, #128	@ 0x80
 8004f0c:	035b      	lsls	r3, r3, #13
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f20:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	039b      	lsls	r3, r3, #14
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f44:	4b23      	ldr	r3, [pc, #140]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004f4a:	4b22      	ldr	r3, [pc, #136]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43da      	mvns	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	2380      	movs	r3, #128	@ 0x80
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	4013      	ands	r3, r2
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f6e:	4b19      	ldr	r3, [pc, #100]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004f74:	4b17      	ldr	r3, [pc, #92]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	025b      	lsls	r3, r3, #9
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f98:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <HAL_GPIO_Init+0x2ec>)
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	40da      	lsrs	r2, r3
 8004fac:	1e13      	subs	r3, r2, #0
 8004fae:	d000      	beq.n	8004fb2 <HAL_GPIO_Init+0x2ca>
 8004fb0:	e6a2      	b.n	8004cf8 <HAL_GPIO_Init+0x10>
  } 
}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b006      	add	sp, #24
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	48000400 	.word	0x48000400
 8004fc8:	48000800 	.word	0x48000800
 8004fcc:	48000c00 	.word	0x48000c00
 8004fd0:	48001000 	.word	0x48001000
 8004fd4:	40010400 	.word	0x40010400

08004fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	0008      	movs	r0, r1
 8004fe2:	0011      	movs	r1, r2
 8004fe4:	1cbb      	adds	r3, r7, #2
 8004fe6:	1c02      	adds	r2, r0, #0
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	1c7b      	adds	r3, r7, #1
 8004fec:	1c0a      	adds	r2, r1, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ff0:	1c7b      	adds	r3, r7, #1
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ff8:	1cbb      	adds	r3, r7, #2
 8004ffa:	881a      	ldrh	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005000:	e003      	b.n	800500a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005002:	1cbb      	adds	r3, r7, #2
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e082      	b.n	800512c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2241      	movs	r2, #65	@ 0x41
 800502a:	5c9b      	ldrb	r3, [r3, r2]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2240      	movs	r2, #64	@ 0x40
 8005036:	2100      	movs	r1, #0
 8005038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f7fd ff0f 	bl	8002e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2241      	movs	r2, #65	@ 0x41
 8005046:	2124      	movs	r1, #36	@ 0x24
 8005048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4934      	ldr	r1, [pc, #208]	@ (8005134 <HAL_I2C_Init+0x120>)
 8005064:	400a      	ands	r2, r1
 8005066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4931      	ldr	r1, [pc, #196]	@ (8005138 <HAL_I2C_Init+0x124>)
 8005074:	400a      	ands	r2, r1
 8005076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d108      	bne.n	8005092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2180      	movs	r1, #128	@ 0x80
 800508a:	0209      	lsls	r1, r1, #8
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	e007      	b.n	80050a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2184      	movs	r1, #132	@ 0x84
 800509c:	0209      	lsls	r1, r1, #8
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d104      	bne.n	80050b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2280      	movs	r2, #128	@ 0x80
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	491f      	ldr	r1, [pc, #124]	@ (800513c <HAL_I2C_Init+0x128>)
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	491a      	ldr	r1, [pc, #104]	@ (8005138 <HAL_I2C_Init+0x124>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	431a      	orrs	r2, r3
 80050de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69d9      	ldr	r1, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2101      	movs	r1, #1
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2241      	movs	r2, #65	@ 0x41
 8005118:	2120      	movs	r1, #32
 800511a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2242      	movs	r2, #66	@ 0x42
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}
 8005134:	f0ffffff 	.word	0xf0ffffff
 8005138:	ffff7fff 	.word	0xffff7fff
 800513c:	02008000 	.word	0x02008000

08005140 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	000c      	movs	r4, r1
 800514a:	0010      	movs	r0, r2
 800514c:	0019      	movs	r1, r3
 800514e:	230a      	movs	r3, #10
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	1c22      	adds	r2, r4, #0
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	2308      	movs	r3, #8
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	1c02      	adds	r2, r0, #0
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	1dbb      	adds	r3, r7, #6
 8005160:	1c0a      	adds	r2, r1, #0
 8005162:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2241      	movs	r2, #65	@ 0x41
 8005168:	5c9b      	ldrb	r3, [r3, r2]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	d000      	beq.n	8005172 <HAL_I2C_Mem_Write+0x32>
 8005170:	e10c      	b.n	800538c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_I2C_Mem_Write+0x42>
 8005178:	232c      	movs	r3, #44	@ 0x2c
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2280      	movs	r2, #128	@ 0x80
 8005186:	0092      	lsls	r2, r2, #2
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0ff      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2240      	movs	r2, #64	@ 0x40
 8005192:	5c9b      	ldrb	r3, [r3, r2]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_I2C_Mem_Write+0x5c>
 8005198:	2302      	movs	r3, #2
 800519a:	e0f8      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	2101      	movs	r1, #1
 80051a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051a4:	f7ff fcbe 	bl	8004b24 <HAL_GetTick>
 80051a8:	0003      	movs	r3, r0
 80051aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	0219      	lsls	r1, r3, #8
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2319      	movs	r3, #25
 80051b8:	2201      	movs	r2, #1
 80051ba:	f000 fc25 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80051be:	1e03      	subs	r3, r0, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0e3      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2241      	movs	r2, #65	@ 0x41
 80051ca:	2121      	movs	r1, #33	@ 0x21
 80051cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2242      	movs	r2, #66	@ 0x42
 80051d2:	2140      	movs	r1, #64	@ 0x40
 80051d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	222c      	movs	r2, #44	@ 0x2c
 80051e6:	18ba      	adds	r2, r7, r2
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051f2:	1dbb      	adds	r3, r7, #6
 80051f4:	881c      	ldrh	r4, [r3, #0]
 80051f6:	2308      	movs	r3, #8
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	230a      	movs	r3, #10
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	8819      	ldrh	r1, [r3, #0]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	0023      	movs	r3, r4
 800520e:	f000 fb13 	bl	8005838 <I2C_RequestMemoryWrite>
 8005212:	1e03      	subs	r3, r0, #0
 8005214:	d005      	beq.n	8005222 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2240      	movs	r2, #64	@ 0x40
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0b5      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2bff      	cmp	r3, #255	@ 0xff
 800522a:	d911      	bls.n	8005250 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	22ff      	movs	r2, #255	@ 0xff
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	b2da      	uxtb	r2, r3
 8005238:	2380      	movs	r3, #128	@ 0x80
 800523a:	045c      	lsls	r4, r3, #17
 800523c:	230a      	movs	r3, #10
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	8819      	ldrh	r1, [r3, #0]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	2300      	movs	r3, #0
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	0023      	movs	r3, r4
 800524a:	f000 fdad 	bl	8005da8 <I2C_TransferConfig>
 800524e:	e012      	b.n	8005276 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	b2da      	uxtb	r2, r3
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	049c      	lsls	r4, r3, #18
 8005264:	230a      	movs	r3, #10
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	8819      	ldrh	r1, [r3, #0]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	0023      	movs	r3, r4
 8005272:	f000 fd99 	bl	8005da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 fc11 	bl	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005282:	1e03      	subs	r3, r0, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e081      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03a      	beq.n	800533a <HAL_I2C_Mem_Write+0x1fa>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d136      	bne.n	800533a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	0013      	movs	r3, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	2180      	movs	r1, #128	@ 0x80
 80052da:	f000 fb95 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80052de:	1e03      	subs	r3, r0, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e053      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2bff      	cmp	r3, #255	@ 0xff
 80052ee:	d911      	bls.n	8005314 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	22ff      	movs	r2, #255	@ 0xff
 80052f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	045c      	lsls	r4, r3, #17
 8005300:	230a      	movs	r3, #10
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	8819      	ldrh	r1, [r3, #0]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	0023      	movs	r3, r4
 800530e:	f000 fd4b 	bl	8005da8 <I2C_TransferConfig>
 8005312:	e012      	b.n	800533a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005322:	b2da      	uxtb	r2, r3
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	049c      	lsls	r4, r3, #18
 8005328:	230a      	movs	r3, #10
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	8819      	ldrh	r1, [r3, #0]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	0023      	movs	r3, r4
 8005336:	f000 fd37 	bl	8005da8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d198      	bne.n	8005276 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 fbf0 	bl	8005b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005350:	1e03      	subs	r3, r0, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e01a      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2220      	movs	r2, #32
 800535e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	490b      	ldr	r1, [pc, #44]	@ (8005398 <HAL_I2C_Mem_Write+0x258>)
 800536c:	400a      	ands	r2, r1
 800536e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2241      	movs	r2, #65	@ 0x41
 8005374:	2120      	movs	r1, #32
 8005376:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2242      	movs	r2, #66	@ 0x42
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2240      	movs	r2, #64	@ 0x40
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b007      	add	sp, #28
 8005394:	bd90      	pop	{r4, r7, pc}
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	fe00e800 	.word	0xfe00e800

0800539c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b089      	sub	sp, #36	@ 0x24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	000c      	movs	r4, r1
 80053a6:	0010      	movs	r0, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	230a      	movs	r3, #10
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	1c22      	adds	r2, r4, #0
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	2308      	movs	r3, #8
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	1c02      	adds	r2, r0, #0
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	1dbb      	adds	r3, r7, #6
 80053bc:	1c0a      	adds	r2, r1, #0
 80053be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2241      	movs	r2, #65	@ 0x41
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d000      	beq.n	80053ce <HAL_I2C_Mem_Read+0x32>
 80053cc:	e110      	b.n	80055f0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_I2C_Mem_Read+0x42>
 80053d4:	232c      	movs	r3, #44	@ 0x2c
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	0092      	lsls	r2, r2, #2
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e103      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2240      	movs	r2, #64	@ 0x40
 80053ee:	5c9b      	ldrb	r3, [r3, r2]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2C_Mem_Read+0x5c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e0fc      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	@ 0x40
 80053fc:	2101      	movs	r1, #1
 80053fe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005400:	f7ff fb90 	bl	8004b24 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	0219      	lsls	r1, r3, #8
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2319      	movs	r3, #25
 8005414:	2201      	movs	r2, #1
 8005416:	f000 faf7 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 800541a:	1e03      	subs	r3, r0, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0e7      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2241      	movs	r2, #65	@ 0x41
 8005426:	2122      	movs	r1, #34	@ 0x22
 8005428:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2242      	movs	r2, #66	@ 0x42
 800542e:	2140      	movs	r1, #64	@ 0x40
 8005430:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	222c      	movs	r2, #44	@ 0x2c
 8005442:	18ba      	adds	r2, r7, r2
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544e:	1dbb      	adds	r3, r7, #6
 8005450:	881c      	ldrh	r4, [r3, #0]
 8005452:	2308      	movs	r3, #8
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	230a      	movs	r3, #10
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	8819      	ldrh	r1, [r3, #0]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	0023      	movs	r3, r4
 800546a:	f000 fa49 	bl	8005900 <I2C_RequestMemoryRead>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d005      	beq.n	800547e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2240      	movs	r2, #64	@ 0x40
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e0b9      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	2bff      	cmp	r3, #255	@ 0xff
 8005486:	d911      	bls.n	80054ac <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	22ff      	movs	r2, #255	@ 0xff
 800548c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005492:	b2da      	uxtb	r2, r3
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	045c      	lsls	r4, r3, #17
 8005498:	230a      	movs	r3, #10
 800549a:	18fb      	adds	r3, r7, r3
 800549c:	8819      	ldrh	r1, [r3, #0]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	4b56      	ldr	r3, [pc, #344]	@ (80055fc <HAL_I2C_Mem_Read+0x260>)
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	0023      	movs	r3, r4
 80054a6:	f000 fc7f 	bl	8005da8 <I2C_TransferConfig>
 80054aa:	e012      	b.n	80054d2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	2380      	movs	r3, #128	@ 0x80
 80054be:	049c      	lsls	r4, r3, #18
 80054c0:	230a      	movs	r3, #10
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	8819      	ldrh	r1, [r3, #0]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	4b4c      	ldr	r3, [pc, #304]	@ (80055fc <HAL_I2C_Mem_Read+0x260>)
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	0023      	movs	r3, r4
 80054ce:	f000 fc6b 	bl	8005da8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	0013      	movs	r3, r2
 80054dc:	2200      	movs	r2, #0
 80054de:	2104      	movs	r1, #4
 80054e0:	f000 fa92 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e082      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d03a      	beq.n	800559e <HAL_I2C_Mem_Read+0x202>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d136      	bne.n	800559e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	0013      	movs	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	2180      	movs	r1, #128	@ 0x80
 800553e:	f000 fa63 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e053      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2bff      	cmp	r3, #255	@ 0xff
 8005552:	d911      	bls.n	8005578 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	22ff      	movs	r2, #255	@ 0xff
 8005558:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	b2da      	uxtb	r2, r3
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	045c      	lsls	r4, r3, #17
 8005564:	230a      	movs	r3, #10
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	8819      	ldrh	r1, [r3, #0]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	0023      	movs	r3, r4
 8005572:	f000 fc19 	bl	8005da8 <I2C_TransferConfig>
 8005576:	e012      	b.n	800559e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	2380      	movs	r3, #128	@ 0x80
 800558a:	049c      	lsls	r4, r3, #18
 800558c:	230a      	movs	r3, #10
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	8819      	ldrh	r1, [r3, #0]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	0023      	movs	r3, r4
 800559a:	f000 fc05 	bl	8005da8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d194      	bne.n	80054d2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 fabe 	bl	8005b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d001      	beq.n	80055bc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01a      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2220      	movs	r2, #32
 80055c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	490c      	ldr	r1, [pc, #48]	@ (8005600 <HAL_I2C_Mem_Read+0x264>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2241      	movs	r2, #65	@ 0x41
 80055d8:	2120      	movs	r1, #32
 80055da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2242      	movs	r2, #66	@ 0x42
 80055e0:	2100      	movs	r1, #0
 80055e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2240      	movs	r2, #64	@ 0x40
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b007      	add	sp, #28
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	80002400 	.word	0x80002400
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	@ 0x28
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	230a      	movs	r3, #10
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	1c0a      	adds	r2, r1, #0
 8005616:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2241      	movs	r2, #65	@ 0x41
 8005620:	5c9b      	ldrb	r3, [r3, r2]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b20      	cmp	r3, #32
 8005626:	d000      	beq.n	800562a <HAL_I2C_IsDeviceReady+0x26>
 8005628:	e0fd      	b.n	8005826 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	401a      	ands	r2, r3
 8005636:	2380      	movs	r3, #128	@ 0x80
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	429a      	cmp	r2, r3
 800563c:	d101      	bne.n	8005642 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
 8005640:	e0f2      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2240      	movs	r2, #64	@ 0x40
 8005646:	5c9b      	ldrb	r3, [r3, r2]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_I2C_IsDeviceReady+0x4c>
 800564c:	2302      	movs	r3, #2
 800564e:	e0eb      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2240      	movs	r2, #64	@ 0x40
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2241      	movs	r2, #65	@ 0x41
 800565c:	2124      	movs	r1, #36	@ 0x24
 800565e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_I2C_IsDeviceReady+0x7a>
 800566e:	230a      	movs	r3, #10
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	059b      	lsls	r3, r3, #22
 8005676:	0d9b      	lsrs	r3, r3, #22
 8005678:	4a6d      	ldr	r2, [pc, #436]	@ (8005830 <HAL_I2C_IsDeviceReady+0x22c>)
 800567a:	431a      	orrs	r2, r3
 800567c:	e006      	b.n	800568c <HAL_I2C_IsDeviceReady+0x88>
 800567e:	230a      	movs	r3, #10
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	059b      	lsls	r3, r3, #22
 8005686:	0d9b      	lsrs	r3, r3, #22
 8005688:	4a6a      	ldr	r2, [pc, #424]	@ (8005834 <HAL_I2C_IsDeviceReady+0x230>)
 800568a:	431a      	orrs	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005692:	f7ff fa47 	bl	8004b24 <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2220      	movs	r2, #32
 80056a2:	4013      	ands	r3, r2
 80056a4:	3b20      	subs	r3, #32
 80056a6:	425a      	negs	r2, r3
 80056a8:	4153      	adcs	r3, r2
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	231f      	movs	r3, #31
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2210      	movs	r2, #16
 80056ba:	4013      	ands	r3, r2
 80056bc:	3b10      	subs	r3, #16
 80056be:	425a      	negs	r2, r3
 80056c0:	4153      	adcs	r3, r2
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	231e      	movs	r3, #30
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056ca:	e035      	b.n	8005738 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	d01a      	beq.n	8005708 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7ff fa27 	bl	8004b24 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <HAL_I2C_IsDeviceReady+0xe4>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10f      	bne.n	8005708 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2241      	movs	r2, #65	@ 0x41
 80056ec:	2120      	movs	r1, #32
 80056ee:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	2220      	movs	r2, #32
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2240      	movs	r2, #64	@ 0x40
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e08f      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2220      	movs	r2, #32
 8005710:	4013      	ands	r3, r2
 8005712:	3b20      	subs	r3, #32
 8005714:	425a      	negs	r2, r3
 8005716:	4153      	adcs	r3, r2
 8005718:	b2da      	uxtb	r2, r3
 800571a:	231f      	movs	r3, #31
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2210      	movs	r2, #16
 8005728:	4013      	ands	r3, r2
 800572a:	3b10      	subs	r3, #16
 800572c:	425a      	negs	r2, r3
 800572e:	4153      	adcs	r3, r2
 8005730:	b2da      	uxtb	r2, r3
 8005732:	231e      	movs	r3, #30
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005738:	231f      	movs	r3, #31
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_I2C_IsDeviceReady+0x148>
 8005742:	231e      	movs	r3, #30
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0bf      	beq.n	80056cc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2210      	movs	r2, #16
 8005754:	4013      	ands	r3, r2
 8005756:	2b10      	cmp	r3, #16
 8005758:	d01a      	beq.n	8005790 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	0013      	movs	r3, r2
 8005764:	2200      	movs	r2, #0
 8005766:	2120      	movs	r1, #32
 8005768:	f000 f94e 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e059      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2220      	movs	r2, #32
 800577a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2241      	movs	r2, #65	@ 0x41
 8005780:	2120      	movs	r1, #32
 8005782:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	2100      	movs	r1, #0
 800578a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e04b      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	0013      	movs	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	2120      	movs	r1, #32
 800579e:	f000 f933 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80057a2:	1e03      	subs	r3, r0, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e03e      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2210      	movs	r2, #16
 80057b0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2220      	movs	r2, #32
 80057b8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d119      	bne.n	80057f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2180      	movs	r1, #128	@ 0x80
 80057ce:	01c9      	lsls	r1, r1, #7
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	0013      	movs	r3, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	2120      	movs	r1, #32
 80057e2:	f000 f911 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	1e03      	subs	r3, r0, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e01c      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2220      	movs	r2, #32
 80057f4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3301      	adds	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d900      	bls.n	8005806 <HAL_I2C_IsDeviceReady+0x202>
 8005804:	e72f      	b.n	8005666 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2241      	movs	r2, #65	@ 0x41
 800580a:	2120      	movs	r1, #32
 800580c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	2220      	movs	r2, #32
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2240      	movs	r2, #64	@ 0x40
 800581e:	2100      	movs	r1, #0
 8005820:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b008      	add	sp, #32
 800582e:	bd80      	pop	{r7, pc}
 8005830:	02002000 	.word	0x02002000
 8005834:	02002800 	.word	0x02002800

08005838 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	000c      	movs	r4, r1
 8005842:	0010      	movs	r0, r2
 8005844:	0019      	movs	r1, r3
 8005846:	250a      	movs	r5, #10
 8005848:	197b      	adds	r3, r7, r5
 800584a:	1c22      	adds	r2, r4, #0
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	2308      	movs	r3, #8
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	1c02      	adds	r2, r0, #0
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	1dbb      	adds	r3, r7, #6
 8005858:	1c0a      	adds	r2, r1, #0
 800585a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800585c:	1dbb      	adds	r3, r7, #6
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	2380      	movs	r3, #128	@ 0x80
 8005864:	045c      	lsls	r4, r3, #17
 8005866:	197b      	adds	r3, r7, r5
 8005868:	8819      	ldrh	r1, [r3, #0]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	4b23      	ldr	r3, [pc, #140]	@ (80058fc <I2C_RequestMemoryWrite+0xc4>)
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	0023      	movs	r3, r4
 8005872:	f000 fa99 	bl	8005da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005878:	6a39      	ldr	r1, [r7, #32]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 f911 	bl	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005882:	1e03      	subs	r3, r0, #0
 8005884:	d001      	beq.n	800588a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e033      	b.n	80058f2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800588a:	1dbb      	adds	r3, r7, #6
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d107      	bne.n	80058a2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005892:	2308      	movs	r3, #8
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a0:	e019      	b.n	80058d6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058a2:	2308      	movs	r3, #8
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b6:	6a39      	ldr	r1, [r7, #32]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 f8f2 	bl	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058c0:	1e03      	subs	r3, r0, #0
 80058c2:	d001      	beq.n	80058c8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e014      	b.n	80058f2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058c8:	2308      	movs	r3, #8
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	0013      	movs	r3, r2
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	f000 f890 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80058e8:	1e03      	subs	r3, r0, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bdb0      	pop	{r4, r5, r7, pc}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	80002000 	.word	0x80002000

08005900 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	000c      	movs	r4, r1
 800590a:	0010      	movs	r0, r2
 800590c:	0019      	movs	r1, r3
 800590e:	250a      	movs	r5, #10
 8005910:	197b      	adds	r3, r7, r5
 8005912:	1c22      	adds	r2, r4, #0
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	2308      	movs	r3, #8
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	1c02      	adds	r2, r0, #0
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	1dbb      	adds	r3, r7, #6
 8005920:	1c0a      	adds	r2, r1, #0
 8005922:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005924:	1dbb      	adds	r3, r7, #6
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	197b      	adds	r3, r7, r5
 800592c:	8819      	ldrh	r1, [r3, #0]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	4b23      	ldr	r3, [pc, #140]	@ (80059c0 <I2C_RequestMemoryRead+0xc0>)
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2300      	movs	r3, #0
 8005936:	f000 fa37 	bl	8005da8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800593a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593c:	6a39      	ldr	r1, [r7, #32]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 f8af 	bl	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005946:	1e03      	subs	r3, r0, #0
 8005948:	d001      	beq.n	800594e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e033      	b.n	80059b6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800594e:	1dbb      	adds	r3, r7, #6
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005956:	2308      	movs	r3, #8
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	629a      	str	r2, [r3, #40]	@ 0x28
 8005964:	e019      	b.n	800599a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005966:	2308      	movs	r3, #8
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	b29b      	uxth	r3, r3
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	6a39      	ldr	r1, [r7, #32]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f890 	bl	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005984:	1e03      	subs	r3, r0, #0
 8005986:	d001      	beq.n	800598c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e014      	b.n	80059b6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598c:	2308      	movs	r3, #8
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	0013      	movs	r3, r2
 80059a4:	2200      	movs	r2, #0
 80059a6:	2140      	movs	r1, #64	@ 0x40
 80059a8:	f000 f82e 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80059ac:	1e03      	subs	r3, r0, #0
 80059ae:	d001      	beq.n	80059b4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bdb0      	pop	{r4, r5, r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	80002000 	.word	0x80002000

080059c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2202      	movs	r2, #2
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d103      	bne.n	80059e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2200      	movs	r2, #0
 80059e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2201      	movs	r2, #1
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d007      	beq.n	8005a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2101      	movs	r1, #1
 80059fc:	430a      	orrs	r2, r1
 80059fe:	619a      	str	r2, [r3, #24]
  }
}
 8005a00:	46c0      	nop			@ (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b002      	add	sp, #8
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a18:	e030      	b.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	d02d      	beq.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a20:	f7ff f880 	bl	8004b24 <HAL_GetTick>
 8005a24:	0002      	movs	r2, r0
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d122      	bne.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	425a      	negs	r2, r3
 8005a46:	4153      	adcs	r3, r2
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d113      	bne.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a58:	2220      	movs	r2, #32
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2241      	movs	r2, #65	@ 0x41
 8005a64:	2120      	movs	r1, #32
 8005a66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2242      	movs	r2, #66	@ 0x42
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2240      	movs	r2, #64	@ 0x40
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e00f      	b.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	425a      	negs	r2, r3
 8005a8c:	4153      	adcs	r3, r2
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	001a      	movs	r2, r3
 8005a92:	1dfb      	adds	r3, r7, #7
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d0bf      	beq.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ab0:	e032      	b.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 f87d 	bl	8005bb8 <I2C_IsErrorOccurred>
 8005abe:	1e03      	subs	r3, r0, #0
 8005ac0:	d001      	beq.n	8005ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e030      	b.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	d025      	beq.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005acc:	f7ff f82a 	bl	8004b24 <HAL_GetTick>
 8005ad0:	0002      	movs	r2, r0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d302      	bcc.n	8005ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11a      	bne.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d013      	beq.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af4:	2220      	movs	r2, #32
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2241      	movs	r2, #65	@ 0x41
 8005b00:	2120      	movs	r1, #32
 8005b02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2242      	movs	r2, #66	@ 0x42
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2240      	movs	r2, #64	@ 0x40
 8005b10:	2100      	movs	r1, #0
 8005b12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e007      	b.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d1c5      	bne.n	8005ab2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b004      	add	sp, #16
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b3c:	e02f      	b.n	8005b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f837 	bl	8005bb8 <I2C_IsErrorOccurred>
 8005b4a:	1e03      	subs	r3, r0, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e02d      	b.n	8005bae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fe ffe7 	bl	8004b24 <HAL_GetTick>
 8005b56:	0002      	movs	r2, r0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11a      	bne.n	8005b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d013      	beq.n	8005b9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2241      	movs	r2, #65	@ 0x41
 8005b86:	2120      	movs	r1, #32
 8005b88:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2242      	movs	r2, #66	@ 0x42
 8005b8e:	2100      	movs	r1, #0
 8005b90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2240      	movs	r2, #64	@ 0x40
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e007      	b.n	8005bae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d1c8      	bne.n	8005b3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b004      	add	sp, #16
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	@ 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2327      	movs	r3, #39	@ 0x27
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2210      	movs	r2, #16
 8005be0:	4013      	ands	r3, r2
 8005be2:	d100      	bne.n	8005be6 <I2C_IsErrorOccurred+0x2e>
 8005be4:	e079      	b.n	8005cda <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2210      	movs	r2, #16
 8005bec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bee:	e057      	b.n	8005ca0 <I2C_IsErrorOccurred+0xe8>
 8005bf0:	2227      	movs	r2, #39	@ 0x27
 8005bf2:	18bb      	adds	r3, r7, r2
 8005bf4:	18ba      	adds	r2, r7, r2
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	d04f      	beq.n	8005ca0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c00:	f7fe ff90 	bl	8004b24 <HAL_GetTick>
 8005c04:	0002      	movs	r2, r0
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <I2C_IsErrorOccurred+0x5e>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d144      	bne.n	8005ca0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	2380      	movs	r3, #128	@ 0x80
 8005c1e:	01db      	lsls	r3, r3, #7
 8005c20:	4013      	ands	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c24:	2013      	movs	r0, #19
 8005c26:	183b      	adds	r3, r7, r0
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	2142      	movs	r1, #66	@ 0x42
 8005c2c:	5c52      	ldrb	r2, [r2, r1]
 8005c2e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d126      	bne.n	8005c92 <I2C_IsErrorOccurred+0xda>
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	2380      	movs	r3, #128	@ 0x80
 8005c48:	01db      	lsls	r3, r3, #7
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d021      	beq.n	8005c92 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005c4e:	183b      	adds	r3, r7, r0
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d01d      	beq.n	8005c92 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2180      	movs	r1, #128	@ 0x80
 8005c62:	01c9      	lsls	r1, r1, #7
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c68:	f7fe ff5c 	bl	8004b24 <HAL_GetTick>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c70:	e00f      	b.n	8005c92 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c72:	f7fe ff57 	bl	8004b24 <HAL_GetTick>
 8005c76:	0002      	movs	r2, r0
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b19      	cmp	r3, #25
 8005c7e:	d908      	bls.n	8005c92 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2220      	movs	r2, #32
 8005c84:	4313      	orrs	r3, r2
 8005c86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c88:	2327      	movs	r3, #39	@ 0x27
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]

              break;
 8005c90:	e006      	b.n	8005ca0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d1e8      	bne.n	8005c72 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d004      	beq.n	8005cb8 <I2C_IsErrorOccurred+0x100>
 8005cae:	2327      	movs	r3, #39	@ 0x27
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d09b      	beq.n	8005bf0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cb8:	2327      	movs	r3, #39	@ 0x27
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cd2:	2327      	movs	r3, #39	@ 0x27
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00c      	beq.n	8005d06 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2280      	movs	r2, #128	@ 0x80
 8005cfa:	0052      	lsls	r2, r2, #1
 8005cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cfe:	2327      	movs	r3, #39	@ 0x27
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d00c      	beq.n	8005d2a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	2208      	movs	r2, #8
 8005d14:	4313      	orrs	r3, r2
 8005d16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	00d2      	lsls	r2, r2, #3
 8005d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d22:	2327      	movs	r3, #39	@ 0x27
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	2380      	movs	r3, #128	@ 0x80
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4013      	ands	r3, r2
 8005d32:	d00c      	beq.n	8005d4e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	2202      	movs	r2, #2
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2280      	movs	r2, #128	@ 0x80
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d46:	2327      	movs	r3, #39	@ 0x27
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005d4e:	2327      	movs	r3, #39	@ 0x27
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01d      	beq.n	8005d94 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7ff fe32 	bl	80059c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	490e      	ldr	r1, [pc, #56]	@ (8005da4 <I2C_IsErrorOccurred+0x1ec>)
 8005d6c:	400a      	ands	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2241      	movs	r2, #65	@ 0x41
 8005d80:	2120      	movs	r1, #32
 8005d82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2242      	movs	r2, #66	@ 0x42
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2240      	movs	r2, #64	@ 0x40
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005d94:	2327      	movs	r3, #39	@ 0x27
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	781b      	ldrb	r3, [r3, #0]
}
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b00a      	add	sp, #40	@ 0x28
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	fe00e800 	.word	0xfe00e800

08005da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	0008      	movs	r0, r1
 8005db2:	0011      	movs	r1, r2
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	240a      	movs	r4, #10
 8005db8:	193b      	adds	r3, r7, r4
 8005dba:	1c02      	adds	r2, r0, #0
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	2009      	movs	r0, #9
 8005dc0:	183b      	adds	r3, r7, r0
 8005dc2:	1c0a      	adds	r2, r1, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dc6:	193b      	adds	r3, r7, r4
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	059b      	lsls	r3, r3, #22
 8005dcc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dce:	183b      	adds	r3, r7, r0
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	0419      	lsls	r1, r3, #16
 8005dd4:	23ff      	movs	r3, #255	@ 0xff
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dda:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	4313      	orrs	r3, r2
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005df2:	0d51      	lsrs	r1, r2, #21
 8005df4:	2280      	movs	r2, #128	@ 0x80
 8005df6:	00d2      	lsls	r2, r2, #3
 8005df8:	400a      	ands	r2, r1
 8005dfa:	4907      	ldr	r1, [pc, #28]	@ (8005e18 <I2C_TransferConfig+0x70>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	43d2      	mvns	r2, r2
 8005e00:	401a      	ands	r2, r3
 8005e02:	0011      	movs	r1, r2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b007      	add	sp, #28
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	03ff63ff 	.word	0x03ff63ff

08005e1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2241      	movs	r2, #65	@ 0x41
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d138      	bne.n	8005ea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2240      	movs	r2, #64	@ 0x40
 8005e36:	5c9b      	ldrb	r3, [r3, r2]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e032      	b.n	8005ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	@ 0x40
 8005e44:	2101      	movs	r1, #1
 8005e46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2241      	movs	r2, #65	@ 0x41
 8005e4c:	2124      	movs	r1, #36	@ 0x24
 8005e4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	438a      	bics	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4911      	ldr	r1, [pc, #68]	@ (8005eb0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2241      	movs	r2, #65	@ 0x41
 8005e94:	2120      	movs	r1, #32
 8005e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2240      	movs	r2, #64	@ 0x40
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b002      	add	sp, #8
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	ffffefff 	.word	0xffffefff

08005eb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2241      	movs	r2, #65	@ 0x41
 8005ec2:	5c9b      	ldrb	r3, [r3, r2]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d139      	bne.n	8005f3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2240      	movs	r2, #64	@ 0x40
 8005ece:	5c9b      	ldrb	r3, [r3, r2]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e033      	b.n	8005f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2240      	movs	r2, #64	@ 0x40
 8005edc:	2101      	movs	r1, #1
 8005ede:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2241      	movs	r2, #65	@ 0x41
 8005ee4:	2124      	movs	r1, #36	@ 0x24
 8005ee6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a11      	ldr	r2, [pc, #68]	@ (8005f48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2101      	movs	r1, #1
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2241      	movs	r2, #65	@ 0x41
 8005f2e:	2120      	movs	r1, #32
 8005f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2240      	movs	r2, #64	@ 0x40
 8005f36:	2100      	movs	r1, #0
 8005f38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b004      	add	sp, #16
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	fffff0ff 	.word	0xfffff0ff

08005f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f000 fb76 	bl	800664c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	4013      	ands	r3, r2
 8005f68:	d100      	bne.n	8005f6c <HAL_RCC_OscConfig+0x20>
 8005f6a:	e08e      	b.n	800608a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f6c:	4bc5      	ldr	r3, [pc, #788]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	220c      	movs	r2, #12
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d00e      	beq.n	8005f96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f78:	4bc2      	ldr	r3, [pc, #776]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	220c      	movs	r2, #12
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d117      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x68>
 8005f84:	4bbf      	ldr	r3, [pc, #764]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	23c0      	movs	r3, #192	@ 0xc0
 8005f8a:	025b      	lsls	r3, r3, #9
 8005f8c:	401a      	ands	r2, r3
 8005f8e:	2380      	movs	r3, #128	@ 0x80
 8005f90:	025b      	lsls	r3, r3, #9
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d10e      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f96:	4bbb      	ldr	r3, [pc, #748]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	029b      	lsls	r3, r3, #10
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d100      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x58>
 8005fa2:	e071      	b.n	8006088 <HAL_RCC_OscConfig+0x13c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d000      	beq.n	8005fae <HAL_RCC_OscConfig+0x62>
 8005fac:	e06c      	b.n	8006088 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f000 fb4c 	bl	800664c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_RCC_OscConfig+0x80>
 8005fbc:	4bb1      	ldr	r3, [pc, #708]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4bb0      	ldr	r3, [pc, #704]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fc2:	2180      	movs	r1, #128	@ 0x80
 8005fc4:	0249      	lsls	r1, r1, #9
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e02f      	b.n	800602c <HAL_RCC_OscConfig+0xe0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10c      	bne.n	8005fee <HAL_RCC_OscConfig+0xa2>
 8005fd4:	4bab      	ldr	r3, [pc, #684]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4baa      	ldr	r3, [pc, #680]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fda:	49ab      	ldr	r1, [pc, #684]	@ (8006288 <HAL_RCC_OscConfig+0x33c>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4ba7      	ldr	r3, [pc, #668]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005fe6:	49a9      	ldr	r1, [pc, #676]	@ (800628c <HAL_RCC_OscConfig+0x340>)
 8005fe8:	400a      	ands	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e01e      	b.n	800602c <HAL_RCC_OscConfig+0xe0>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d10e      	bne.n	8006014 <HAL_RCC_OscConfig+0xc8>
 8005ff6:	4ba3      	ldr	r3, [pc, #652]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4ba2      	ldr	r3, [pc, #648]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8005ffc:	2180      	movs	r1, #128	@ 0x80
 8005ffe:	02c9      	lsls	r1, r1, #11
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	4b9f      	ldr	r3, [pc, #636]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b9e      	ldr	r3, [pc, #632]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800600a:	2180      	movs	r1, #128	@ 0x80
 800600c:	0249      	lsls	r1, r1, #9
 800600e:	430a      	orrs	r2, r1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0xe0>
 8006014:	4b9b      	ldr	r3, [pc, #620]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b9a      	ldr	r3, [pc, #616]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800601a:	499b      	ldr	r1, [pc, #620]	@ (8006288 <HAL_RCC_OscConfig+0x33c>)
 800601c:	400a      	ands	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	4b98      	ldr	r3, [pc, #608]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b97      	ldr	r3, [pc, #604]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006026:	4999      	ldr	r1, [pc, #612]	@ (800628c <HAL_RCC_OscConfig+0x340>)
 8006028:	400a      	ands	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d014      	beq.n	800605e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fe fd76 	bl	8004b24 <HAL_GetTick>
 8006038:	0003      	movs	r3, r0
 800603a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603e:	f7fe fd71 	bl	8004b24 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b64      	cmp	r3, #100	@ 0x64
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e2fd      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006050:	4b8c      	ldr	r3, [pc, #560]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	4013      	ands	r3, r2
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0xf2>
 800605c:	e015      	b.n	800608a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605e:	f7fe fd61 	bl	8004b24 <HAL_GetTick>
 8006062:	0003      	movs	r3, r0
 8006064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006068:	f7fe fd5c 	bl	8004b24 <HAL_GetTick>
 800606c:	0002      	movs	r2, r0
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	@ 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e2e8      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607a:	4b82      	ldr	r3, [pc, #520]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	2380      	movs	r3, #128	@ 0x80
 8006080:	029b      	lsls	r3, r3, #10
 8006082:	4013      	ands	r3, r2
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x11c>
 8006086:	e000      	b.n	800608a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006088:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2202      	movs	r2, #2
 8006090:	4013      	ands	r3, r2
 8006092:	d100      	bne.n	8006096 <HAL_RCC_OscConfig+0x14a>
 8006094:	e06c      	b.n	8006170 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006096:	4b7b      	ldr	r3, [pc, #492]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	220c      	movs	r2, #12
 800609c:	4013      	ands	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80060a0:	4b78      	ldr	r3, [pc, #480]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	220c      	movs	r2, #12
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d11f      	bne.n	80060ec <HAL_RCC_OscConfig+0x1a0>
 80060ac:	4b75      	ldr	r3, [pc, #468]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	23c0      	movs	r3, #192	@ 0xc0
 80060b2:	025b      	lsls	r3, r3, #9
 80060b4:	401a      	ands	r2, r3
 80060b6:	2380      	movs	r3, #128	@ 0x80
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d116      	bne.n	80060ec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060be:	4b71      	ldr	r3, [pc, #452]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2202      	movs	r2, #2
 80060c4:	4013      	ands	r3, r2
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_OscConfig+0x188>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e2bb      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22f8      	movs	r2, #248	@ 0xf8
 80060da:	4393      	bics	r3, r2
 80060dc:	0019      	movs	r1, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	00da      	lsls	r2, r3, #3
 80060e4:	4b67      	ldr	r3, [pc, #412]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ea:	e041      	b.n	8006170 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d024      	beq.n	800613e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f4:	4b63      	ldr	r3, [pc, #396]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b62      	ldr	r3, [pc, #392]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80060fa:	2101      	movs	r1, #1
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fe fd10 	bl	8004b24 <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610a:	f7fe fd0b 	bl	8004b24 <HAL_GetTick>
 800610e:	0002      	movs	r2, r0
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e297      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	4b59      	ldr	r3, [pc, #356]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2202      	movs	r2, #2
 8006122:	4013      	ands	r3, r2
 8006124:	d0f1      	beq.n	800610a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	4b57      	ldr	r3, [pc, #348]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	22f8      	movs	r2, #248	@ 0xf8
 800612c:	4393      	bics	r3, r2
 800612e:	0019      	movs	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	00da      	lsls	r2, r3, #3
 8006136:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e018      	b.n	8006170 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613e:	4b51      	ldr	r3, [pc, #324]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b50      	ldr	r3, [pc, #320]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006144:	2101      	movs	r1, #1
 8006146:	438a      	bics	r2, r1
 8006148:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614a:	f7fe fceb 	bl	8004b24 <HAL_GetTick>
 800614e:	0003      	movs	r3, r0
 8006150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006154:	f7fe fce6 	bl	8004b24 <HAL_GetTick>
 8006158:	0002      	movs	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e272      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006166:	4b47      	ldr	r3, [pc, #284]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2202      	movs	r2, #2
 800616c:	4013      	ands	r3, r2
 800616e:	d1f1      	bne.n	8006154 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2208      	movs	r2, #8
 8006176:	4013      	ands	r3, r2
 8006178:	d036      	beq.n	80061e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d019      	beq.n	80061b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006182:	4b40      	ldr	r3, [pc, #256]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006186:	4b3f      	ldr	r3, [pc, #252]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006188:	2101      	movs	r1, #1
 800618a:	430a      	orrs	r2, r1
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800618e:	f7fe fcc9 	bl	8004b24 <HAL_GetTick>
 8006192:	0003      	movs	r3, r0
 8006194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006198:	f7fe fcc4 	bl	8004b24 <HAL_GetTick>
 800619c:	0002      	movs	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e250      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	4b36      	ldr	r3, [pc, #216]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d0f1      	beq.n	8006198 <HAL_RCC_OscConfig+0x24c>
 80061b4:	e018      	b.n	80061e8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b6:	4b33      	ldr	r3, [pc, #204]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80061b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ba:	4b32      	ldr	r3, [pc, #200]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80061bc:	2101      	movs	r1, #1
 80061be:	438a      	bics	r2, r1
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c2:	f7fe fcaf 	bl	8004b24 <HAL_GetTick>
 80061c6:	0003      	movs	r3, r0
 80061c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fe fcaa 	bl	8004b24 <HAL_GetTick>
 80061d0:	0002      	movs	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e236      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061de:	4b29      	ldr	r3, [pc, #164]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	2202      	movs	r2, #2
 80061e4:	4013      	ands	r3, r2
 80061e6:	d1f1      	bne.n	80061cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2204      	movs	r2, #4
 80061ee:	4013      	ands	r3, r2
 80061f0:	d100      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2a8>
 80061f2:	e0b5      	b.n	8006360 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f4:	201f      	movs	r0, #31
 80061f6:	183b      	adds	r3, r7, r0
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fc:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 80061fe:	69da      	ldr	r2, [r3, #28]
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	055b      	lsls	r3, r3, #21
 8006204:	4013      	ands	r3, r2
 8006206:	d110      	bne.n	800622a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006208:	4b1e      	ldr	r3, [pc, #120]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	4b1d      	ldr	r3, [pc, #116]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800620e:	2180      	movs	r1, #128	@ 0x80
 8006210:	0549      	lsls	r1, r1, #21
 8006212:	430a      	orrs	r2, r1
 8006214:	61da      	str	r2, [r3, #28]
 8006216:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006218:	69da      	ldr	r2, [r3, #28]
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	055b      	lsls	r3, r3, #21
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006224:	183b      	adds	r3, r7, r0
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <HAL_RCC_OscConfig+0x344>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4013      	ands	r3, r2
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006236:	4b16      	ldr	r3, [pc, #88]	@ (8006290 <HAL_RCC_OscConfig+0x344>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <HAL_RCC_OscConfig+0x344>)
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	0049      	lsls	r1, r1, #1
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006244:	f7fe fc6e 	bl	8004b24 <HAL_GetTick>
 8006248:	0003      	movs	r3, r0
 800624a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fe fc69 	bl	8004b24 <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	@ 0x64
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e1f5      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_RCC_OscConfig+0x344>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4013      	ands	r3, r2
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10f      	bne.n	8006294 <HAL_RCC_OscConfig+0x348>
 8006274:	4b03      	ldr	r3, [pc, #12]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	4b02      	ldr	r3, [pc, #8]	@ (8006284 <HAL_RCC_OscConfig+0x338>)
 800627a:	2101      	movs	r1, #1
 800627c:	430a      	orrs	r2, r1
 800627e:	621a      	str	r2, [r3, #32]
 8006280:	e036      	b.n	80062f0 <HAL_RCC_OscConfig+0x3a4>
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	40021000 	.word	0x40021000
 8006288:	fffeffff 	.word	0xfffeffff
 800628c:	fffbffff 	.word	0xfffbffff
 8006290:	40007000 	.word	0x40007000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10c      	bne.n	80062b6 <HAL_RCC_OscConfig+0x36a>
 800629c:	4bca      	ldr	r3, [pc, #808]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	4bc9      	ldr	r3, [pc, #804]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062a2:	2101      	movs	r1, #1
 80062a4:	438a      	bics	r2, r1
 80062a6:	621a      	str	r2, [r3, #32]
 80062a8:	4bc7      	ldr	r3, [pc, #796]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	4bc6      	ldr	r3, [pc, #792]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062ae:	2104      	movs	r1, #4
 80062b0:	438a      	bics	r2, r1
 80062b2:	621a      	str	r2, [r3, #32]
 80062b4:	e01c      	b.n	80062f0 <HAL_RCC_OscConfig+0x3a4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d10c      	bne.n	80062d8 <HAL_RCC_OscConfig+0x38c>
 80062be:	4bc2      	ldr	r3, [pc, #776]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	4bc1      	ldr	r3, [pc, #772]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062c4:	2104      	movs	r1, #4
 80062c6:	430a      	orrs	r2, r1
 80062c8:	621a      	str	r2, [r3, #32]
 80062ca:	4bbf      	ldr	r3, [pc, #764]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062cc:	6a1a      	ldr	r2, [r3, #32]
 80062ce:	4bbe      	ldr	r3, [pc, #760]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062d0:	2101      	movs	r1, #1
 80062d2:	430a      	orrs	r2, r1
 80062d4:	621a      	str	r2, [r3, #32]
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0x3a4>
 80062d8:	4bbb      	ldr	r3, [pc, #748]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	4bba      	ldr	r3, [pc, #744]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062de:	2101      	movs	r1, #1
 80062e0:	438a      	bics	r2, r1
 80062e2:	621a      	str	r2, [r3, #32]
 80062e4:	4bb8      	ldr	r3, [pc, #736]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	4bb7      	ldr	r3, [pc, #732]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80062ea:	2104      	movs	r1, #4
 80062ec:	438a      	bics	r2, r1
 80062ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d014      	beq.n	8006322 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f8:	f7fe fc14 	bl	8004b24 <HAL_GetTick>
 80062fc:	0003      	movs	r3, r0
 80062fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006300:	e009      	b.n	8006316 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006302:	f7fe fc0f 	bl	8004b24 <HAL_GetTick>
 8006306:	0002      	movs	r2, r0
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	4aaf      	ldr	r2, [pc, #700]	@ (80065cc <HAL_RCC_OscConfig+0x680>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e19a      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006316:	4bac      	ldr	r3, [pc, #688]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	2202      	movs	r2, #2
 800631c:	4013      	ands	r3, r2
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x3b6>
 8006320:	e013      	b.n	800634a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006322:	f7fe fbff 	bl	8004b24 <HAL_GetTick>
 8006326:	0003      	movs	r3, r0
 8006328:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632a:	e009      	b.n	8006340 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632c:	f7fe fbfa 	bl	8004b24 <HAL_GetTick>
 8006330:	0002      	movs	r2, r0
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	4aa5      	ldr	r2, [pc, #660]	@ (80065cc <HAL_RCC_OscConfig+0x680>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e185      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006340:	4ba1      	ldr	r3, [pc, #644]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	2202      	movs	r2, #2
 8006346:	4013      	ands	r3, r2
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800634a:	231f      	movs	r3, #31
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006354:	4b9c      	ldr	r3, [pc, #624]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	4b9b      	ldr	r3, [pc, #620]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800635a:	499d      	ldr	r1, [pc, #628]	@ (80065d0 <HAL_RCC_OscConfig+0x684>)
 800635c:	400a      	ands	r2, r1
 800635e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2210      	movs	r2, #16
 8006366:	4013      	ands	r3, r2
 8006368:	d063      	beq.n	8006432 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d12a      	bne.n	80063c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006372:	4b95      	ldr	r3, [pc, #596]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006376:	4b94      	ldr	r3, [pc, #592]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006378:	2104      	movs	r1, #4
 800637a:	430a      	orrs	r2, r1
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800637e:	4b92      	ldr	r3, [pc, #584]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006382:	4b91      	ldr	r3, [pc, #580]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006384:	2101      	movs	r1, #1
 8006386:	430a      	orrs	r2, r1
 8006388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638a:	f7fe fbcb 	bl	8004b24 <HAL_GetTick>
 800638e:	0003      	movs	r3, r0
 8006390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006394:	f7fe fbc6 	bl	8004b24 <HAL_GetTick>
 8006398:	0002      	movs	r2, r0
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e152      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80063a6:	4b88      	ldr	r3, [pc, #544]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063aa:	2202      	movs	r2, #2
 80063ac:	4013      	ands	r3, r2
 80063ae:	d0f1      	beq.n	8006394 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063b0:	4b85      	ldr	r3, [pc, #532]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b4:	22f8      	movs	r2, #248	@ 0xf8
 80063b6:	4393      	bics	r3, r2
 80063b8:	0019      	movs	r1, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	00da      	lsls	r2, r3, #3
 80063c0:	4b81      	ldr	r3, [pc, #516]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063c2:	430a      	orrs	r2, r1
 80063c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80063c6:	e034      	b.n	8006432 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	3305      	adds	r3, #5
 80063ce:	d111      	bne.n	80063f4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80063d0:	4b7d      	ldr	r3, [pc, #500]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063d4:	4b7c      	ldr	r3, [pc, #496]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063d6:	2104      	movs	r1, #4
 80063d8:	438a      	bics	r2, r1
 80063da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063dc:	4b7a      	ldr	r3, [pc, #488]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e0:	22f8      	movs	r2, #248	@ 0xf8
 80063e2:	4393      	bics	r3, r2
 80063e4:	0019      	movs	r1, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	00da      	lsls	r2, r3, #3
 80063ec:	4b76      	ldr	r3, [pc, #472]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063ee:	430a      	orrs	r2, r1
 80063f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80063f2:	e01e      	b.n	8006432 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063f4:	4b74      	ldr	r3, [pc, #464]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f8:	4b73      	ldr	r3, [pc, #460]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80063fa:	2104      	movs	r1, #4
 80063fc:	430a      	orrs	r2, r1
 80063fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006400:	4b71      	ldr	r3, [pc, #452]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006404:	4b70      	ldr	r3, [pc, #448]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006406:	2101      	movs	r1, #1
 8006408:	438a      	bics	r2, r1
 800640a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800640c:	f7fe fb8a 	bl	8004b24 <HAL_GetTick>
 8006410:	0003      	movs	r3, r0
 8006412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006416:	f7fe fb85 	bl	8004b24 <HAL_GetTick>
 800641a:	0002      	movs	r2, r0
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e111      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006428:	4b67      	ldr	r3, [pc, #412]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800642a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642c:	2202      	movs	r2, #2
 800642e:	4013      	ands	r3, r2
 8006430:	d1f1      	bne.n	8006416 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2220      	movs	r2, #32
 8006438:	4013      	ands	r3, r2
 800643a:	d05c      	beq.n	80064f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800643c:	4b62      	ldr	r3, [pc, #392]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	220c      	movs	r2, #12
 8006442:	4013      	ands	r3, r2
 8006444:	2b0c      	cmp	r3, #12
 8006446:	d00e      	beq.n	8006466 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006448:	4b5f      	ldr	r3, [pc, #380]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	220c      	movs	r2, #12
 800644e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006450:	2b08      	cmp	r3, #8
 8006452:	d114      	bne.n	800647e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006454:	4b5c      	ldr	r3, [pc, #368]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	23c0      	movs	r3, #192	@ 0xc0
 800645a:	025b      	lsls	r3, r3, #9
 800645c:	401a      	ands	r2, r3
 800645e:	23c0      	movs	r3, #192	@ 0xc0
 8006460:	025b      	lsls	r3, r3, #9
 8006462:	429a      	cmp	r2, r3
 8006464:	d10b      	bne.n	800647e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006466:	4b58      	ldr	r3, [pc, #352]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800646a:	2380      	movs	r3, #128	@ 0x80
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	4013      	ands	r3, r2
 8006470:	d040      	beq.n	80064f4 <HAL_RCC_OscConfig+0x5a8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d03c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e0e6      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01b      	beq.n	80064be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006486:	4b50      	ldr	r3, [pc, #320]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800648a:	4b4f      	ldr	r3, [pc, #316]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800648c:	2180      	movs	r1, #128	@ 0x80
 800648e:	0249      	lsls	r1, r1, #9
 8006490:	430a      	orrs	r2, r1
 8006492:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fe fb46 	bl	8004b24 <HAL_GetTick>
 8006498:	0003      	movs	r3, r0
 800649a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800649e:	f7fe fb41 	bl	8004b24 <HAL_GetTick>
 80064a2:	0002      	movs	r2, r0
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e0cd      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80064b0:	4b45      	ldr	r3, [pc, #276]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80064b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b4:	2380      	movs	r3, #128	@ 0x80
 80064b6:	029b      	lsls	r3, r3, #10
 80064b8:	4013      	ands	r3, r2
 80064ba:	d0f0      	beq.n	800649e <HAL_RCC_OscConfig+0x552>
 80064bc:	e01b      	b.n	80064f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80064be:	4b42      	ldr	r3, [pc, #264]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80064c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c2:	4b41      	ldr	r3, [pc, #260]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80064c4:	4943      	ldr	r1, [pc, #268]	@ (80065d4 <HAL_RCC_OscConfig+0x688>)
 80064c6:	400a      	ands	r2, r1
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fe fb2b 	bl	8004b24 <HAL_GetTick>
 80064ce:	0003      	movs	r3, r0
 80064d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064d4:	f7fe fb26 	bl	8004b24 <HAL_GetTick>
 80064d8:	0002      	movs	r2, r0
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e0b2      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80064e6:	4b38      	ldr	r3, [pc, #224]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80064e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	4013      	ands	r3, r2
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x588>
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80064f4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d100      	bne.n	8006500 <HAL_RCC_OscConfig+0x5b4>
 80064fe:	e0a4      	b.n	800664a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006500:	4b31      	ldr	r3, [pc, #196]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	220c      	movs	r2, #12
 8006506:	4013      	ands	r3, r2
 8006508:	2b08      	cmp	r3, #8
 800650a:	d100      	bne.n	800650e <HAL_RCC_OscConfig+0x5c2>
 800650c:	e078      	b.n	8006600 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	2b02      	cmp	r3, #2
 8006514:	d14c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	4b2c      	ldr	r3, [pc, #176]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4b2b      	ldr	r3, [pc, #172]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800651c:	492e      	ldr	r1, [pc, #184]	@ (80065d8 <HAL_RCC_OscConfig+0x68c>)
 800651e:	400a      	ands	r2, r1
 8006520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006522:	f7fe faff 	bl	8004b24 <HAL_GetTick>
 8006526:	0003      	movs	r3, r0
 8006528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652c:	f7fe fafa 	bl	8004b24 <HAL_GetTick>
 8006530:	0002      	movs	r2, r0
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e086      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800653e:	4b22      	ldr	r3, [pc, #136]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	2380      	movs	r3, #128	@ 0x80
 8006544:	049b      	lsls	r3, r3, #18
 8006546:	4013      	ands	r3, r2
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800654a:	4b1f      	ldr	r3, [pc, #124]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	220f      	movs	r2, #15
 8006550:	4393      	bics	r3, r2
 8006552:	0019      	movs	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006558:	4b1b      	ldr	r3, [pc, #108]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800655a:	430a      	orrs	r2, r1
 800655c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800655e:	4b1a      	ldr	r3, [pc, #104]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a1e      	ldr	r2, [pc, #120]	@ (80065dc <HAL_RCC_OscConfig+0x690>)
 8006564:	4013      	ands	r3, r2
 8006566:	0019      	movs	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	431a      	orrs	r2, r3
 8006572:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 8006574:	430a      	orrs	r2, r1
 8006576:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006578:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b12      	ldr	r3, [pc, #72]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 800657e:	2180      	movs	r1, #128	@ 0x80
 8006580:	0449      	lsls	r1, r1, #17
 8006582:	430a      	orrs	r2, r1
 8006584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006586:	f7fe facd 	bl	8004b24 <HAL_GetTick>
 800658a:	0003      	movs	r3, r0
 800658c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006590:	f7fe fac8 	bl	8004b24 <HAL_GetTick>
 8006594:	0002      	movs	r2, r0
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e054      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065a2:	4b09      	ldr	r3, [pc, #36]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	2380      	movs	r3, #128	@ 0x80
 80065a8:	049b      	lsls	r3, r3, #18
 80065aa:	4013      	ands	r3, r2
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x644>
 80065ae:	e04c      	b.n	800664a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b04      	ldr	r3, [pc, #16]	@ (80065c8 <HAL_RCC_OscConfig+0x67c>)
 80065b6:	4908      	ldr	r1, [pc, #32]	@ (80065d8 <HAL_RCC_OscConfig+0x68c>)
 80065b8:	400a      	ands	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fe fab2 	bl	8004b24 <HAL_GetTick>
 80065c0:	0003      	movs	r3, r0
 80065c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065c4:	e015      	b.n	80065f2 <HAL_RCC_OscConfig+0x6a6>
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	40021000 	.word	0x40021000
 80065cc:	00001388 	.word	0x00001388
 80065d0:	efffffff 	.word	0xefffffff
 80065d4:	fffeffff 	.word	0xfffeffff
 80065d8:	feffffff 	.word	0xfeffffff
 80065dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fe faa0 	bl	8004b24 <HAL_GetTick>
 80065e4:	0002      	movs	r2, r0
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e02c      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f2:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <HAL_RCC_OscConfig+0x708>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	2380      	movs	r3, #128	@ 0x80
 80065f8:	049b      	lsls	r3, r3, #18
 80065fa:	4013      	ands	r3, r2
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x694>
 80065fe:	e024      	b.n	800664a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e01f      	b.n	800664c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800660c:	4b11      	ldr	r3, [pc, #68]	@ (8006654 <HAL_RCC_OscConfig+0x708>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006612:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <HAL_RCC_OscConfig+0x708>)
 8006614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006616:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	23c0      	movs	r3, #192	@ 0xc0
 800661c:	025b      	lsls	r3, r3, #9
 800661e:	401a      	ands	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	429a      	cmp	r2, r3
 8006626:	d10e      	bne.n	8006646 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	220f      	movs	r2, #15
 800662c:	401a      	ands	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d107      	bne.n	8006646 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	23f0      	movs	r3, #240	@ 0xf0
 800663a:	039b      	lsls	r3, r3, #14
 800663c:	401a      	ands	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d001      	beq.n	800664a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	0018      	movs	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	b008      	add	sp, #32
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40021000 	.word	0x40021000

08006658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0bf      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800666c:	4b61      	ldr	r3, [pc, #388]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d911      	bls.n	800669e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b5e      	ldr	r3, [pc, #376]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	4393      	bics	r3, r2
 8006682:	0019      	movs	r1, r3
 8006684:	4b5b      	ldr	r3, [pc, #364]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800668c:	4b59      	ldr	r3, [pc, #356]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2201      	movs	r2, #1
 8006692:	4013      	ands	r3, r2
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d001      	beq.n	800669e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0a6      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2202      	movs	r2, #2
 80066a4:	4013      	ands	r3, r2
 80066a6:	d015      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2204      	movs	r2, #4
 80066ae:	4013      	ands	r3, r2
 80066b0:	d006      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80066b2:	4b51      	ldr	r3, [pc, #324]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b50      	ldr	r3, [pc, #320]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80066b8:	21e0      	movs	r1, #224	@ 0xe0
 80066ba:	00c9      	lsls	r1, r1, #3
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b4d      	ldr	r3, [pc, #308]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	22f0      	movs	r2, #240	@ 0xf0
 80066c6:	4393      	bics	r3, r2
 80066c8:	0019      	movs	r1, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	4b4a      	ldr	r3, [pc, #296]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	4013      	ands	r3, r2
 80066dc:	d04c      	beq.n	8006778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	4013      	ands	r3, r2
 80066f0:	d120      	bne.n	8006734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e07a      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fe:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	049b      	lsls	r3, r3, #18
 8006706:	4013      	ands	r3, r2
 8006708:	d114      	bne.n	8006734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e06e      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006716:	4b38      	ldr	r3, [pc, #224]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671a:	2380      	movs	r3, #128	@ 0x80
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	4013      	ands	r3, r2
 8006720:	d108      	bne.n	8006734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e062      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006726:	4b34      	ldr	r3, [pc, #208]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2202      	movs	r2, #2
 800672c:	4013      	ands	r3, r2
 800672e:	d101      	bne.n	8006734 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e05b      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006734:	4b30      	ldr	r3, [pc, #192]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2203      	movs	r2, #3
 800673a:	4393      	bics	r3, r2
 800673c:	0019      	movs	r1, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	4b2d      	ldr	r3, [pc, #180]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006748:	f7fe f9ec 	bl	8004b24 <HAL_GetTick>
 800674c:	0003      	movs	r3, r0
 800674e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006750:	e009      	b.n	8006766 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006752:	f7fe f9e7 	bl	8004b24 <HAL_GetTick>
 8006756:	0002      	movs	r2, r0
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	4a27      	ldr	r2, [pc, #156]	@ (80067fc <HAL_RCC_ClockConfig+0x1a4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e042      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	220c      	movs	r2, #12
 800676c:	401a      	ands	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	429a      	cmp	r2, r3
 8006776:	d1ec      	bne.n	8006752 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006778:	4b1e      	ldr	r3, [pc, #120]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2201      	movs	r2, #1
 800677e:	4013      	ands	r3, r2
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d211      	bcs.n	80067aa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006786:	4b1b      	ldr	r3, [pc, #108]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2201      	movs	r2, #1
 800678c:	4393      	bics	r3, r2
 800678e:	0019      	movs	r1, r3
 8006790:	4b18      	ldr	r3, [pc, #96]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006798:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <HAL_RCC_ClockConfig+0x19c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d001      	beq.n	80067aa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e020      	b.n	80067ec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2204      	movs	r2, #4
 80067b0:	4013      	ands	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80067b4:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a11      	ldr	r2, [pc, #68]	@ (8006800 <HAL_RCC_ClockConfig+0x1a8>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80067c8:	f000 f820 	bl	800680c <HAL_RCC_GetSysClockFreq>
 80067cc:	0001      	movs	r1, r0
 80067ce:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <HAL_RCC_ClockConfig+0x1a0>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	220f      	movs	r2, #15
 80067d6:	4013      	ands	r3, r2
 80067d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006804 <HAL_RCC_ClockConfig+0x1ac>)
 80067da:	5cd3      	ldrb	r3, [r2, r3]
 80067dc:	000a      	movs	r2, r1
 80067de:	40da      	lsrs	r2, r3
 80067e0:	4b09      	ldr	r3, [pc, #36]	@ (8006808 <HAL_RCC_ClockConfig+0x1b0>)
 80067e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80067e4:	2003      	movs	r0, #3
 80067e6:	f7fe f957 	bl	8004a98 <HAL_InitTick>
  
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b004      	add	sp, #16
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40022000 	.word	0x40022000
 80067f8:	40021000 	.word	0x40021000
 80067fc:	00001388 	.word	0x00001388
 8006800:	fffff8ff 	.word	0xfffff8ff
 8006804:	0800c180 	.word	0x0800c180
 8006808:	20000000 	.word	0x20000000

0800680c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006826:	4b2d      	ldr	r3, [pc, #180]	@ (80068dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	220c      	movs	r2, #12
 8006830:	4013      	ands	r3, r2
 8006832:	2b0c      	cmp	r3, #12
 8006834:	d046      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0xb8>
 8006836:	d848      	bhi.n	80068ca <HAL_RCC_GetSysClockFreq+0xbe>
 8006838:	2b04      	cmp	r3, #4
 800683a:	d002      	beq.n	8006842 <HAL_RCC_GetSysClockFreq+0x36>
 800683c:	2b08      	cmp	r3, #8
 800683e:	d003      	beq.n	8006848 <HAL_RCC_GetSysClockFreq+0x3c>
 8006840:	e043      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006842:	4b27      	ldr	r3, [pc, #156]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006844:	613b      	str	r3, [r7, #16]
      break;
 8006846:	e043      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	0c9b      	lsrs	r3, r3, #18
 800684c:	220f      	movs	r2, #15
 800684e:	4013      	ands	r3, r2
 8006850:	4a24      	ldr	r2, [pc, #144]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006856:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	220f      	movs	r2, #15
 800685c:	4013      	ands	r3, r2
 800685e:	4a22      	ldr	r2, [pc, #136]	@ (80068e8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8006860:	5cd3      	ldrb	r3, [r2, r3]
 8006862:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	23c0      	movs	r3, #192	@ 0xc0
 8006868:	025b      	lsls	r3, r3, #9
 800686a:	401a      	ands	r2, r3
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	025b      	lsls	r3, r3, #9
 8006870:	429a      	cmp	r2, r3
 8006872:	d109      	bne.n	8006888 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	481a      	ldr	r0, [pc, #104]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006878:	f7f9 fc60 	bl	800013c <__udivsi3>
 800687c:	0003      	movs	r3, r0
 800687e:	001a      	movs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4353      	muls	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	e01a      	b.n	80068be <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	23c0      	movs	r3, #192	@ 0xc0
 800688c:	025b      	lsls	r3, r3, #9
 800688e:	401a      	ands	r2, r3
 8006890:	23c0      	movs	r3, #192	@ 0xc0
 8006892:	025b      	lsls	r3, r3, #9
 8006894:	429a      	cmp	r2, r3
 8006896:	d109      	bne.n	80068ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4814      	ldr	r0, [pc, #80]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xe0>)
 800689c:	f7f9 fc4e 	bl	800013c <__udivsi3>
 80068a0:	0003      	movs	r3, r0
 80068a2:	001a      	movs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4353      	muls	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e008      	b.n	80068be <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	480c      	ldr	r0, [pc, #48]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068b0:	f7f9 fc44 	bl	800013c <__udivsi3>
 80068b4:	0003      	movs	r3, r0
 80068b6:	001a      	movs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4353      	muls	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	613b      	str	r3, [r7, #16]
      break;
 80068c2:	e005      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xe0>)
 80068c6:	613b      	str	r3, [r7, #16]
      break;
 80068c8:	e002      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068ca:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068cc:	613b      	str	r3, [r7, #16]
      break;
 80068ce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80068d0:	693b      	ldr	r3, [r7, #16]
}
 80068d2:	0018      	movs	r0, r3
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b006      	add	sp, #24
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	40021000 	.word	0x40021000
 80068e0:	007a1200 	.word	0x007a1200
 80068e4:	0800c198 	.word	0x0800c198
 80068e8:	0800c1a8 	.word	0x0800c1a8
 80068ec:	02dc6c00 	.word	0x02dc6c00

080068f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f4:	4b02      	ldr	r3, [pc, #8]	@ (8006900 <HAL_RCC_GetHCLKFreq+0x10>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	20000000 	.word	0x20000000

08006904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006908:	f7ff fff2 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 800690c:	0001      	movs	r1, r0
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	2207      	movs	r2, #7
 8006916:	4013      	ands	r3, r2
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <HAL_RCC_GetPCLK1Freq+0x28>)
 800691a:	5cd3      	ldrb	r3, [r2, r3]
 800691c:	40d9      	lsrs	r1, r3
 800691e:	000b      	movs	r3, r1
}    
 8006920:	0018      	movs	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	40021000 	.word	0x40021000
 800692c:	0800c190 	.word	0x0800c190

08006930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	2380      	movs	r3, #128	@ 0x80
 8006946:	025b      	lsls	r3, r3, #9
 8006948:	4013      	ands	r3, r2
 800694a:	d100      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800694c:	e08e      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800694e:	2017      	movs	r0, #23
 8006950:	183b      	adds	r3, r7, r0
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006956:	4b6e      	ldr	r3, [pc, #440]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006958:	69da      	ldr	r2, [r3, #28]
 800695a:	2380      	movs	r3, #128	@ 0x80
 800695c:	055b      	lsls	r3, r3, #21
 800695e:	4013      	ands	r3, r2
 8006960:	d110      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006962:	4b6b      	ldr	r3, [pc, #428]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	4b6a      	ldr	r3, [pc, #424]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006968:	2180      	movs	r1, #128	@ 0x80
 800696a:	0549      	lsls	r1, r1, #21
 800696c:	430a      	orrs	r2, r1
 800696e:	61da      	str	r2, [r3, #28]
 8006970:	4b67      	ldr	r3, [pc, #412]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	055b      	lsls	r3, r3, #21
 8006978:	4013      	ands	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800697e:	183b      	adds	r3, r7, r0
 8006980:	2201      	movs	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006984:	4b63      	ldr	r3, [pc, #396]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	2380      	movs	r3, #128	@ 0x80
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	4013      	ands	r3, r2
 800698e:	d11a      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006990:	4b60      	ldr	r3, [pc, #384]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b5f      	ldr	r3, [pc, #380]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006996:	2180      	movs	r1, #128	@ 0x80
 8006998:	0049      	lsls	r1, r1, #1
 800699a:	430a      	orrs	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800699e:	f7fe f8c1 	bl	8004b24 <HAL_GetTick>
 80069a2:	0003      	movs	r3, r0
 80069a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a6:	e008      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a8:	f7fe f8bc 	bl	8004b24 <HAL_GetTick>
 80069ac:	0002      	movs	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	@ 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e0a6      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ba:	4b56      	ldr	r3, [pc, #344]	@ (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	@ 0x80
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4013      	ands	r3, r2
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069c6:	4b52      	ldr	r3, [pc, #328]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	23c0      	movs	r3, #192	@ 0xc0
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4013      	ands	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d034      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	23c0      	movs	r3, #192	@ 0xc0
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4013      	ands	r3, r2
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d02c      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069e8:	4b49      	ldr	r3, [pc, #292]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80069ee:	4013      	ands	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069f2:	4b47      	ldr	r3, [pc, #284]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	4b46      	ldr	r3, [pc, #280]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069f8:	2180      	movs	r1, #128	@ 0x80
 80069fa:	0249      	lsls	r1, r1, #9
 80069fc:	430a      	orrs	r2, r1
 80069fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a00:	4b43      	ldr	r3, [pc, #268]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	4b42      	ldr	r3, [pc, #264]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a06:	4945      	ldr	r1, [pc, #276]	@ (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a0c:	4b40      	ldr	r3, [pc, #256]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	4013      	ands	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1a:	f7fe f883 	bl	8004b24 <HAL_GetTick>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a22:	e009      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a24:	f7fe f87e 	bl	8004b24 <HAL_GetTick>
 8006a28:	0002      	movs	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e067      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a38:	4b35      	ldr	r3, [pc, #212]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d0f0      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a42:	4b33      	ldr	r3, [pc, #204]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	4a34      	ldr	r2, [pc, #208]	@ (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b2f      	ldr	r3, [pc, #188]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a52:	430a      	orrs	r2, r1
 8006a54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a56:	2317      	movs	r3, #23
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d105      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a60:	4b2b      	ldr	r3, [pc, #172]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	4b2a      	ldr	r3, [pc, #168]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a66:	492f      	ldr	r1, [pc, #188]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2201      	movs	r2, #1
 8006a72:	4013      	ands	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a76:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a86:	430a      	orrs	r2, r1
 8006a88:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	4013      	ands	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a94:	4b1e      	ldr	r3, [pc, #120]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	4a23      	ldr	r2, [pc, #140]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	2380      	movs	r3, #128	@ 0x80
 8006aae:	02db      	lsls	r3, r3, #11
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ab4:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	0019      	movs	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	4b13      	ldr	r3, [pc, #76]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2220      	movs	r2, #32
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	4393      	bics	r3, r2
 8006ada:	0019      	movs	r1, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4013      	ands	r3, r2
 8006af0:	d009      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006af2:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	2240      	movs	r2, #64	@ 0x40
 8006af8:	4393      	bics	r3, r2
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	4b03      	ldr	r3, [pc, #12]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b02:	430a      	orrs	r2, r1
 8006b04:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b006      	add	sp, #24
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40007000 	.word	0x40007000
 8006b18:	fffffcff 	.word	0xfffffcff
 8006b1c:	fffeffff 	.word	0xfffeffff
 8006b20:	00001388 	.word	0x00001388
 8006b24:	efffffff 	.word	0xefffffff
 8006b28:	fffcffff 	.word	0xfffcffff
 8006b2c:	fff3ffff 	.word	0xfff3ffff

08006b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0a8      	b.n	8006c94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	2382      	movs	r3, #130	@ 0x82
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d009      	beq.n	8006b6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	61da      	str	r2, [r3, #28]
 8006b5c:	e005      	b.n	8006b6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	225d      	movs	r2, #93	@ 0x5d
 8006b74:	5c9b      	ldrb	r3, [r3, r2]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d107      	bne.n	8006b8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	225c      	movs	r2, #92	@ 0x5c
 8006b80:	2100      	movs	r1, #0
 8006b82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7fd fd7c 	bl	8004684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	225d      	movs	r2, #93	@ 0x5d
 8006b90:	2102      	movs	r1, #2
 8006b92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2140      	movs	r1, #64	@ 0x40
 8006ba0:	438a      	bics	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	23e0      	movs	r3, #224	@ 0xe0
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d902      	bls.n	8006bb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e002      	b.n	8006bbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bb6:	2380      	movs	r3, #128	@ 0x80
 8006bb8:	015b      	lsls	r3, r3, #5
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	23f0      	movs	r3, #240	@ 0xf0
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d008      	beq.n	8006bda <HAL_SPI_Init+0xaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	23e0      	movs	r3, #224	@ 0xe0
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d002      	beq.n	8006bda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	2382      	movs	r3, #130	@ 0x82
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	401a      	ands	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6899      	ldr	r1, [r3, #8]
 8006be8:	2384      	movs	r3, #132	@ 0x84
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	400b      	ands	r3, r1
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	400b      	ands	r3, r1
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6999      	ldr	r1, [r3, #24]
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	400b      	ands	r3, r1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	2138      	movs	r1, #56	@ 0x38
 8006c16:	400b      	ands	r3, r1
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	2180      	movs	r1, #128	@ 0x80
 8006c20:	400b      	ands	r3, r1
 8006c22:	431a      	orrs	r2, r3
 8006c24:	0011      	movs	r1, r2
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c2a:	2380      	movs	r3, #128	@ 0x80
 8006c2c:	019b      	lsls	r3, r3, #6
 8006c2e:	401a      	ands	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	2204      	movs	r2, #4
 8006c40:	401a      	ands	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	2110      	movs	r1, #16
 8006c48:	400b      	ands	r3, r1
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c50:	2108      	movs	r1, #8
 8006c52:	400b      	ands	r3, r1
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68d9      	ldr	r1, [r3, #12]
 8006c5a:	23f0      	movs	r3, #240	@ 0xf0
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	400b      	ands	r3, r1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	0011      	movs	r1, r2
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	2380      	movs	r3, #128	@ 0x80
 8006c68:	015b      	lsls	r3, r3, #5
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4907      	ldr	r1, [pc, #28]	@ (8006c9c <HAL_SPI_Init+0x16c>)
 8006c80:	400a      	ands	r2, r1
 8006c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	225d      	movs	r2, #93	@ 0x5d
 8006c8e:	2101      	movs	r1, #1
 8006c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	0018      	movs	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	b004      	add	sp, #16
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	fffff7ff 	.word	0xfffff7ff

08006ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e044      	b.n	8006d3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2278      	movs	r2, #120	@ 0x78
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fd fe5b 	bl	8004980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2224      	movs	r2, #36	@ 0x24
 8006cce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	438a      	bics	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 f8d0 	bl	8006e88 <UART_SetConfig>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e024      	b.n	8006d3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 faab 	bl	8007258 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	490d      	ldr	r1, [pc, #52]	@ (8006d44 <HAL_UART_Init+0xa4>)
 8006d0e:	400a      	ands	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	212a      	movs	r1, #42	@ 0x2a
 8006d1e:	438a      	bics	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 fb43 	bl	80073c0 <UART_CheckIdleState>
 8006d3a:	0003      	movs	r3, r0
}
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b002      	add	sp, #8
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	ffffb7ff 	.word	0xffffb7ff

08006d48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	@ 0x28
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	1dbb      	adds	r3, r7, #6
 8006d56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d000      	beq.n	8006d62 <HAL_UART_Transmit+0x1a>
 8006d60:	e08c      	b.n	8006e7c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_UART_Transmit+0x28>
 8006d68:	1dbb      	adds	r3, r7, #6
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e084      	b.n	8006e7e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	2380      	movs	r3, #128	@ 0x80
 8006d7a:	015b      	lsls	r3, r3, #5
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d109      	bne.n	8006d94 <HAL_UART_Transmit+0x4c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d001      	beq.n	8006d94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e074      	b.n	8006e7e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2284      	movs	r2, #132	@ 0x84
 8006d98:	2100      	movs	r1, #0
 8006d9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2221      	movs	r2, #33	@ 0x21
 8006da0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da2:	f7fd febf 	bl	8004b24 <HAL_GetTick>
 8006da6:	0003      	movs	r3, r0
 8006da8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1dba      	adds	r2, r7, #6
 8006dae:	2150      	movs	r1, #80	@ 0x50
 8006db0:	8812      	ldrh	r2, [r2, #0]
 8006db2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1dba      	adds	r2, r7, #6
 8006db8:	2152      	movs	r1, #82	@ 0x52
 8006dba:	8812      	ldrh	r2, [r2, #0]
 8006dbc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	2380      	movs	r3, #128	@ 0x80
 8006dc4:	015b      	lsls	r3, r3, #5
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d108      	bne.n	8006ddc <HAL_UART_Transmit+0x94>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e003      	b.n	8006de4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006de4:	e02f      	b.n	8006e46 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	0013      	movs	r3, r2
 8006df0:	2200      	movs	r2, #0
 8006df2:	2180      	movs	r1, #128	@ 0x80
 8006df4:	f000 fb8c 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 8006df8:	1e03      	subs	r3, r0, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e03b      	b.n	8006e7e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	05d2      	lsls	r2, r2, #23
 8006e16:	0dd2      	lsrs	r2, r2, #23
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	3302      	adds	r3, #2
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	e007      	b.n	8006e34 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	781a      	ldrb	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3301      	adds	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2252      	movs	r2, #82	@ 0x52
 8006e38:	5a9b      	ldrh	r3, [r3, r2]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b299      	uxth	r1, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2252      	movs	r2, #82	@ 0x52
 8006e44:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2252      	movs	r2, #82	@ 0x52
 8006e4a:	5a9b      	ldrh	r3, [r3, r2]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1c9      	bne.n	8006de6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	0013      	movs	r3, r2
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2140      	movs	r1, #64	@ 0x40
 8006e60:	f000 fb56 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 8006e64:	1e03      	subs	r3, r0, #0
 8006e66:	d004      	beq.n	8006e72 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e005      	b.n	8006e7e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
  }
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b008      	add	sp, #32
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e90:	231e      	movs	r3, #30
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4abe      	ldr	r2, [pc, #760]	@ (80071b0 <UART_SetConfig+0x328>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	0019      	movs	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4ab9      	ldr	r2, [pc, #740]	@ (80071b4 <UART_SetConfig+0x32c>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	0019      	movs	r1, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68da      	ldr	r2, [r3, #12]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	4ab0      	ldr	r2, [pc, #704]	@ (80071b8 <UART_SetConfig+0x330>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	0019      	movs	r1, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4aac      	ldr	r2, [pc, #688]	@ (80071bc <UART_SetConfig+0x334>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d127      	bne.n	8006f5e <UART_SetConfig+0xd6>
 8006f0e:	4bac      	ldr	r3, [pc, #688]	@ (80071c0 <UART_SetConfig+0x338>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	2203      	movs	r2, #3
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d00d      	beq.n	8006f36 <UART_SetConfig+0xae>
 8006f1a:	d81b      	bhi.n	8006f54 <UART_SetConfig+0xcc>
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d014      	beq.n	8006f4a <UART_SetConfig+0xc2>
 8006f20:	d818      	bhi.n	8006f54 <UART_SetConfig+0xcc>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <UART_SetConfig+0xa4>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d00a      	beq.n	8006f40 <UART_SetConfig+0xb8>
 8006f2a:	e013      	b.n	8006f54 <UART_SetConfig+0xcc>
 8006f2c:	231f      	movs	r3, #31
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	e0bd      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006f36:	231f      	movs	r3, #31
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e0b8      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006f40:	231f      	movs	r3, #31
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2204      	movs	r2, #4
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e0b3      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006f4a:	231f      	movs	r3, #31
 8006f4c:	18fb      	adds	r3, r7, r3
 8006f4e:	2208      	movs	r2, #8
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e0ae      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006f54:	231f      	movs	r3, #31
 8006f56:	18fb      	adds	r3, r7, r3
 8006f58:	2210      	movs	r2, #16
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e0a9      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a98      	ldr	r2, [pc, #608]	@ (80071c4 <UART_SetConfig+0x33c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d134      	bne.n	8006fd2 <UART_SetConfig+0x14a>
 8006f68:	4b95      	ldr	r3, [pc, #596]	@ (80071c0 <UART_SetConfig+0x338>)
 8006f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f6c:	23c0      	movs	r3, #192	@ 0xc0
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	4013      	ands	r3, r2
 8006f72:	22c0      	movs	r2, #192	@ 0xc0
 8006f74:	0292      	lsls	r2, r2, #10
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d017      	beq.n	8006faa <UART_SetConfig+0x122>
 8006f7a:	22c0      	movs	r2, #192	@ 0xc0
 8006f7c:	0292      	lsls	r2, r2, #10
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d822      	bhi.n	8006fc8 <UART_SetConfig+0x140>
 8006f82:	2280      	movs	r2, #128	@ 0x80
 8006f84:	0292      	lsls	r2, r2, #10
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d019      	beq.n	8006fbe <UART_SetConfig+0x136>
 8006f8a:	2280      	movs	r2, #128	@ 0x80
 8006f8c:	0292      	lsls	r2, r2, #10
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d81a      	bhi.n	8006fc8 <UART_SetConfig+0x140>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <UART_SetConfig+0x118>
 8006f96:	2280      	movs	r2, #128	@ 0x80
 8006f98:	0252      	lsls	r2, r2, #9
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00a      	beq.n	8006fb4 <UART_SetConfig+0x12c>
 8006f9e:	e013      	b.n	8006fc8 <UART_SetConfig+0x140>
 8006fa0:	231f      	movs	r3, #31
 8006fa2:	18fb      	adds	r3, r7, r3
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e083      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006faa:	231f      	movs	r3, #31
 8006fac:	18fb      	adds	r3, r7, r3
 8006fae:	2202      	movs	r2, #2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e07e      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006fb4:	231f      	movs	r3, #31
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	2204      	movs	r2, #4
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e079      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006fbe:	231f      	movs	r3, #31
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e074      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006fc8:	231f      	movs	r3, #31
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	2210      	movs	r2, #16
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e06f      	b.n	80070b2 <UART_SetConfig+0x22a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80071c8 <UART_SetConfig+0x340>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d134      	bne.n	8007046 <UART_SetConfig+0x1be>
 8006fdc:	4b78      	ldr	r3, [pc, #480]	@ (80071c0 <UART_SetConfig+0x338>)
 8006fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe0:	23c0      	movs	r3, #192	@ 0xc0
 8006fe2:	031b      	lsls	r3, r3, #12
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	22c0      	movs	r2, #192	@ 0xc0
 8006fe8:	0312      	lsls	r2, r2, #12
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d017      	beq.n	800701e <UART_SetConfig+0x196>
 8006fee:	22c0      	movs	r2, #192	@ 0xc0
 8006ff0:	0312      	lsls	r2, r2, #12
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d822      	bhi.n	800703c <UART_SetConfig+0x1b4>
 8006ff6:	2280      	movs	r2, #128	@ 0x80
 8006ff8:	0312      	lsls	r2, r2, #12
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d019      	beq.n	8007032 <UART_SetConfig+0x1aa>
 8006ffe:	2280      	movs	r2, #128	@ 0x80
 8007000:	0312      	lsls	r2, r2, #12
 8007002:	4293      	cmp	r3, r2
 8007004:	d81a      	bhi.n	800703c <UART_SetConfig+0x1b4>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <UART_SetConfig+0x18c>
 800700a:	2280      	movs	r2, #128	@ 0x80
 800700c:	02d2      	lsls	r2, r2, #11
 800700e:	4293      	cmp	r3, r2
 8007010:	d00a      	beq.n	8007028 <UART_SetConfig+0x1a0>
 8007012:	e013      	b.n	800703c <UART_SetConfig+0x1b4>
 8007014:	231f      	movs	r3, #31
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e049      	b.n	80070b2 <UART_SetConfig+0x22a>
 800701e:	231f      	movs	r3, #31
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e044      	b.n	80070b2 <UART_SetConfig+0x22a>
 8007028:	231f      	movs	r3, #31
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	2204      	movs	r2, #4
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e03f      	b.n	80070b2 <UART_SetConfig+0x22a>
 8007032:	231f      	movs	r3, #31
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	2208      	movs	r2, #8
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e03a      	b.n	80070b2 <UART_SetConfig+0x22a>
 800703c:	231f      	movs	r3, #31
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	2210      	movs	r2, #16
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e035      	b.n	80070b2 <UART_SetConfig+0x22a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a60      	ldr	r2, [pc, #384]	@ (80071cc <UART_SetConfig+0x344>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d104      	bne.n	800705a <UART_SetConfig+0x1d2>
 8007050:	231f      	movs	r3, #31
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e02b      	b.n	80070b2 <UART_SetConfig+0x22a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a5c      	ldr	r2, [pc, #368]	@ (80071d0 <UART_SetConfig+0x348>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d104      	bne.n	800706e <UART_SetConfig+0x1e6>
 8007064:	231f      	movs	r3, #31
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e021      	b.n	80070b2 <UART_SetConfig+0x22a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a58      	ldr	r2, [pc, #352]	@ (80071d4 <UART_SetConfig+0x34c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d104      	bne.n	8007082 <UART_SetConfig+0x1fa>
 8007078:	231f      	movs	r3, #31
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	e017      	b.n	80070b2 <UART_SetConfig+0x22a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a54      	ldr	r2, [pc, #336]	@ (80071d8 <UART_SetConfig+0x350>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d104      	bne.n	8007096 <UART_SetConfig+0x20e>
 800708c:	231f      	movs	r3, #31
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	e00d      	b.n	80070b2 <UART_SetConfig+0x22a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a50      	ldr	r2, [pc, #320]	@ (80071dc <UART_SetConfig+0x354>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d104      	bne.n	80070aa <UART_SetConfig+0x222>
 80070a0:	231f      	movs	r3, #31
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e003      	b.n	80070b2 <UART_SetConfig+0x22a>
 80070aa:	231f      	movs	r3, #31
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	2210      	movs	r2, #16
 80070b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69da      	ldr	r2, [r3, #28]
 80070b6:	2380      	movs	r3, #128	@ 0x80
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d15c      	bne.n	8007178 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 80070be:	231f      	movs	r3, #31
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d015      	beq.n	80070f4 <UART_SetConfig+0x26c>
 80070c8:	dc18      	bgt.n	80070fc <UART_SetConfig+0x274>
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d00d      	beq.n	80070ea <UART_SetConfig+0x262>
 80070ce:	dc15      	bgt.n	80070fc <UART_SetConfig+0x274>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <UART_SetConfig+0x252>
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d005      	beq.n	80070e4 <UART_SetConfig+0x25c>
 80070d8:	e010      	b.n	80070fc <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070da:	f7ff fc13 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 80070de:	0003      	movs	r3, r0
 80070e0:	61bb      	str	r3, [r7, #24]
        break;
 80070e2:	e012      	b.n	800710a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b3e      	ldr	r3, [pc, #248]	@ (80071e0 <UART_SetConfig+0x358>)
 80070e6:	61bb      	str	r3, [r7, #24]
        break;
 80070e8:	e00f      	b.n	800710a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7ff fb8f 	bl	800680c <HAL_RCC_GetSysClockFreq>
 80070ee:	0003      	movs	r3, r0
 80070f0:	61bb      	str	r3, [r7, #24]
        break;
 80070f2:	e00a      	b.n	800710a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f4:	2380      	movs	r3, #128	@ 0x80
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	61bb      	str	r3, [r7, #24]
        break;
 80070fa:	e006      	b.n	800710a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007100:	231e      	movs	r3, #30
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
        break;
 8007108:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d100      	bne.n	8007112 <UART_SetConfig+0x28a>
 8007110:	e095      	b.n	800723e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	005a      	lsls	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	18d2      	adds	r2, r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	0019      	movs	r1, r3
 8007124:	0010      	movs	r0, r2
 8007126:	f7f9 f809 	bl	800013c <__udivsi3>
 800712a:	0003      	movs	r3, r0
 800712c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b0f      	cmp	r3, #15
 8007132:	d91c      	bls.n	800716e <UART_SetConfig+0x2e6>
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	2380      	movs	r3, #128	@ 0x80
 8007138:	025b      	lsls	r3, r3, #9
 800713a:	429a      	cmp	r2, r3
 800713c:	d217      	bcs.n	800716e <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	b29a      	uxth	r2, r3
 8007142:	200e      	movs	r0, #14
 8007144:	183b      	adds	r3, r7, r0
 8007146:	210f      	movs	r1, #15
 8007148:	438a      	bics	r2, r1
 800714a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	b29b      	uxth	r3, r3
 8007152:	2207      	movs	r2, #7
 8007154:	4013      	ands	r3, r2
 8007156:	b299      	uxth	r1, r3
 8007158:	183b      	adds	r3, r7, r0
 800715a:	183a      	adds	r2, r7, r0
 800715c:	8812      	ldrh	r2, [r2, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	183a      	adds	r2, r7, r0
 8007168:	8812      	ldrh	r2, [r2, #0]
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	e067      	b.n	800723e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800716e:	231e      	movs	r3, #30
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	2201      	movs	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e062      	b.n	800723e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007178:	231f      	movs	r3, #31
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b08      	cmp	r3, #8
 8007180:	d030      	beq.n	80071e4 <UART_SetConfig+0x35c>
 8007182:	dc33      	bgt.n	80071ec <UART_SetConfig+0x364>
 8007184:	2b04      	cmp	r3, #4
 8007186:	d00d      	beq.n	80071a4 <UART_SetConfig+0x31c>
 8007188:	dc30      	bgt.n	80071ec <UART_SetConfig+0x364>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <UART_SetConfig+0x30c>
 800718e:	2b02      	cmp	r3, #2
 8007190:	d005      	beq.n	800719e <UART_SetConfig+0x316>
 8007192:	e02b      	b.n	80071ec <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007194:	f7ff fbb6 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8007198:	0003      	movs	r3, r0
 800719a:	61bb      	str	r3, [r7, #24]
        break;
 800719c:	e02d      	b.n	80071fa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719e:	4b10      	ldr	r3, [pc, #64]	@ (80071e0 <UART_SetConfig+0x358>)
 80071a0:	61bb      	str	r3, [r7, #24]
        break;
 80071a2:	e02a      	b.n	80071fa <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a4:	f7ff fb32 	bl	800680c <HAL_RCC_GetSysClockFreq>
 80071a8:	0003      	movs	r3, r0
 80071aa:	61bb      	str	r3, [r7, #24]
        break;
 80071ac:	e025      	b.n	80071fa <UART_SetConfig+0x372>
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	efff69f3 	.word	0xefff69f3
 80071b4:	ffffcfff 	.word	0xffffcfff
 80071b8:	fffff4ff 	.word	0xfffff4ff
 80071bc:	40013800 	.word	0x40013800
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40004400 	.word	0x40004400
 80071c8:	40004800 	.word	0x40004800
 80071cc:	40004c00 	.word	0x40004c00
 80071d0:	40005000 	.word	0x40005000
 80071d4:	40011400 	.word	0x40011400
 80071d8:	40011800 	.word	0x40011800
 80071dc:	40011c00 	.word	0x40011c00
 80071e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e4:	2380      	movs	r3, #128	@ 0x80
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	61bb      	str	r3, [r7, #24]
        break;
 80071ea:	e006      	b.n	80071fa <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071f0:	231e      	movs	r3, #30
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
        break;
 80071f8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	085a      	lsrs	r2, r3, #1
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	18d2      	adds	r2, r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	0019      	movs	r1, r3
 8007210:	0010      	movs	r0, r2
 8007212:	f7f8 ff93 	bl	800013c <__udivsi3>
 8007216:	0003      	movs	r3, r0
 8007218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d90a      	bls.n	8007236 <UART_SetConfig+0x3ae>
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	025b      	lsls	r3, r3, #9
 8007226:	429a      	cmp	r2, r3
 8007228:	d205      	bcs.n	8007236 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60da      	str	r2, [r3, #12]
 8007234:	e003      	b.n	800723e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8007236:	231e      	movs	r3, #30
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800724a:	231e      	movs	r3, #30
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	781b      	ldrb	r3, [r3, #0]
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	b008      	add	sp, #32
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007264:	2201      	movs	r2, #1
 8007266:	4013      	ands	r3, r2
 8007268:	d00b      	beq.n	8007282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4a4a      	ldr	r2, [pc, #296]	@ (800739c <UART_AdvFeatureConfig+0x144>)
 8007272:	4013      	ands	r3, r2
 8007274:	0019      	movs	r1, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2202      	movs	r2, #2
 8007288:	4013      	ands	r3, r2
 800728a:	d00b      	beq.n	80072a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	4a43      	ldr	r2, [pc, #268]	@ (80073a0 <UART_AdvFeatureConfig+0x148>)
 8007294:	4013      	ands	r3, r2
 8007296:	0019      	movs	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a8:	2204      	movs	r2, #4
 80072aa:	4013      	ands	r3, r2
 80072ac:	d00b      	beq.n	80072c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a3b      	ldr	r2, [pc, #236]	@ (80073a4 <UART_AdvFeatureConfig+0x14c>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	0019      	movs	r1, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	2208      	movs	r2, #8
 80072cc:	4013      	ands	r3, r2
 80072ce:	d00b      	beq.n	80072e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4a34      	ldr	r2, [pc, #208]	@ (80073a8 <UART_AdvFeatureConfig+0x150>)
 80072d8:	4013      	ands	r3, r2
 80072da:	0019      	movs	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	2210      	movs	r2, #16
 80072ee:	4013      	ands	r3, r2
 80072f0:	d00b      	beq.n	800730a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	4a2c      	ldr	r2, [pc, #176]	@ (80073ac <UART_AdvFeatureConfig+0x154>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	0019      	movs	r1, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	2220      	movs	r2, #32
 8007310:	4013      	ands	r3, r2
 8007312:	d00b      	beq.n	800732c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	4a25      	ldr	r2, [pc, #148]	@ (80073b0 <UART_AdvFeatureConfig+0x158>)
 800731c:	4013      	ands	r3, r2
 800731e:	0019      	movs	r1, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	2240      	movs	r2, #64	@ 0x40
 8007332:	4013      	ands	r3, r2
 8007334:	d01d      	beq.n	8007372 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4a1d      	ldr	r2, [pc, #116]	@ (80073b4 <UART_AdvFeatureConfig+0x15c>)
 800733e:	4013      	ands	r3, r2
 8007340:	0019      	movs	r1, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	035b      	lsls	r3, r3, #13
 8007356:	429a      	cmp	r2, r3
 8007358:	d10b      	bne.n	8007372 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4a15      	ldr	r2, [pc, #84]	@ (80073b8 <UART_AdvFeatureConfig+0x160>)
 8007362:	4013      	ands	r3, r2
 8007364:	0019      	movs	r1, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	2280      	movs	r2, #128	@ 0x80
 8007378:	4013      	ands	r3, r2
 800737a:	d00b      	beq.n	8007394 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	4a0e      	ldr	r2, [pc, #56]	@ (80073bc <UART_AdvFeatureConfig+0x164>)
 8007384:	4013      	ands	r3, r2
 8007386:	0019      	movs	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }
}
 8007394:	46c0      	nop			@ (mov r8, r8)
 8007396:	46bd      	mov	sp, r7
 8007398:	b002      	add	sp, #8
 800739a:	bd80      	pop	{r7, pc}
 800739c:	fffdffff 	.word	0xfffdffff
 80073a0:	fffeffff 	.word	0xfffeffff
 80073a4:	fffbffff 	.word	0xfffbffff
 80073a8:	ffff7fff 	.word	0xffff7fff
 80073ac:	ffffefff 	.word	0xffffefff
 80073b0:	ffffdfff 	.word	0xffffdfff
 80073b4:	ffefffff 	.word	0xffefffff
 80073b8:	ff9fffff 	.word	0xff9fffff
 80073bc:	fff7ffff 	.word	0xfff7ffff

080073c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b092      	sub	sp, #72	@ 0x48
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2284      	movs	r2, #132	@ 0x84
 80073cc:	2100      	movs	r1, #0
 80073ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d0:	f7fd fba8 	bl	8004b24 <HAL_GetTick>
 80073d4:	0003      	movs	r3, r0
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2208      	movs	r2, #8
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d12c      	bne.n	8007440 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e8:	2280      	movs	r2, #128	@ 0x80
 80073ea:	0391      	lsls	r1, r2, #14
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4a46      	ldr	r2, [pc, #280]	@ (8007508 <UART_CheckIdleState+0x148>)
 80073f0:	9200      	str	r2, [sp, #0]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f000 f88c 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 80073f8:	1e03      	subs	r3, r0, #0
 80073fa:	d021      	beq.n	8007440 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007406:	2301      	movs	r3, #1
 8007408:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	f383 8810 	msr	PRIMASK, r3
}
 8007410:	46c0      	nop			@ (mov r8, r8)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2180      	movs	r1, #128	@ 0x80
 800741e:	438a      	bics	r2, r1
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	f383 8810 	msr	PRIMASK, r3
}
 800742c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2278      	movs	r2, #120	@ 0x78
 8007438:	2100      	movs	r1, #0
 800743a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e05f      	b.n	8007500 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2204      	movs	r2, #4
 8007448:	4013      	ands	r3, r2
 800744a:	2b04      	cmp	r3, #4
 800744c:	d146      	bne.n	80074dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007450:	2280      	movs	r2, #128	@ 0x80
 8007452:	03d1      	lsls	r1, r2, #15
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4a2c      	ldr	r2, [pc, #176]	@ (8007508 <UART_CheckIdleState+0x148>)
 8007458:	9200      	str	r2, [sp, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	f000 f858 	bl	8007510 <UART_WaitOnFlagUntilTimeout>
 8007460:	1e03      	subs	r3, r0, #0
 8007462:	d03b      	beq.n	80074dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007464:	f3ef 8310 	mrs	r3, PRIMASK
 8007468:	60fb      	str	r3, [r7, #12]
  return(result);
 800746a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
 800746e:	2301      	movs	r3, #1
 8007470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f383 8810 	msr	PRIMASK, r3
}
 8007478:	46c0      	nop			@ (mov r8, r8)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4921      	ldr	r1, [pc, #132]	@ (800750c <UART_CheckIdleState+0x14c>)
 8007486:	400a      	ands	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f383 8810 	msr	PRIMASK, r3
}
 8007494:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007496:	f3ef 8310 	mrs	r3, PRIMASK
 800749a:	61bb      	str	r3, [r7, #24]
  return(result);
 800749c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a0:	2301      	movs	r3, #1
 80074a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	46c0      	nop			@ (mov r8, r8)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2101      	movs	r1, #1
 80074b8:	438a      	bics	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	f383 8810 	msr	PRIMASK, r3
}
 80074c6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2280      	movs	r2, #128	@ 0x80
 80074cc:	2120      	movs	r1, #32
 80074ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2278      	movs	r2, #120	@ 0x78
 80074d4:	2100      	movs	r1, #0
 80074d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e011      	b.n	8007500 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	@ 0x80
 80074e6:	2120      	movs	r1, #32
 80074e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2278      	movs	r2, #120	@ 0x78
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	0018      	movs	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	b010      	add	sp, #64	@ 0x40
 8007506:	bd80      	pop	{r7, pc}
 8007508:	01ffffff 	.word	0x01ffffff
 800750c:	fffffedf 	.word	0xfffffedf

08007510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007520:	e04b      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	3301      	adds	r3, #1
 8007526:	d048      	beq.n	80075ba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007528:	f7fd fafc 	bl	8004b24 <HAL_GetTick>
 800752c:	0002      	movs	r2, r0
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	429a      	cmp	r2, r3
 8007536:	d302      	bcc.n	800753e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e04b      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2204      	movs	r2, #4
 800754a:	4013      	ands	r3, r2
 800754c:	d035      	beq.n	80075ba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	2208      	movs	r2, #8
 8007556:	4013      	ands	r3, r2
 8007558:	2b08      	cmp	r3, #8
 800755a:	d111      	bne.n	8007580 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2208      	movs	r2, #8
 8007562:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	0018      	movs	r0, r3
 8007568:	f000 f83c 	bl	80075e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2284      	movs	r2, #132	@ 0x84
 8007570:	2108      	movs	r1, #8
 8007572:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2278      	movs	r2, #120	@ 0x78
 8007578:	2100      	movs	r1, #0
 800757a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e02c      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	2380      	movs	r3, #128	@ 0x80
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	401a      	ands	r2, r3
 800758c:	2380      	movs	r3, #128	@ 0x80
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	429a      	cmp	r2, r3
 8007592:	d112      	bne.n	80075ba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2280      	movs	r2, #128	@ 0x80
 800759a:	0112      	lsls	r2, r2, #4
 800759c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	0018      	movs	r0, r3
 80075a2:	f000 f81f 	bl	80075e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2284      	movs	r2, #132	@ 0x84
 80075aa:	2120      	movs	r1, #32
 80075ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2278      	movs	r2, #120	@ 0x78
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e00f      	b.n	80075da <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4013      	ands	r3, r2
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	425a      	negs	r2, r3
 80075ca:	4153      	adcs	r3, r2
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	001a      	movs	r2, r3
 80075d0:	1dfb      	adds	r3, r7, #7
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d0a4      	beq.n	8007522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	0018      	movs	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	b004      	add	sp, #16
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08e      	sub	sp, #56	@ 0x38
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	617b      	str	r3, [r7, #20]
  return(result);
 80075f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f6:	2301      	movs	r3, #1
 80075f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			@ (mov r8, r8)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4926      	ldr	r1, [pc, #152]	@ (80076a8 <UART_EndRxTransfer+0xc4>)
 800760e:	400a      	ands	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f383 8810 	msr	PRIMASK, r3
}
 800761c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800761e:	f3ef 8310 	mrs	r3, PRIMASK
 8007622:	623b      	str	r3, [r7, #32]
  return(result);
 8007624:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	633b      	str	r3, [r7, #48]	@ 0x30
 8007628:	2301      	movs	r3, #1
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	f383 8810 	msr	PRIMASK, r3
}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2101      	movs	r1, #1
 8007640:	438a      	bics	r2, r1
 8007642:	609a      	str	r2, [r3, #8]
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	f383 8810 	msr	PRIMASK, r3
}
 800764e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007654:	2b01      	cmp	r3, #1
 8007656:	d118      	bne.n	800768a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007658:	f3ef 8310 	mrs	r3, PRIMASK
 800765c:	60bb      	str	r3, [r7, #8]
  return(result);
 800765e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007662:	2301      	movs	r3, #1
 8007664:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f383 8810 	msr	PRIMASK, r3
}
 800766c:	46c0      	nop			@ (mov r8, r8)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2110      	movs	r1, #16
 800767a:	438a      	bics	r2, r1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f383 8810 	msr	PRIMASK, r3
}
 8007688:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2280      	movs	r2, #128	@ 0x80
 800768e:	2120      	movs	r1, #32
 8007690:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b00e      	add	sp, #56	@ 0x38
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	fffffedf 	.word	0xfffffedf

080076ac <__cvt>:
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	001f      	movs	r7, r3
 80076b0:	2300      	movs	r3, #0
 80076b2:	0016      	movs	r6, r2
 80076b4:	b08b      	sub	sp, #44	@ 0x2c
 80076b6:	429f      	cmp	r7, r3
 80076b8:	da04      	bge.n	80076c4 <__cvt+0x18>
 80076ba:	2180      	movs	r1, #128	@ 0x80
 80076bc:	0609      	lsls	r1, r1, #24
 80076be:	187b      	adds	r3, r7, r1
 80076c0:	001f      	movs	r7, r3
 80076c2:	232d      	movs	r3, #45	@ 0x2d
 80076c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80076c8:	7013      	strb	r3, [r2, #0]
 80076ca:	2320      	movs	r3, #32
 80076cc:	2203      	movs	r2, #3
 80076ce:	439d      	bics	r5, r3
 80076d0:	2d46      	cmp	r5, #70	@ 0x46
 80076d2:	d007      	beq.n	80076e4 <__cvt+0x38>
 80076d4:	002b      	movs	r3, r5
 80076d6:	3b45      	subs	r3, #69	@ 0x45
 80076d8:	4259      	negs	r1, r3
 80076da:	414b      	adcs	r3, r1
 80076dc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80076de:	3a01      	subs	r2, #1
 80076e0:	18cb      	adds	r3, r1, r3
 80076e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80076e4:	ab09      	add	r3, sp, #36	@ 0x24
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	ab08      	add	r3, sp, #32
 80076ea:	9303      	str	r3, [sp, #12]
 80076ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076ee:	9200      	str	r2, [sp, #0]
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076f4:	0032      	movs	r2, r6
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	003b      	movs	r3, r7
 80076fa:	f001 ff23 	bl	8009544 <_dtoa_r>
 80076fe:	0004      	movs	r4, r0
 8007700:	2d47      	cmp	r5, #71	@ 0x47
 8007702:	d11b      	bne.n	800773c <__cvt+0x90>
 8007704:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007706:	07db      	lsls	r3, r3, #31
 8007708:	d511      	bpl.n	800772e <__cvt+0x82>
 800770a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800770c:	18c3      	adds	r3, r0, r3
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	0030      	movs	r0, r6
 8007716:	0039      	movs	r1, r7
 8007718:	f7f8 fe96 	bl	8000448 <__aeabi_dcmpeq>
 800771c:	2800      	cmp	r0, #0
 800771e:	d001      	beq.n	8007724 <__cvt+0x78>
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	9309      	str	r3, [sp, #36]	@ 0x24
 8007724:	2230      	movs	r2, #48	@ 0x30
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	9907      	ldr	r1, [sp, #28]
 800772a:	428b      	cmp	r3, r1
 800772c:	d320      	bcc.n	8007770 <__cvt+0xc4>
 800772e:	0020      	movs	r0, r4
 8007730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007732:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007734:	1b1b      	subs	r3, r3, r4
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	b00b      	add	sp, #44	@ 0x2c
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800773e:	18c3      	adds	r3, r0, r3
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	2d46      	cmp	r5, #70	@ 0x46
 8007744:	d1e4      	bne.n	8007710 <__cvt+0x64>
 8007746:	7803      	ldrb	r3, [r0, #0]
 8007748:	2b30      	cmp	r3, #48	@ 0x30
 800774a:	d10c      	bne.n	8007766 <__cvt+0xba>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	0030      	movs	r0, r6
 8007752:	0039      	movs	r1, r7
 8007754:	f7f8 fe78 	bl	8000448 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d104      	bne.n	8007766 <__cvt+0xba>
 800775c:	2301      	movs	r3, #1
 800775e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007760:	1a9b      	subs	r3, r3, r2
 8007762:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007768:	9a07      	ldr	r2, [sp, #28]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	18d3      	adds	r3, r2, r3
 800776e:	e7ce      	b.n	800770e <__cvt+0x62>
 8007770:	1c59      	adds	r1, r3, #1
 8007772:	9109      	str	r1, [sp, #36]	@ 0x24
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e7d6      	b.n	8007726 <__cvt+0x7a>

08007778 <__exponent>:
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	232b      	movs	r3, #43	@ 0x2b
 800777c:	0005      	movs	r5, r0
 800777e:	000c      	movs	r4, r1
 8007780:	b085      	sub	sp, #20
 8007782:	7002      	strb	r2, [r0, #0]
 8007784:	2900      	cmp	r1, #0
 8007786:	da01      	bge.n	800778c <__exponent+0x14>
 8007788:	424c      	negs	r4, r1
 800778a:	3302      	adds	r3, #2
 800778c:	706b      	strb	r3, [r5, #1]
 800778e:	2c09      	cmp	r4, #9
 8007790:	dd2c      	ble.n	80077ec <__exponent+0x74>
 8007792:	ab02      	add	r3, sp, #8
 8007794:	1dde      	adds	r6, r3, #7
 8007796:	0020      	movs	r0, r4
 8007798:	210a      	movs	r1, #10
 800779a:	f7f8 fe3f 	bl	800041c <__aeabi_idivmod>
 800779e:	0037      	movs	r7, r6
 80077a0:	3130      	adds	r1, #48	@ 0x30
 80077a2:	3e01      	subs	r6, #1
 80077a4:	0020      	movs	r0, r4
 80077a6:	7031      	strb	r1, [r6, #0]
 80077a8:	210a      	movs	r1, #10
 80077aa:	9401      	str	r4, [sp, #4]
 80077ac:	f7f8 fd50 	bl	8000250 <__divsi3>
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	0004      	movs	r4, r0
 80077b4:	2b63      	cmp	r3, #99	@ 0x63
 80077b6:	dcee      	bgt.n	8007796 <__exponent+0x1e>
 80077b8:	1eba      	subs	r2, r7, #2
 80077ba:	1ca8      	adds	r0, r5, #2
 80077bc:	0001      	movs	r1, r0
 80077be:	0013      	movs	r3, r2
 80077c0:	3430      	adds	r4, #48	@ 0x30
 80077c2:	7014      	strb	r4, [r2, #0]
 80077c4:	ac02      	add	r4, sp, #8
 80077c6:	3407      	adds	r4, #7
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d80a      	bhi.n	80077e2 <__exponent+0x6a>
 80077cc:	2300      	movs	r3, #0
 80077ce:	42a2      	cmp	r2, r4
 80077d0:	d803      	bhi.n	80077da <__exponent+0x62>
 80077d2:	3309      	adds	r3, #9
 80077d4:	aa02      	add	r2, sp, #8
 80077d6:	189b      	adds	r3, r3, r2
 80077d8:	1bdb      	subs	r3, r3, r7
 80077da:	18c0      	adds	r0, r0, r3
 80077dc:	1b40      	subs	r0, r0, r5
 80077de:	b005      	add	sp, #20
 80077e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e2:	781c      	ldrb	r4, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	700c      	strb	r4, [r1, #0]
 80077e8:	3101      	adds	r1, #1
 80077ea:	e7eb      	b.n	80077c4 <__exponent+0x4c>
 80077ec:	2330      	movs	r3, #48	@ 0x30
 80077ee:	18e4      	adds	r4, r4, r3
 80077f0:	70ab      	strb	r3, [r5, #2]
 80077f2:	1d28      	adds	r0, r5, #4
 80077f4:	70ec      	strb	r4, [r5, #3]
 80077f6:	e7f1      	b.n	80077dc <__exponent+0x64>

080077f8 <_printf_float>:
 80077f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fa:	b097      	sub	sp, #92	@ 0x5c
 80077fc:	000d      	movs	r5, r1
 80077fe:	920a      	str	r2, [sp, #40]	@ 0x28
 8007800:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007804:	9009      	str	r0, [sp, #36]	@ 0x24
 8007806:	f001 fdbf 	bl	8009388 <_localeconv_r>
 800780a:	6803      	ldr	r3, [r0, #0]
 800780c:	0018      	movs	r0, r3
 800780e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007810:	f7f8 fc78 	bl	8000104 <strlen>
 8007814:	2300      	movs	r3, #0
 8007816:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007818:	9314      	str	r3, [sp, #80]	@ 0x50
 800781a:	7e2b      	ldrb	r3, [r5, #24]
 800781c:	2207      	movs	r2, #7
 800781e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	930e      	str	r3, [sp, #56]	@ 0x38
 8007824:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	05c9      	lsls	r1, r1, #23
 800782a:	d545      	bpl.n	80078b8 <_printf_float+0xc0>
 800782c:	189b      	adds	r3, r3, r2
 800782e:	4393      	bics	r3, r2
 8007830:	001a      	movs	r2, r3
 8007832:	3208      	adds	r2, #8
 8007834:	6022      	str	r2, [r4, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	681e      	ldr	r6, [r3, #0]
 800783a:	685f      	ldr	r7, [r3, #4]
 800783c:	007b      	lsls	r3, r7, #1
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	9311      	str	r3, [sp, #68]	@ 0x44
 8007842:	9610      	str	r6, [sp, #64]	@ 0x40
 8007844:	64ae      	str	r6, [r5, #72]	@ 0x48
 8007846:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8007848:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800784a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800784c:	4ba7      	ldr	r3, [pc, #668]	@ (8007aec <_printf_float+0x2f4>)
 800784e:	4252      	negs	r2, r2
 8007850:	f7fb f8d6 	bl	8002a00 <__aeabi_dcmpun>
 8007854:	2800      	cmp	r0, #0
 8007856:	d131      	bne.n	80078bc <_printf_float+0xc4>
 8007858:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800785a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800785c:	2201      	movs	r2, #1
 800785e:	4ba3      	ldr	r3, [pc, #652]	@ (8007aec <_printf_float+0x2f4>)
 8007860:	4252      	negs	r2, r2
 8007862:	f7f8 fe01 	bl	8000468 <__aeabi_dcmple>
 8007866:	2800      	cmp	r0, #0
 8007868:	d128      	bne.n	80078bc <_printf_float+0xc4>
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	0030      	movs	r0, r6
 8007870:	0039      	movs	r1, r7
 8007872:	f7f8 fdef 	bl	8000454 <__aeabi_dcmplt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d003      	beq.n	8007882 <_printf_float+0x8a>
 800787a:	002b      	movs	r3, r5
 800787c:	222d      	movs	r2, #45	@ 0x2d
 800787e:	3343      	adds	r3, #67	@ 0x43
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007884:	4f9a      	ldr	r7, [pc, #616]	@ (8007af0 <_printf_float+0x2f8>)
 8007886:	2b47      	cmp	r3, #71	@ 0x47
 8007888:	d900      	bls.n	800788c <_printf_float+0x94>
 800788a:	4f9a      	ldr	r7, [pc, #616]	@ (8007af4 <_printf_float+0x2fc>)
 800788c:	2303      	movs	r3, #3
 800788e:	2400      	movs	r4, #0
 8007890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007892:	612b      	str	r3, [r5, #16]
 8007894:	3301      	adds	r3, #1
 8007896:	439a      	bics	r2, r3
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800789c:	0029      	movs	r1, r5
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078a4:	aa15      	add	r2, sp, #84	@ 0x54
 80078a6:	f000 f9e5 	bl	8007c74 <_printf_common>
 80078aa:	3001      	adds	r0, #1
 80078ac:	d000      	beq.n	80078b0 <_printf_float+0xb8>
 80078ae:	e09f      	b.n	80079f0 <_printf_float+0x1f8>
 80078b0:	2001      	movs	r0, #1
 80078b2:	4240      	negs	r0, r0
 80078b4:	b017      	add	sp, #92	@ 0x5c
 80078b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b8:	3307      	adds	r3, #7
 80078ba:	e7b8      	b.n	800782e <_printf_float+0x36>
 80078bc:	0032      	movs	r2, r6
 80078be:	003b      	movs	r3, r7
 80078c0:	0030      	movs	r0, r6
 80078c2:	0039      	movs	r1, r7
 80078c4:	f7fb f89c 	bl	8002a00 <__aeabi_dcmpun>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d00b      	beq.n	80078e4 <_printf_float+0xec>
 80078cc:	2f00      	cmp	r7, #0
 80078ce:	da03      	bge.n	80078d8 <_printf_float+0xe0>
 80078d0:	002b      	movs	r3, r5
 80078d2:	222d      	movs	r2, #45	@ 0x2d
 80078d4:	3343      	adds	r3, #67	@ 0x43
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078da:	4f87      	ldr	r7, [pc, #540]	@ (8007af8 <_printf_float+0x300>)
 80078dc:	2b47      	cmp	r3, #71	@ 0x47
 80078de:	d9d5      	bls.n	800788c <_printf_float+0x94>
 80078e0:	4f86      	ldr	r7, [pc, #536]	@ (8007afc <_printf_float+0x304>)
 80078e2:	e7d3      	b.n	800788c <_printf_float+0x94>
 80078e4:	2220      	movs	r2, #32
 80078e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80078e8:	686b      	ldr	r3, [r5, #4]
 80078ea:	4394      	bics	r4, r2
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	d146      	bne.n	800797e <_printf_float+0x186>
 80078f0:	3307      	adds	r3, #7
 80078f2:	606b      	str	r3, [r5, #4]
 80078f4:	2380      	movs	r3, #128	@ 0x80
 80078f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	2200      	movs	r2, #0
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	9206      	str	r2, [sp, #24]
 8007902:	aa14      	add	r2, sp, #80	@ 0x50
 8007904:	9205      	str	r2, [sp, #20]
 8007906:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007908:	a90a      	add	r1, sp, #40	@ 0x28
 800790a:	9204      	str	r2, [sp, #16]
 800790c:	aa13      	add	r2, sp, #76	@ 0x4c
 800790e:	9203      	str	r2, [sp, #12]
 8007910:	2223      	movs	r2, #35	@ 0x23
 8007912:	1852      	adds	r2, r2, r1
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	686b      	ldr	r3, [r5, #4]
 800791a:	0032      	movs	r2, r6
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007920:	003b      	movs	r3, r7
 8007922:	f7ff fec3 	bl	80076ac <__cvt>
 8007926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007928:	0007      	movs	r7, r0
 800792a:	2c47      	cmp	r4, #71	@ 0x47
 800792c:	d12d      	bne.n	800798a <_printf_float+0x192>
 800792e:	1cd3      	adds	r3, r2, #3
 8007930:	db02      	blt.n	8007938 <_printf_float+0x140>
 8007932:	686b      	ldr	r3, [r5, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	dd48      	ble.n	80079ca <_printf_float+0x1d2>
 8007938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800793a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800793c:	3b02      	subs	r3, #2
 800793e:	b2db      	uxtb	r3, r3
 8007940:	930c      	str	r3, [sp, #48]	@ 0x30
 8007942:	0028      	movs	r0, r5
 8007944:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007946:	3901      	subs	r1, #1
 8007948:	3050      	adds	r0, #80	@ 0x50
 800794a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800794c:	f7ff ff14 	bl	8007778 <__exponent>
 8007950:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007952:	0004      	movs	r4, r0
 8007954:	1813      	adds	r3, r2, r0
 8007956:	612b      	str	r3, [r5, #16]
 8007958:	2a01      	cmp	r2, #1
 800795a:	dc02      	bgt.n	8007962 <_printf_float+0x16a>
 800795c:	682a      	ldr	r2, [r5, #0]
 800795e:	07d2      	lsls	r2, r2, #31
 8007960:	d501      	bpl.n	8007966 <_printf_float+0x16e>
 8007962:	3301      	adds	r3, #1
 8007964:	612b      	str	r3, [r5, #16]
 8007966:	2323      	movs	r3, #35	@ 0x23
 8007968:	aa0a      	add	r2, sp, #40	@ 0x28
 800796a:	189b      	adds	r3, r3, r2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d100      	bne.n	8007974 <_printf_float+0x17c>
 8007972:	e792      	b.n	800789a <_printf_float+0xa2>
 8007974:	002b      	movs	r3, r5
 8007976:	222d      	movs	r2, #45	@ 0x2d
 8007978:	3343      	adds	r3, #67	@ 0x43
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e78d      	b.n	800789a <_printf_float+0xa2>
 800797e:	2c47      	cmp	r4, #71	@ 0x47
 8007980:	d1b8      	bne.n	80078f4 <_printf_float+0xfc>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1b6      	bne.n	80078f4 <_printf_float+0xfc>
 8007986:	3301      	adds	r3, #1
 8007988:	e7b3      	b.n	80078f2 <_printf_float+0xfa>
 800798a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800798c:	0011      	movs	r1, r2
 800798e:	2b65      	cmp	r3, #101	@ 0x65
 8007990:	d9d7      	bls.n	8007942 <_printf_float+0x14a>
 8007992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007994:	2b66      	cmp	r3, #102	@ 0x66
 8007996:	d11a      	bne.n	80079ce <_printf_float+0x1d6>
 8007998:	686b      	ldr	r3, [r5, #4]
 800799a:	2a00      	cmp	r2, #0
 800799c:	dd09      	ble.n	80079b2 <_printf_float+0x1ba>
 800799e:	612a      	str	r2, [r5, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <_printf_float+0x1b2>
 80079a4:	6829      	ldr	r1, [r5, #0]
 80079a6:	07c9      	lsls	r1, r1, #31
 80079a8:	d50b      	bpl.n	80079c2 <_printf_float+0x1ca>
 80079aa:	3301      	adds	r3, #1
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	612b      	str	r3, [r5, #16]
 80079b0:	e007      	b.n	80079c2 <_printf_float+0x1ca>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <_printf_float+0x1c6>
 80079b6:	2201      	movs	r2, #1
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	4211      	tst	r1, r2
 80079bc:	d000      	beq.n	80079c0 <_printf_float+0x1c8>
 80079be:	1c9a      	adds	r2, r3, #2
 80079c0:	612a      	str	r2, [r5, #16]
 80079c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079c4:	2400      	movs	r4, #0
 80079c6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80079c8:	e7cd      	b.n	8007966 <_printf_float+0x16e>
 80079ca:	2367      	movs	r3, #103	@ 0x67
 80079cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80079ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80079d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079d2:	4299      	cmp	r1, r3
 80079d4:	db06      	blt.n	80079e4 <_printf_float+0x1ec>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	6129      	str	r1, [r5, #16]
 80079da:	07db      	lsls	r3, r3, #31
 80079dc:	d5f1      	bpl.n	80079c2 <_printf_float+0x1ca>
 80079de:	3101      	adds	r1, #1
 80079e0:	6129      	str	r1, [r5, #16]
 80079e2:	e7ee      	b.n	80079c2 <_printf_float+0x1ca>
 80079e4:	2201      	movs	r2, #1
 80079e6:	2900      	cmp	r1, #0
 80079e8:	dce0      	bgt.n	80079ac <_printf_float+0x1b4>
 80079ea:	1892      	adds	r2, r2, r2
 80079ec:	1a52      	subs	r2, r2, r1
 80079ee:	e7dd      	b.n	80079ac <_printf_float+0x1b4>
 80079f0:	682a      	ldr	r2, [r5, #0]
 80079f2:	0553      	lsls	r3, r2, #21
 80079f4:	d408      	bmi.n	8007a08 <_printf_float+0x210>
 80079f6:	692b      	ldr	r3, [r5, #16]
 80079f8:	003a      	movs	r2, r7
 80079fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a00:	47a0      	blx	r4
 8007a02:	3001      	adds	r0, #1
 8007a04:	d129      	bne.n	8007a5a <_printf_float+0x262>
 8007a06:	e753      	b.n	80078b0 <_printf_float+0xb8>
 8007a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a0a:	2b65      	cmp	r3, #101	@ 0x65
 8007a0c:	d800      	bhi.n	8007a10 <_printf_float+0x218>
 8007a0e:	e0da      	b.n	8007bc6 <_printf_float+0x3ce>
 8007a10:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007a12:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007a14:	2200      	movs	r2, #0
 8007a16:	2300      	movs	r3, #0
 8007a18:	f7f8 fd16 	bl	8000448 <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d033      	beq.n	8007a88 <_printf_float+0x290>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4a37      	ldr	r2, [pc, #220]	@ (8007b00 <_printf_float+0x308>)
 8007a24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a28:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a2a:	47a0      	blx	r4
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d100      	bne.n	8007a32 <_printf_float+0x23a>
 8007a30:	e73e      	b.n	80078b0 <_printf_float+0xb8>
 8007a32:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a36:	42b3      	cmp	r3, r6
 8007a38:	db02      	blt.n	8007a40 <_printf_float+0x248>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	07db      	lsls	r3, r3, #31
 8007a3e:	d50c      	bpl.n	8007a5a <_printf_float+0x262>
 8007a40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a4a:	47a0      	blx	r4
 8007a4c:	2400      	movs	r4, #0
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d100      	bne.n	8007a54 <_printf_float+0x25c>
 8007a52:	e72d      	b.n	80078b0 <_printf_float+0xb8>
 8007a54:	1e73      	subs	r3, r6, #1
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	dc0a      	bgt.n	8007a70 <_printf_float+0x278>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	079b      	lsls	r3, r3, #30
 8007a5e:	d500      	bpl.n	8007a62 <_printf_float+0x26a>
 8007a60:	e105      	b.n	8007c6e <_printf_float+0x476>
 8007a62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a64:	68e8      	ldr	r0, [r5, #12]
 8007a66:	4298      	cmp	r0, r3
 8007a68:	db00      	blt.n	8007a6c <_printf_float+0x274>
 8007a6a:	e723      	b.n	80078b4 <_printf_float+0xbc>
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	e721      	b.n	80078b4 <_printf_float+0xbc>
 8007a70:	002a      	movs	r2, r5
 8007a72:	2301      	movs	r3, #1
 8007a74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a78:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007a7a:	321a      	adds	r2, #26
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d100      	bne.n	8007a84 <_printf_float+0x28c>
 8007a82:	e715      	b.n	80078b0 <_printf_float+0xb8>
 8007a84:	3401      	adds	r4, #1
 8007a86:	e7e5      	b.n	8007a54 <_printf_float+0x25c>
 8007a88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dc3a      	bgt.n	8007b04 <_printf_float+0x30c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4a1b      	ldr	r2, [pc, #108]	@ (8007b00 <_printf_float+0x308>)
 8007a92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a98:	47a0      	blx	r4
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d100      	bne.n	8007aa0 <_printf_float+0x2a8>
 8007a9e:	e707      	b.n	80078b0 <_printf_float+0xb8>
 8007aa0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007aa2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007aa4:	4333      	orrs	r3, r6
 8007aa6:	d102      	bne.n	8007aae <_printf_float+0x2b6>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	07db      	lsls	r3, r3, #31
 8007aac:	d5d5      	bpl.n	8007a5a <_printf_float+0x262>
 8007aae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ab2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ab4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ab6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007ab8:	47a0      	blx	r4
 8007aba:	2300      	movs	r3, #0
 8007abc:	3001      	adds	r0, #1
 8007abe:	d100      	bne.n	8007ac2 <_printf_float+0x2ca>
 8007ac0:	e6f6      	b.n	80078b0 <_printf_float+0xb8>
 8007ac2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ac6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ac8:	425b      	negs	r3, r3
 8007aca:	4293      	cmp	r3, r2
 8007acc:	dc01      	bgt.n	8007ad2 <_printf_float+0x2da>
 8007ace:	0033      	movs	r3, r6
 8007ad0:	e792      	b.n	80079f8 <_printf_float+0x200>
 8007ad2:	002a      	movs	r2, r5
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ad8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ada:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007adc:	321a      	adds	r2, #26
 8007ade:	47a0      	blx	r4
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d100      	bne.n	8007ae6 <_printf_float+0x2ee>
 8007ae4:	e6e4      	b.n	80078b0 <_printf_float+0xb8>
 8007ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae8:	3301      	adds	r3, #1
 8007aea:	e7ea      	b.n	8007ac2 <_printf_float+0x2ca>
 8007aec:	7fefffff 	.word	0x7fefffff
 8007af0:	0800c1b8 	.word	0x0800c1b8
 8007af4:	0800c1bc 	.word	0x0800c1bc
 8007af8:	0800c1c0 	.word	0x0800c1c0
 8007afc:	0800c1c4 	.word	0x0800c1c4
 8007b00:	0800c1c8 	.word	0x0800c1c8
 8007b04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b06:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007b08:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b0a:	429e      	cmp	r6, r3
 8007b0c:	dd00      	ble.n	8007b10 <_printf_float+0x318>
 8007b0e:	001e      	movs	r6, r3
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	dc31      	bgt.n	8007b78 <_printf_float+0x380>
 8007b14:	43f3      	mvns	r3, r6
 8007b16:	2400      	movs	r4, #0
 8007b18:	17db      	asrs	r3, r3, #31
 8007b1a:	4033      	ands	r3, r6
 8007b1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b1e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b22:	1af3      	subs	r3, r6, r3
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	dc30      	bgt.n	8007b8a <_printf_float+0x392>
 8007b28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	dc38      	bgt.n	8007ba2 <_printf_float+0x3aa>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	07db      	lsls	r3, r3, #31
 8007b34:	d435      	bmi.n	8007ba2 <_printf_float+0x3aa>
 8007b36:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007b38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b3c:	1b9b      	subs	r3, r3, r6
 8007b3e:	1b14      	subs	r4, r2, r4
 8007b40:	429c      	cmp	r4, r3
 8007b42:	dd00      	ble.n	8007b46 <_printf_float+0x34e>
 8007b44:	001c      	movs	r4, r3
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	dc34      	bgt.n	8007bb4 <_printf_float+0x3bc>
 8007b4a:	43e3      	mvns	r3, r4
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	17db      	asrs	r3, r3, #31
 8007b50:	401c      	ands	r4, r3
 8007b52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	1b1b      	subs	r3, r3, r4
 8007b5a:	42b3      	cmp	r3, r6
 8007b5c:	dc00      	bgt.n	8007b60 <_printf_float+0x368>
 8007b5e:	e77c      	b.n	8007a5a <_printf_float+0x262>
 8007b60:	002a      	movs	r2, r5
 8007b62:	2301      	movs	r3, #1
 8007b64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b6a:	321a      	adds	r2, #26
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d100      	bne.n	8007b74 <_printf_float+0x37c>
 8007b72:	e69d      	b.n	80078b0 <_printf_float+0xb8>
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7ec      	b.n	8007b52 <_printf_float+0x35a>
 8007b78:	0033      	movs	r3, r6
 8007b7a:	003a      	movs	r2, r7
 8007b7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b82:	47a0      	blx	r4
 8007b84:	3001      	adds	r0, #1
 8007b86:	d1c5      	bne.n	8007b14 <_printf_float+0x31c>
 8007b88:	e692      	b.n	80078b0 <_printf_float+0xb8>
 8007b8a:	002a      	movs	r2, r5
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b92:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b94:	321a      	adds	r2, #26
 8007b96:	47b0      	blx	r6
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d100      	bne.n	8007b9e <_printf_float+0x3a6>
 8007b9c:	e688      	b.n	80078b0 <_printf_float+0xb8>
 8007b9e:	3401      	adds	r4, #1
 8007ba0:	e7bd      	b.n	8007b1e <_printf_float+0x326>
 8007ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ba6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ba8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007baa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007bac:	47a0      	blx	r4
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d1c1      	bne.n	8007b36 <_printf_float+0x33e>
 8007bb2:	e67d      	b.n	80078b0 <_printf_float+0xb8>
 8007bb4:	19ba      	adds	r2, r7, r6
 8007bb6:	0023      	movs	r3, r4
 8007bb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bbc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007bbe:	47b0      	blx	r6
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d1c2      	bne.n	8007b4a <_printf_float+0x352>
 8007bc4:	e674      	b.n	80078b0 <_printf_float+0xb8>
 8007bc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	dc02      	bgt.n	8007bd4 <_printf_float+0x3dc>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	421a      	tst	r2, r3
 8007bd2:	d039      	beq.n	8007c48 <_printf_float+0x450>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	003a      	movs	r2, r7
 8007bd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bdc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007bde:	47b0      	blx	r6
 8007be0:	3001      	adds	r0, #1
 8007be2:	d100      	bne.n	8007be6 <_printf_float+0x3ee>
 8007be4:	e664      	b.n	80078b0 <_printf_float+0xb8>
 8007be6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007bf0:	47b0      	blx	r6
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d100      	bne.n	8007bf8 <_printf_float+0x400>
 8007bf6:	e65b      	b.n	80078b0 <_printf_float+0xb8>
 8007bf8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007bfa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bfe:	2200      	movs	r2, #0
 8007c00:	3b01      	subs	r3, #1
 8007c02:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c04:	2300      	movs	r3, #0
 8007c06:	f7f8 fc1f 	bl	8000448 <__aeabi_dcmpeq>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d11a      	bne.n	8007c44 <_printf_float+0x44c>
 8007c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c10:	1c7a      	adds	r2, r7, #1
 8007c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c18:	47b0      	blx	r6
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d10e      	bne.n	8007c3c <_printf_float+0x444>
 8007c1e:	e647      	b.n	80078b0 <_printf_float+0xb8>
 8007c20:	002a      	movs	r2, r5
 8007c22:	2301      	movs	r3, #1
 8007c24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c28:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007c2a:	321a      	adds	r2, #26
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d100      	bne.n	8007c34 <_printf_float+0x43c>
 8007c32:	e63d      	b.n	80078b0 <_printf_float+0xb8>
 8007c34:	3601      	adds	r6, #1
 8007c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	dbf1      	blt.n	8007c20 <_printf_float+0x428>
 8007c3c:	002a      	movs	r2, r5
 8007c3e:	0023      	movs	r3, r4
 8007c40:	3250      	adds	r2, #80	@ 0x50
 8007c42:	e6da      	b.n	80079fa <_printf_float+0x202>
 8007c44:	2600      	movs	r6, #0
 8007c46:	e7f6      	b.n	8007c36 <_printf_float+0x43e>
 8007c48:	003a      	movs	r2, r7
 8007c4a:	e7e2      	b.n	8007c12 <_printf_float+0x41a>
 8007c4c:	002a      	movs	r2, r5
 8007c4e:	2301      	movs	r3, #1
 8007c50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007c56:	3219      	adds	r2, #25
 8007c58:	47b0      	blx	r6
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d100      	bne.n	8007c60 <_printf_float+0x468>
 8007c5e:	e627      	b.n	80078b0 <_printf_float+0xb8>
 8007c60:	3401      	adds	r4, #1
 8007c62:	68eb      	ldr	r3, [r5, #12]
 8007c64:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	dcef      	bgt.n	8007c4c <_printf_float+0x454>
 8007c6c:	e6f9      	b.n	8007a62 <_printf_float+0x26a>
 8007c6e:	2400      	movs	r4, #0
 8007c70:	e7f7      	b.n	8007c62 <_printf_float+0x46a>
 8007c72:	46c0      	nop			@ (mov r8, r8)

08007c74 <_printf_common>:
 8007c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c76:	0016      	movs	r6, r2
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	688a      	ldr	r2, [r1, #8]
 8007c7c:	690b      	ldr	r3, [r1, #16]
 8007c7e:	000c      	movs	r4, r1
 8007c80:	9000      	str	r0, [sp, #0]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	da00      	bge.n	8007c88 <_printf_common+0x14>
 8007c86:	0013      	movs	r3, r2
 8007c88:	0022      	movs	r2, r4
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	3243      	adds	r2, #67	@ 0x43
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d001      	beq.n	8007c98 <_printf_common+0x24>
 8007c94:	3301      	adds	r3, #1
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	069b      	lsls	r3, r3, #26
 8007c9c:	d502      	bpl.n	8007ca4 <_printf_common+0x30>
 8007c9e:	6833      	ldr	r3, [r6, #0]
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	6822      	ldr	r2, [r4, #0]
 8007ca6:	2306      	movs	r3, #6
 8007ca8:	0015      	movs	r5, r2
 8007caa:	401d      	ands	r5, r3
 8007cac:	421a      	tst	r2, r3
 8007cae:	d027      	beq.n	8007d00 <_printf_common+0x8c>
 8007cb0:	0023      	movs	r3, r4
 8007cb2:	3343      	adds	r3, #67	@ 0x43
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	4193      	sbcs	r3, r2
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	0692      	lsls	r2, r2, #26
 8007cbe:	d430      	bmi.n	8007d22 <_printf_common+0xae>
 8007cc0:	0022      	movs	r2, r4
 8007cc2:	9901      	ldr	r1, [sp, #4]
 8007cc4:	9800      	ldr	r0, [sp, #0]
 8007cc6:	9d08      	ldr	r5, [sp, #32]
 8007cc8:	3243      	adds	r2, #67	@ 0x43
 8007cca:	47a8      	blx	r5
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d025      	beq.n	8007d1c <_printf_common+0xa8>
 8007cd0:	2206      	movs	r2, #6
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d105      	bne.n	8007ce8 <_printf_common+0x74>
 8007cdc:	6833      	ldr	r3, [r6, #0]
 8007cde:	68e5      	ldr	r5, [r4, #12]
 8007ce0:	1aed      	subs	r5, r5, r3
 8007ce2:	43eb      	mvns	r3, r5
 8007ce4:	17db      	asrs	r3, r3, #31
 8007ce6:	401d      	ands	r5, r3
 8007ce8:	68a3      	ldr	r3, [r4, #8]
 8007cea:	6922      	ldr	r2, [r4, #16]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	dd01      	ble.n	8007cf4 <_printf_common+0x80>
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	18ed      	adds	r5, r5, r3
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	42b5      	cmp	r5, r6
 8007cf8:	d120      	bne.n	8007d3c <_printf_common+0xc8>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e010      	b.n	8007d20 <_printf_common+0xac>
 8007cfe:	3501      	adds	r5, #1
 8007d00:	68e3      	ldr	r3, [r4, #12]
 8007d02:	6832      	ldr	r2, [r6, #0]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	42ab      	cmp	r3, r5
 8007d08:	ddd2      	ble.n	8007cb0 <_printf_common+0x3c>
 8007d0a:	0022      	movs	r2, r4
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	9901      	ldr	r1, [sp, #4]
 8007d10:	9800      	ldr	r0, [sp, #0]
 8007d12:	9f08      	ldr	r7, [sp, #32]
 8007d14:	3219      	adds	r2, #25
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1f0      	bne.n	8007cfe <_printf_common+0x8a>
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	4240      	negs	r0, r0
 8007d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d22:	2030      	movs	r0, #48	@ 0x30
 8007d24:	18e1      	adds	r1, r4, r3
 8007d26:	3143      	adds	r1, #67	@ 0x43
 8007d28:	7008      	strb	r0, [r1, #0]
 8007d2a:	0021      	movs	r1, r4
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	3145      	adds	r1, #69	@ 0x45
 8007d30:	7809      	ldrb	r1, [r1, #0]
 8007d32:	18a2      	adds	r2, r4, r2
 8007d34:	3243      	adds	r2, #67	@ 0x43
 8007d36:	3302      	adds	r3, #2
 8007d38:	7011      	strb	r1, [r2, #0]
 8007d3a:	e7c1      	b.n	8007cc0 <_printf_common+0x4c>
 8007d3c:	0022      	movs	r2, r4
 8007d3e:	2301      	movs	r3, #1
 8007d40:	9901      	ldr	r1, [sp, #4]
 8007d42:	9800      	ldr	r0, [sp, #0]
 8007d44:	9f08      	ldr	r7, [sp, #32]
 8007d46:	321a      	adds	r2, #26
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0e6      	beq.n	8007d1c <_printf_common+0xa8>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7d1      	b.n	8007cf6 <_printf_common+0x82>
	...

08007d54 <_printf_i>:
 8007d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d56:	b08b      	sub	sp, #44	@ 0x2c
 8007d58:	9206      	str	r2, [sp, #24]
 8007d5a:	000a      	movs	r2, r1
 8007d5c:	3243      	adds	r2, #67	@ 0x43
 8007d5e:	9307      	str	r3, [sp, #28]
 8007d60:	9005      	str	r0, [sp, #20]
 8007d62:	9203      	str	r2, [sp, #12]
 8007d64:	7e0a      	ldrb	r2, [r1, #24]
 8007d66:	000c      	movs	r4, r1
 8007d68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d6a:	2a78      	cmp	r2, #120	@ 0x78
 8007d6c:	d809      	bhi.n	8007d82 <_printf_i+0x2e>
 8007d6e:	2a62      	cmp	r2, #98	@ 0x62
 8007d70:	d80b      	bhi.n	8007d8a <_printf_i+0x36>
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d100      	bne.n	8007d78 <_printf_i+0x24>
 8007d76:	e0bc      	b.n	8007ef2 <_printf_i+0x19e>
 8007d78:	497b      	ldr	r1, [pc, #492]	@ (8007f68 <_printf_i+0x214>)
 8007d7a:	9104      	str	r1, [sp, #16]
 8007d7c:	2a58      	cmp	r2, #88	@ 0x58
 8007d7e:	d100      	bne.n	8007d82 <_printf_i+0x2e>
 8007d80:	e090      	b.n	8007ea4 <_printf_i+0x150>
 8007d82:	0025      	movs	r5, r4
 8007d84:	3542      	adds	r5, #66	@ 0x42
 8007d86:	702a      	strb	r2, [r5, #0]
 8007d88:	e022      	b.n	8007dd0 <_printf_i+0x7c>
 8007d8a:	0010      	movs	r0, r2
 8007d8c:	3863      	subs	r0, #99	@ 0x63
 8007d8e:	2815      	cmp	r0, #21
 8007d90:	d8f7      	bhi.n	8007d82 <_printf_i+0x2e>
 8007d92:	f7f8 f9c9 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d96:	0016      	.short	0x0016
 8007d98:	fff6001f 	.word	0xfff6001f
 8007d9c:	fff6fff6 	.word	0xfff6fff6
 8007da0:	001ffff6 	.word	0x001ffff6
 8007da4:	fff6fff6 	.word	0xfff6fff6
 8007da8:	fff6fff6 	.word	0xfff6fff6
 8007dac:	003600a1 	.word	0x003600a1
 8007db0:	fff60080 	.word	0xfff60080
 8007db4:	00b2fff6 	.word	0x00b2fff6
 8007db8:	0036fff6 	.word	0x0036fff6
 8007dbc:	fff6fff6 	.word	0xfff6fff6
 8007dc0:	0084      	.short	0x0084
 8007dc2:	0025      	movs	r5, r4
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	3542      	adds	r5, #66	@ 0x42
 8007dc8:	1d11      	adds	r1, r2, #4
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	6813      	ldr	r3, [r2, #0]
 8007dce:	702b      	strb	r3, [r5, #0]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e0a0      	b.n	8007f16 <_printf_i+0x1c2>
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	6809      	ldr	r1, [r1, #0]
 8007dd8:	1d02      	adds	r2, r0, #4
 8007dda:	060d      	lsls	r5, r1, #24
 8007ddc:	d50b      	bpl.n	8007df6 <_printf_i+0xa2>
 8007dde:	6806      	ldr	r6, [r0, #0]
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	da03      	bge.n	8007dee <_printf_i+0x9a>
 8007de6:	232d      	movs	r3, #45	@ 0x2d
 8007de8:	9a03      	ldr	r2, [sp, #12]
 8007dea:	4276      	negs	r6, r6
 8007dec:	7013      	strb	r3, [r2, #0]
 8007dee:	4b5e      	ldr	r3, [pc, #376]	@ (8007f68 <_printf_i+0x214>)
 8007df0:	270a      	movs	r7, #10
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	e018      	b.n	8007e28 <_printf_i+0xd4>
 8007df6:	6806      	ldr	r6, [r0, #0]
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	0649      	lsls	r1, r1, #25
 8007dfc:	d5f1      	bpl.n	8007de2 <_printf_i+0x8e>
 8007dfe:	b236      	sxth	r6, r6
 8007e00:	e7ef      	b.n	8007de2 <_printf_i+0x8e>
 8007e02:	6808      	ldr	r0, [r1, #0]
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	c940      	ldmia	r1!, {r6}
 8007e08:	0605      	lsls	r5, r0, #24
 8007e0a:	d402      	bmi.n	8007e12 <_printf_i+0xbe>
 8007e0c:	0640      	lsls	r0, r0, #25
 8007e0e:	d500      	bpl.n	8007e12 <_printf_i+0xbe>
 8007e10:	b2b6      	uxth	r6, r6
 8007e12:	6019      	str	r1, [r3, #0]
 8007e14:	4b54      	ldr	r3, [pc, #336]	@ (8007f68 <_printf_i+0x214>)
 8007e16:	270a      	movs	r7, #10
 8007e18:	9304      	str	r3, [sp, #16]
 8007e1a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007e1c:	d100      	bne.n	8007e20 <_printf_i+0xcc>
 8007e1e:	3f02      	subs	r7, #2
 8007e20:	0023      	movs	r3, r4
 8007e22:	2200      	movs	r2, #0
 8007e24:	3343      	adds	r3, #67	@ 0x43
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db03      	blt.n	8007e38 <_printf_i+0xe4>
 8007e30:	2104      	movs	r1, #4
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	438a      	bics	r2, r1
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	d102      	bne.n	8007e42 <_printf_i+0xee>
 8007e3c:	9d03      	ldr	r5, [sp, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <_printf_i+0x108>
 8007e42:	9d03      	ldr	r5, [sp, #12]
 8007e44:	0030      	movs	r0, r6
 8007e46:	0039      	movs	r1, r7
 8007e48:	f7f8 f9fe 	bl	8000248 <__aeabi_uidivmod>
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	3d01      	subs	r5, #1
 8007e50:	5c5b      	ldrb	r3, [r3, r1]
 8007e52:	702b      	strb	r3, [r5, #0]
 8007e54:	0033      	movs	r3, r6
 8007e56:	0006      	movs	r6, r0
 8007e58:	429f      	cmp	r7, r3
 8007e5a:	d9f3      	bls.n	8007e44 <_printf_i+0xf0>
 8007e5c:	2f08      	cmp	r7, #8
 8007e5e:	d109      	bne.n	8007e74 <_printf_i+0x120>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	07db      	lsls	r3, r3, #31
 8007e64:	d506      	bpl.n	8007e74 <_printf_i+0x120>
 8007e66:	6862      	ldr	r2, [r4, #4]
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	dc02      	bgt.n	8007e74 <_printf_i+0x120>
 8007e6e:	2330      	movs	r3, #48	@ 0x30
 8007e70:	3d01      	subs	r5, #1
 8007e72:	702b      	strb	r3, [r5, #0]
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	1b5b      	subs	r3, r3, r5
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	9b07      	ldr	r3, [sp, #28]
 8007e7c:	0021      	movs	r1, r4
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	9805      	ldr	r0, [sp, #20]
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	aa09      	add	r2, sp, #36	@ 0x24
 8007e86:	f7ff fef5 	bl	8007c74 <_printf_common>
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d148      	bne.n	8007f20 <_printf_i+0x1cc>
 8007e8e:	2001      	movs	r0, #1
 8007e90:	4240      	negs	r0, r0
 8007e92:	b00b      	add	sp, #44	@ 0x2c
 8007e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e96:	2220      	movs	r2, #32
 8007e98:	6809      	ldr	r1, [r1, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	6022      	str	r2, [r4, #0]
 8007e9e:	2278      	movs	r2, #120	@ 0x78
 8007ea0:	4932      	ldr	r1, [pc, #200]	@ (8007f6c <_printf_i+0x218>)
 8007ea2:	9104      	str	r1, [sp, #16]
 8007ea4:	0021      	movs	r1, r4
 8007ea6:	3145      	adds	r1, #69	@ 0x45
 8007ea8:	700a      	strb	r2, [r1, #0]
 8007eaa:	6819      	ldr	r1, [r3, #0]
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	c940      	ldmia	r1!, {r6}
 8007eb0:	0610      	lsls	r0, r2, #24
 8007eb2:	d402      	bmi.n	8007eba <_printf_i+0x166>
 8007eb4:	0650      	lsls	r0, r2, #25
 8007eb6:	d500      	bpl.n	8007eba <_printf_i+0x166>
 8007eb8:	b2b6      	uxth	r6, r6
 8007eba:	6019      	str	r1, [r3, #0]
 8007ebc:	07d3      	lsls	r3, r2, #31
 8007ebe:	d502      	bpl.n	8007ec6 <_printf_i+0x172>
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d001      	beq.n	8007ece <_printf_i+0x17a>
 8007eca:	2710      	movs	r7, #16
 8007ecc:	e7a8      	b.n	8007e20 <_printf_i+0xcc>
 8007ece:	2220      	movs	r2, #32
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	4393      	bics	r3, r2
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	e7f8      	b.n	8007eca <_printf_i+0x176>
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	680d      	ldr	r5, [r1, #0]
 8007edc:	1d10      	adds	r0, r2, #4
 8007ede:	6949      	ldr	r1, [r1, #20]
 8007ee0:	6018      	str	r0, [r3, #0]
 8007ee2:	6813      	ldr	r3, [r2, #0]
 8007ee4:	062e      	lsls	r6, r5, #24
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0x198>
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0x19e>
 8007eec:	066d      	lsls	r5, r5, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0x194>
 8007ef0:	8019      	strh	r1, [r3, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9d03      	ldr	r5, [sp, #12]
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	e7bf      	b.n	8007e7a <_printf_i+0x126>
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	1d11      	adds	r1, r2, #4
 8007efe:	6019      	str	r1, [r3, #0]
 8007f00:	6815      	ldr	r5, [r2, #0]
 8007f02:	2100      	movs	r1, #0
 8007f04:	0028      	movs	r0, r5
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	f001 fa6f 	bl	80093ea <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d001      	beq.n	8007f14 <_printf_i+0x1c0>
 8007f10:	1b40      	subs	r0, r0, r5
 8007f12:	6060      	str	r0, [r4, #4]
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9a03      	ldr	r2, [sp, #12]
 8007f1c:	7013      	strb	r3, [r2, #0]
 8007f1e:	e7ac      	b.n	8007e7a <_printf_i+0x126>
 8007f20:	002a      	movs	r2, r5
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	9906      	ldr	r1, [sp, #24]
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	9d07      	ldr	r5, [sp, #28]
 8007f2a:	47a8      	blx	r5
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d0ae      	beq.n	8007e8e <_printf_i+0x13a>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	d415      	bmi.n	8007f62 <_printf_i+0x20e>
 8007f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f38:	68e0      	ldr	r0, [r4, #12]
 8007f3a:	4298      	cmp	r0, r3
 8007f3c:	daa9      	bge.n	8007e92 <_printf_i+0x13e>
 8007f3e:	0018      	movs	r0, r3
 8007f40:	e7a7      	b.n	8007e92 <_printf_i+0x13e>
 8007f42:	0022      	movs	r2, r4
 8007f44:	2301      	movs	r3, #1
 8007f46:	9906      	ldr	r1, [sp, #24]
 8007f48:	9805      	ldr	r0, [sp, #20]
 8007f4a:	9e07      	ldr	r6, [sp, #28]
 8007f4c:	3219      	adds	r2, #25
 8007f4e:	47b0      	blx	r6
 8007f50:	3001      	adds	r0, #1
 8007f52:	d09c      	beq.n	8007e8e <_printf_i+0x13a>
 8007f54:	3501      	adds	r5, #1
 8007f56:	68e3      	ldr	r3, [r4, #12]
 8007f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	dcf0      	bgt.n	8007f42 <_printf_i+0x1ee>
 8007f60:	e7e9      	b.n	8007f36 <_printf_i+0x1e2>
 8007f62:	2500      	movs	r5, #0
 8007f64:	e7f7      	b.n	8007f56 <_printf_i+0x202>
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	0800c1ca 	.word	0x0800c1ca
 8007f6c:	0800c1db 	.word	0x0800c1db

08007f70 <_scanf_float>:
 8007f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f72:	b08b      	sub	sp, #44	@ 0x2c
 8007f74:	0016      	movs	r6, r2
 8007f76:	9003      	str	r0, [sp, #12]
 8007f78:	22ae      	movs	r2, #174	@ 0xae
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	9307      	str	r3, [sp, #28]
 8007f7e:	688b      	ldr	r3, [r1, #8]
 8007f80:	000c      	movs	r4, r1
 8007f82:	1e59      	subs	r1, r3, #1
 8007f84:	0052      	lsls	r2, r2, #1
 8007f86:	9006      	str	r0, [sp, #24]
 8007f88:	4291      	cmp	r1, r2
 8007f8a:	d905      	bls.n	8007f98 <_scanf_float+0x28>
 8007f8c:	3b5e      	subs	r3, #94	@ 0x5e
 8007f8e:	3bff      	subs	r3, #255	@ 0xff
 8007f90:	9306      	str	r3, [sp, #24]
 8007f92:	235e      	movs	r3, #94	@ 0x5e
 8007f94:	33ff      	adds	r3, #255	@ 0xff
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	23f0      	movs	r3, #240	@ 0xf0
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	0023      	movs	r3, r4
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	331c      	adds	r3, #28
 8007fa8:	001f      	movs	r7, r3
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	9502      	str	r5, [sp, #8]
 8007fae:	9509      	str	r5, [sp, #36]	@ 0x24
 8007fb0:	9508      	str	r5, [sp, #32]
 8007fb2:	9501      	str	r5, [sp, #4]
 8007fb4:	9505      	str	r5, [sp, #20]
 8007fb6:	68a2      	ldr	r2, [r4, #8]
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	d00a      	beq.n	8007fd2 <_scanf_float+0x62>
 8007fbc:	6833      	ldr	r3, [r6, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b4e      	cmp	r3, #78	@ 0x4e
 8007fc2:	d844      	bhi.n	800804e <_scanf_float+0xde>
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	2b40      	cmp	r3, #64	@ 0x40
 8007fc8:	d82c      	bhi.n	8008024 <_scanf_float+0xb4>
 8007fca:	382b      	subs	r0, #43	@ 0x2b
 8007fcc:	b2c1      	uxtb	r1, r0
 8007fce:	290e      	cmp	r1, #14
 8007fd0:	d92a      	bls.n	8008028 <_scanf_float+0xb8>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <_scanf_float+0x70>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	4aa6      	ldr	r2, [pc, #664]	@ (8008274 <_scanf_float+0x304>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d900      	bls.n	8007fea <_scanf_float+0x7a>
 8007fe8:	e0fe      	b.n	80081e8 <_scanf_float+0x278>
 8007fea:	25be      	movs	r5, #190	@ 0xbe
 8007fec:	006d      	lsls	r5, r5, #1
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	429f      	cmp	r7, r3
 8007ff2:	d900      	bls.n	8007ff6 <_scanf_float+0x86>
 8007ff4:	e0ee      	b.n	80081d4 <_scanf_float+0x264>
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	b00b      	add	sp, #44	@ 0x2c
 8007ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	3861      	subs	r0, #97	@ 0x61
 8008000:	280d      	cmp	r0, #13
 8008002:	d8e6      	bhi.n	8007fd2 <_scanf_float+0x62>
 8008004:	f7f8 f890 	bl	8000128 <__gnu_thumb1_case_shi>
 8008008:	ffe50089 	.word	0xffe50089
 800800c:	ffe5ffe5 	.word	0xffe5ffe5
 8008010:	00a700bb 	.word	0x00a700bb
 8008014:	ffe5ffe5 	.word	0xffe5ffe5
 8008018:	ffe5008f 	.word	0xffe5008f
 800801c:	ffe5ffe5 	.word	0xffe5ffe5
 8008020:	006bffe5 	.word	0x006bffe5
 8008024:	3841      	subs	r0, #65	@ 0x41
 8008026:	e7eb      	b.n	8008000 <_scanf_float+0x90>
 8008028:	280e      	cmp	r0, #14
 800802a:	d8d2      	bhi.n	8007fd2 <_scanf_float+0x62>
 800802c:	f7f8 f87c 	bl	8000128 <__gnu_thumb1_case_shi>
 8008030:	ffd1004f 	.word	0xffd1004f
 8008034:	009d004f 	.word	0x009d004f
 8008038:	0021ffd1 	.word	0x0021ffd1
 800803c:	00410041 	.word	0x00410041
 8008040:	00410041 	.word	0x00410041
 8008044:	00410041 	.word	0x00410041
 8008048:	00410041 	.word	0x00410041
 800804c:	0041      	.short	0x0041
 800804e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008050:	d80a      	bhi.n	8008068 <_scanf_float+0xf8>
 8008052:	2b60      	cmp	r3, #96	@ 0x60
 8008054:	d8d2      	bhi.n	8007ffc <_scanf_float+0x8c>
 8008056:	2b54      	cmp	r3, #84	@ 0x54
 8008058:	d100      	bne.n	800805c <_scanf_float+0xec>
 800805a:	e081      	b.n	8008160 <_scanf_float+0x1f0>
 800805c:	2b59      	cmp	r3, #89	@ 0x59
 800805e:	d1b8      	bne.n	8007fd2 <_scanf_float+0x62>
 8008060:	2d07      	cmp	r5, #7
 8008062:	d1b6      	bne.n	8007fd2 <_scanf_float+0x62>
 8008064:	2508      	movs	r5, #8
 8008066:	e02f      	b.n	80080c8 <_scanf_float+0x158>
 8008068:	2b74      	cmp	r3, #116	@ 0x74
 800806a:	d079      	beq.n	8008160 <_scanf_float+0x1f0>
 800806c:	2b79      	cmp	r3, #121	@ 0x79
 800806e:	d0f7      	beq.n	8008060 <_scanf_float+0xf0>
 8008070:	e7af      	b.n	8007fd2 <_scanf_float+0x62>
 8008072:	6821      	ldr	r1, [r4, #0]
 8008074:	05c8      	lsls	r0, r1, #23
 8008076:	d51c      	bpl.n	80080b2 <_scanf_float+0x142>
 8008078:	2380      	movs	r3, #128	@ 0x80
 800807a:	4399      	bics	r1, r3
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	6021      	str	r1, [r4, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <_scanf_float+0x122>
 800808a:	3b01      	subs	r3, #1
 800808c:	3201      	adds	r2, #1
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	60a2      	str	r2, [r4, #8]
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	3b01      	subs	r3, #1
 8008096:	60a3      	str	r3, [r4, #8]
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	3301      	adds	r3, #1
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	6873      	ldr	r3, [r6, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	6073      	str	r3, [r6, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc00      	bgt.n	80080aa <_scanf_float+0x13a>
 80080a8:	e08a      	b.n	80081c0 <_scanf_float+0x250>
 80080aa:	6833      	ldr	r3, [r6, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	6033      	str	r3, [r6, #0]
 80080b0:	e781      	b.n	8007fb6 <_scanf_float+0x46>
 80080b2:	9a02      	ldr	r2, [sp, #8]
 80080b4:	1951      	adds	r1, r2, r5
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d000      	beq.n	80080bc <_scanf_float+0x14c>
 80080ba:	e78a      	b.n	8007fd2 <_scanf_float+0x62>
 80080bc:	000d      	movs	r5, r1
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	486d      	ldr	r0, [pc, #436]	@ (8008278 <_scanf_float+0x308>)
 80080c2:	9102      	str	r1, [sp, #8]
 80080c4:	4002      	ands	r2, r0
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	703b      	strb	r3, [r7, #0]
 80080ca:	3701      	adds	r7, #1
 80080cc:	e7e1      	b.n	8008092 <_scanf_float+0x122>
 80080ce:	2180      	movs	r1, #128	@ 0x80
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	420a      	tst	r2, r1
 80080d4:	d100      	bne.n	80080d8 <_scanf_float+0x168>
 80080d6:	e77c      	b.n	8007fd2 <_scanf_float+0x62>
 80080d8:	438a      	bics	r2, r1
 80080da:	6022      	str	r2, [r4, #0]
 80080dc:	e7f4      	b.n	80080c8 <_scanf_float+0x158>
 80080de:	9a02      	ldr	r2, [sp, #8]
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d10f      	bne.n	8008104 <_scanf_float+0x194>
 80080e4:	9a01      	ldr	r2, [sp, #4]
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	d10f      	bne.n	800810a <_scanf_float+0x19a>
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	21e0      	movs	r1, #224	@ 0xe0
 80080ee:	0010      	movs	r0, r2
 80080f0:	00c9      	lsls	r1, r1, #3
 80080f2:	4008      	ands	r0, r1
 80080f4:	4288      	cmp	r0, r1
 80080f6:	d108      	bne.n	800810a <_scanf_float+0x19a>
 80080f8:	4960      	ldr	r1, [pc, #384]	@ (800827c <_scanf_float+0x30c>)
 80080fa:	400a      	ands	r2, r1
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	2201      	movs	r2, #1
 8008100:	9202      	str	r2, [sp, #8]
 8008102:	e7e1      	b.n	80080c8 <_scanf_float+0x158>
 8008104:	9a02      	ldr	r2, [sp, #8]
 8008106:	2a02      	cmp	r2, #2
 8008108:	d058      	beq.n	80081bc <_scanf_float+0x24c>
 800810a:	2d01      	cmp	r5, #1
 800810c:	d002      	beq.n	8008114 <_scanf_float+0x1a4>
 800810e:	2d04      	cmp	r5, #4
 8008110:	d000      	beq.n	8008114 <_scanf_float+0x1a4>
 8008112:	e75e      	b.n	8007fd2 <_scanf_float+0x62>
 8008114:	3501      	adds	r5, #1
 8008116:	b2ed      	uxtb	r5, r5
 8008118:	e7d6      	b.n	80080c8 <_scanf_float+0x158>
 800811a:	9a02      	ldr	r2, [sp, #8]
 800811c:	2a01      	cmp	r2, #1
 800811e:	d000      	beq.n	8008122 <_scanf_float+0x1b2>
 8008120:	e757      	b.n	8007fd2 <_scanf_float+0x62>
 8008122:	2202      	movs	r2, #2
 8008124:	e7ec      	b.n	8008100 <_scanf_float+0x190>
 8008126:	2d00      	cmp	r5, #0
 8008128:	d110      	bne.n	800814c <_scanf_float+0x1dc>
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	2a00      	cmp	r2, #0
 800812e:	d000      	beq.n	8008132 <_scanf_float+0x1c2>
 8008130:	e752      	b.n	8007fd8 <_scanf_float+0x68>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	21e0      	movs	r1, #224	@ 0xe0
 8008136:	0010      	movs	r0, r2
 8008138:	00c9      	lsls	r1, r1, #3
 800813a:	4008      	ands	r0, r1
 800813c:	4288      	cmp	r0, r1
 800813e:	d000      	beq.n	8008142 <_scanf_float+0x1d2>
 8008140:	e11d      	b.n	800837e <_scanf_float+0x40e>
 8008142:	494e      	ldr	r1, [pc, #312]	@ (800827c <_scanf_float+0x30c>)
 8008144:	3501      	adds	r5, #1
 8008146:	400a      	ands	r2, r1
 8008148:	6022      	str	r2, [r4, #0]
 800814a:	e7bd      	b.n	80080c8 <_scanf_float+0x158>
 800814c:	21fd      	movs	r1, #253	@ 0xfd
 800814e:	1eea      	subs	r2, r5, #3
 8008150:	420a      	tst	r2, r1
 8008152:	d0df      	beq.n	8008114 <_scanf_float+0x1a4>
 8008154:	e73d      	b.n	8007fd2 <_scanf_float+0x62>
 8008156:	2d02      	cmp	r5, #2
 8008158:	d000      	beq.n	800815c <_scanf_float+0x1ec>
 800815a:	e73a      	b.n	8007fd2 <_scanf_float+0x62>
 800815c:	2503      	movs	r5, #3
 800815e:	e7b3      	b.n	80080c8 <_scanf_float+0x158>
 8008160:	2d06      	cmp	r5, #6
 8008162:	d000      	beq.n	8008166 <_scanf_float+0x1f6>
 8008164:	e735      	b.n	8007fd2 <_scanf_float+0x62>
 8008166:	2507      	movs	r5, #7
 8008168:	e7ae      	b.n	80080c8 <_scanf_float+0x158>
 800816a:	6822      	ldr	r2, [r4, #0]
 800816c:	0591      	lsls	r1, r2, #22
 800816e:	d400      	bmi.n	8008172 <_scanf_float+0x202>
 8008170:	e72f      	b.n	8007fd2 <_scanf_float+0x62>
 8008172:	4943      	ldr	r1, [pc, #268]	@ (8008280 <_scanf_float+0x310>)
 8008174:	400a      	ands	r2, r1
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	9a01      	ldr	r2, [sp, #4]
 800817a:	9205      	str	r2, [sp, #20]
 800817c:	e7a4      	b.n	80080c8 <_scanf_float+0x158>
 800817e:	21a0      	movs	r1, #160	@ 0xa0
 8008180:	2080      	movs	r0, #128	@ 0x80
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	00c9      	lsls	r1, r1, #3
 8008186:	4011      	ands	r1, r2
 8008188:	00c0      	lsls	r0, r0, #3
 800818a:	4281      	cmp	r1, r0
 800818c:	d006      	beq.n	800819c <_scanf_float+0x22c>
 800818e:	4202      	tst	r2, r0
 8008190:	d100      	bne.n	8008194 <_scanf_float+0x224>
 8008192:	e71e      	b.n	8007fd2 <_scanf_float+0x62>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	2900      	cmp	r1, #0
 8008198:	d100      	bne.n	800819c <_scanf_float+0x22c>
 800819a:	e0f0      	b.n	800837e <_scanf_float+0x40e>
 800819c:	0591      	lsls	r1, r2, #22
 800819e:	d404      	bmi.n	80081aa <_scanf_float+0x23a>
 80081a0:	9901      	ldr	r1, [sp, #4]
 80081a2:	9805      	ldr	r0, [sp, #20]
 80081a4:	9709      	str	r7, [sp, #36]	@ 0x24
 80081a6:	1a09      	subs	r1, r1, r0
 80081a8:	9108      	str	r1, [sp, #32]
 80081aa:	4934      	ldr	r1, [pc, #208]	@ (800827c <_scanf_float+0x30c>)
 80081ac:	400a      	ands	r2, r1
 80081ae:	21c0      	movs	r1, #192	@ 0xc0
 80081b0:	0049      	lsls	r1, r1, #1
 80081b2:	430a      	orrs	r2, r1
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	e785      	b.n	80080c8 <_scanf_float+0x158>
 80081bc:	2203      	movs	r2, #3
 80081be:	e79f      	b.n	8008100 <_scanf_float+0x190>
 80081c0:	23c0      	movs	r3, #192	@ 0xc0
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	0031      	movs	r1, r6
 80081c6:	58e3      	ldr	r3, [r4, r3]
 80081c8:	9803      	ldr	r0, [sp, #12]
 80081ca:	4798      	blx	r3
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d100      	bne.n	80081d2 <_scanf_float+0x262>
 80081d0:	e6f1      	b.n	8007fb6 <_scanf_float+0x46>
 80081d2:	e6fe      	b.n	8007fd2 <_scanf_float+0x62>
 80081d4:	3f01      	subs	r7, #1
 80081d6:	5963      	ldr	r3, [r4, r5]
 80081d8:	0032      	movs	r2, r6
 80081da:	7839      	ldrb	r1, [r7, #0]
 80081dc:	9803      	ldr	r0, [sp, #12]
 80081de:	4798      	blx	r3
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	6123      	str	r3, [r4, #16]
 80081e6:	e702      	b.n	8007fee <_scanf_float+0x7e>
 80081e8:	1e6b      	subs	r3, r5, #1
 80081ea:	2b06      	cmp	r3, #6
 80081ec:	d80e      	bhi.n	800820c <_scanf_float+0x29c>
 80081ee:	9702      	str	r7, [sp, #8]
 80081f0:	2d02      	cmp	r5, #2
 80081f2:	d920      	bls.n	8008236 <_scanf_float+0x2c6>
 80081f4:	1beb      	subs	r3, r5, r7
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	9306      	str	r3, [sp, #24]
 80081fa:	9b02      	ldr	r3, [sp, #8]
 80081fc:	9a06      	ldr	r2, [sp, #24]
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b03      	cmp	r3, #3
 8008204:	d127      	bne.n	8008256 <_scanf_float+0x2e6>
 8008206:	3d03      	subs	r5, #3
 8008208:	b2ed      	uxtb	r5, r5
 800820a:	1b7f      	subs	r7, r7, r5
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	05da      	lsls	r2, r3, #23
 8008210:	d553      	bpl.n	80082ba <_scanf_float+0x34a>
 8008212:	055b      	lsls	r3, r3, #21
 8008214:	d536      	bpl.n	8008284 <_scanf_float+0x314>
 8008216:	25be      	movs	r5, #190	@ 0xbe
 8008218:	006d      	lsls	r5, r5, #1
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	429f      	cmp	r7, r3
 800821e:	d800      	bhi.n	8008222 <_scanf_float+0x2b2>
 8008220:	e6e9      	b.n	8007ff6 <_scanf_float+0x86>
 8008222:	3f01      	subs	r7, #1
 8008224:	5963      	ldr	r3, [r4, r5]
 8008226:	0032      	movs	r2, r6
 8008228:	7839      	ldrb	r1, [r7, #0]
 800822a:	9803      	ldr	r0, [sp, #12]
 800822c:	4798      	blx	r3
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	3b01      	subs	r3, #1
 8008232:	6123      	str	r3, [r4, #16]
 8008234:	e7f1      	b.n	800821a <_scanf_float+0x2aa>
 8008236:	25be      	movs	r5, #190	@ 0xbe
 8008238:	006d      	lsls	r5, r5, #1
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	429f      	cmp	r7, r3
 800823e:	d800      	bhi.n	8008242 <_scanf_float+0x2d2>
 8008240:	e6d9      	b.n	8007ff6 <_scanf_float+0x86>
 8008242:	3f01      	subs	r7, #1
 8008244:	5963      	ldr	r3, [r4, r5]
 8008246:	0032      	movs	r2, r6
 8008248:	7839      	ldrb	r1, [r7, #0]
 800824a:	9803      	ldr	r0, [sp, #12]
 800824c:	4798      	blx	r3
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	e7f1      	b.n	800823a <_scanf_float+0x2ca>
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	0032      	movs	r2, r6
 800825a:	3b01      	subs	r3, #1
 800825c:	7819      	ldrb	r1, [r3, #0]
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	23be      	movs	r3, #190	@ 0xbe
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	58e3      	ldr	r3, [r4, r3]
 8008266:	9803      	ldr	r0, [sp, #12]
 8008268:	4798      	blx	r3
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	3b01      	subs	r3, #1
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	e7c3      	b.n	80081fa <_scanf_float+0x28a>
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	fffffeff 	.word	0xfffffeff
 8008278:	fffffe7f 	.word	0xfffffe7f
 800827c:	fffff87f 	.word	0xfffff87f
 8008280:	fffffd7f 	.word	0xfffffd7f
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	1e7d      	subs	r5, r7, #1
 8008288:	7829      	ldrb	r1, [r5, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	2965      	cmp	r1, #101	@ 0x65
 8008290:	d00c      	beq.n	80082ac <_scanf_float+0x33c>
 8008292:	2945      	cmp	r1, #69	@ 0x45
 8008294:	d00a      	beq.n	80082ac <_scanf_float+0x33c>
 8008296:	23be      	movs	r3, #190	@ 0xbe
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	58e3      	ldr	r3, [r4, r3]
 800829c:	0032      	movs	r2, r6
 800829e:	9803      	ldr	r0, [sp, #12]
 80082a0:	4798      	blx	r3
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	1ebd      	subs	r5, r7, #2
 80082a6:	3b01      	subs	r3, #1
 80082a8:	7829      	ldrb	r1, [r5, #0]
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	23be      	movs	r3, #190	@ 0xbe
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	0032      	movs	r2, r6
 80082b2:	58e3      	ldr	r3, [r4, r3]
 80082b4:	9803      	ldr	r0, [sp, #12]
 80082b6:	4798      	blx	r3
 80082b8:	002f      	movs	r7, r5
 80082ba:	6821      	ldr	r1, [r4, #0]
 80082bc:	2310      	movs	r3, #16
 80082be:	000a      	movs	r2, r1
 80082c0:	401a      	ands	r2, r3
 80082c2:	4219      	tst	r1, r3
 80082c4:	d001      	beq.n	80082ca <_scanf_float+0x35a>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e696      	b.n	8007ff8 <_scanf_float+0x88>
 80082ca:	21c0      	movs	r1, #192	@ 0xc0
 80082cc:	703a      	strb	r2, [r7, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	00c9      	lsls	r1, r1, #3
 80082d2:	400b      	ands	r3, r1
 80082d4:	2180      	movs	r1, #128	@ 0x80
 80082d6:	00c9      	lsls	r1, r1, #3
 80082d8:	428b      	cmp	r3, r1
 80082da:	d11c      	bne.n	8008316 <_scanf_float+0x3a6>
 80082dc:	9b05      	ldr	r3, [sp, #20]
 80082de:	9a01      	ldr	r2, [sp, #4]
 80082e0:	9905      	ldr	r1, [sp, #20]
 80082e2:	1a9a      	subs	r2, r3, r2
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	428b      	cmp	r3, r1
 80082e8:	d121      	bne.n	800832e <_scanf_float+0x3be>
 80082ea:	2200      	movs	r2, #0
 80082ec:	9904      	ldr	r1, [sp, #16]
 80082ee:	9803      	ldr	r0, [sp, #12]
 80082f0:	f000 ff1e 	bl	8009130 <_strtod_r>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	0006      	movs	r6, r0
 80082fa:	000f      	movs	r7, r1
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	0791      	lsls	r1, r2, #30
 8008300:	d522      	bpl.n	8008348 <_scanf_float+0x3d8>
 8008302:	9907      	ldr	r1, [sp, #28]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	600a      	str	r2, [r1, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	601e      	str	r6, [r3, #0]
 800830c:	605f      	str	r7, [r3, #4]
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60e3      	str	r3, [r4, #12]
 8008314:	e7d7      	b.n	80082c6 <_scanf_float+0x356>
 8008316:	9b08      	ldr	r3, [sp, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0e6      	beq.n	80082ea <_scanf_float+0x37a>
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	9803      	ldr	r0, [sp, #12]
 8008320:	1c59      	adds	r1, r3, #1
 8008322:	230a      	movs	r3, #10
 8008324:	f000 ff96 	bl	8009254 <_strtol_r>
 8008328:	9b08      	ldr	r3, [sp, #32]
 800832a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800832c:	1ac2      	subs	r2, r0, r3
 800832e:	0023      	movs	r3, r4
 8008330:	3370      	adds	r3, #112	@ 0x70
 8008332:	33ff      	adds	r3, #255	@ 0xff
 8008334:	429f      	cmp	r7, r3
 8008336:	d302      	bcc.n	800833e <_scanf_float+0x3ce>
 8008338:	0027      	movs	r7, r4
 800833a:	376f      	adds	r7, #111	@ 0x6f
 800833c:	37ff      	adds	r7, #255	@ 0xff
 800833e:	0038      	movs	r0, r7
 8008340:	4910      	ldr	r1, [pc, #64]	@ (8008384 <_scanf_float+0x414>)
 8008342:	f000 f823 	bl	800838c <siprintf>
 8008346:	e7d0      	b.n	80082ea <_scanf_float+0x37a>
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	0752      	lsls	r2, r2, #29
 800834c:	d502      	bpl.n	8008354 <_scanf_float+0x3e4>
 800834e:	9a07      	ldr	r2, [sp, #28]
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	e7d9      	b.n	8008308 <_scanf_float+0x398>
 8008354:	9a07      	ldr	r2, [sp, #28]
 8008356:	0030      	movs	r0, r6
 8008358:	6011      	str	r1, [r2, #0]
 800835a:	681d      	ldr	r5, [r3, #0]
 800835c:	0032      	movs	r2, r6
 800835e:	003b      	movs	r3, r7
 8008360:	0039      	movs	r1, r7
 8008362:	f7fa fb4d 	bl	8002a00 <__aeabi_dcmpun>
 8008366:	2800      	cmp	r0, #0
 8008368:	d004      	beq.n	8008374 <_scanf_float+0x404>
 800836a:	4807      	ldr	r0, [pc, #28]	@ (8008388 <_scanf_float+0x418>)
 800836c:	f001 f858 	bl	8009420 <nanf>
 8008370:	6028      	str	r0, [r5, #0]
 8008372:	e7cc      	b.n	800830e <_scanf_float+0x39e>
 8008374:	0030      	movs	r0, r6
 8008376:	0039      	movs	r1, r7
 8008378:	f7fa fc3a 	bl	8002bf0 <__aeabi_d2f>
 800837c:	e7f8      	b.n	8008370 <_scanf_float+0x400>
 800837e:	2300      	movs	r3, #0
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	e62d      	b.n	8007fe0 <_scanf_float+0x70>
 8008384:	0800c1ec 	.word	0x0800c1ec
 8008388:	0800c5e3 	.word	0x0800c5e3

0800838c <siprintf>:
 800838c:	b40e      	push	{r1, r2, r3}
 800838e:	b500      	push	{lr}
 8008390:	490b      	ldr	r1, [pc, #44]	@ (80083c0 <siprintf+0x34>)
 8008392:	b09c      	sub	sp, #112	@ 0x70
 8008394:	ab1d      	add	r3, sp, #116	@ 0x74
 8008396:	9002      	str	r0, [sp, #8]
 8008398:	9006      	str	r0, [sp, #24]
 800839a:	9107      	str	r1, [sp, #28]
 800839c:	9104      	str	r1, [sp, #16]
 800839e:	4809      	ldr	r0, [pc, #36]	@ (80083c4 <siprintf+0x38>)
 80083a0:	4909      	ldr	r1, [pc, #36]	@ (80083c8 <siprintf+0x3c>)
 80083a2:	cb04      	ldmia	r3!, {r2}
 80083a4:	9105      	str	r1, [sp, #20]
 80083a6:	6800      	ldr	r0, [r0, #0]
 80083a8:	a902      	add	r1, sp, #8
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	f002 fa78 	bl	800a8a0 <_svfiprintf_r>
 80083b0:	2200      	movs	r2, #0
 80083b2:	9b02      	ldr	r3, [sp, #8]
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	b01c      	add	sp, #112	@ 0x70
 80083b8:	bc08      	pop	{r3}
 80083ba:	b003      	add	sp, #12
 80083bc:	4718      	bx	r3
 80083be:	46c0      	nop			@ (mov r8, r8)
 80083c0:	7fffffff 	.word	0x7fffffff
 80083c4:	20000184 	.word	0x20000184
 80083c8:	ffff0208 	.word	0xffff0208

080083cc <std>:
 80083cc:	2300      	movs	r3, #0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	0004      	movs	r4, r0
 80083d2:	6003      	str	r3, [r0, #0]
 80083d4:	6043      	str	r3, [r0, #4]
 80083d6:	6083      	str	r3, [r0, #8]
 80083d8:	8181      	strh	r1, [r0, #12]
 80083da:	6643      	str	r3, [r0, #100]	@ 0x64
 80083dc:	81c2      	strh	r2, [r0, #14]
 80083de:	6103      	str	r3, [r0, #16]
 80083e0:	6143      	str	r3, [r0, #20]
 80083e2:	6183      	str	r3, [r0, #24]
 80083e4:	0019      	movs	r1, r3
 80083e6:	2208      	movs	r2, #8
 80083e8:	305c      	adds	r0, #92	@ 0x5c
 80083ea:	f000 ffc4 	bl	8009376 <memset>
 80083ee:	4b0b      	ldr	r3, [pc, #44]	@ (800841c <std+0x50>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80083f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008420 <std+0x54>)
 80083f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <std+0x58>)
 80083fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008428 <std+0x5c>)
 80083fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8008400:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <std+0x60>)
 8008402:	429c      	cmp	r4, r3
 8008404:	d005      	beq.n	8008412 <std+0x46>
 8008406:	4b0a      	ldr	r3, [pc, #40]	@ (8008430 <std+0x64>)
 8008408:	429c      	cmp	r4, r3
 800840a:	d002      	beq.n	8008412 <std+0x46>
 800840c:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <std+0x68>)
 800840e:	429c      	cmp	r4, r3
 8008410:	d103      	bne.n	800841a <std+0x4e>
 8008412:	0020      	movs	r0, r4
 8008414:	3058      	adds	r0, #88	@ 0x58
 8008416:	f000 ffe5 	bl	80093e4 <__retarget_lock_init_recursive>
 800841a:	bd10      	pop	{r4, pc}
 800841c:	0800b731 	.word	0x0800b731
 8008420:	0800b759 	.word	0x0800b759
 8008424:	0800b791 	.word	0x0800b791
 8008428:	0800b7bd 	.word	0x0800b7bd
 800842c:	20000750 	.word	0x20000750
 8008430:	200007b8 	.word	0x200007b8
 8008434:	20000820 	.word	0x20000820

08008438 <stdio_exit_handler>:
 8008438:	b510      	push	{r4, lr}
 800843a:	4a03      	ldr	r2, [pc, #12]	@ (8008448 <stdio_exit_handler+0x10>)
 800843c:	4903      	ldr	r1, [pc, #12]	@ (800844c <stdio_exit_handler+0x14>)
 800843e:	4804      	ldr	r0, [pc, #16]	@ (8008450 <stdio_exit_handler+0x18>)
 8008440:	f000 ff0c 	bl	800925c <_fwalk_sglue>
 8008444:	bd10      	pop	{r4, pc}
 8008446:	46c0      	nop			@ (mov r8, r8)
 8008448:	2000000c 	.word	0x2000000c
 800844c:	0800ad25 	.word	0x0800ad25
 8008450:	20000188 	.word	0x20000188

08008454 <cleanup_stdio>:
 8008454:	6841      	ldr	r1, [r0, #4]
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <cleanup_stdio+0x30>)
 8008458:	b510      	push	{r4, lr}
 800845a:	0004      	movs	r4, r0
 800845c:	4299      	cmp	r1, r3
 800845e:	d001      	beq.n	8008464 <cleanup_stdio+0x10>
 8008460:	f002 fc60 	bl	800ad24 <_fflush_r>
 8008464:	68a1      	ldr	r1, [r4, #8]
 8008466:	4b08      	ldr	r3, [pc, #32]	@ (8008488 <cleanup_stdio+0x34>)
 8008468:	4299      	cmp	r1, r3
 800846a:	d002      	beq.n	8008472 <cleanup_stdio+0x1e>
 800846c:	0020      	movs	r0, r4
 800846e:	f002 fc59 	bl	800ad24 <_fflush_r>
 8008472:	68e1      	ldr	r1, [r4, #12]
 8008474:	4b05      	ldr	r3, [pc, #20]	@ (800848c <cleanup_stdio+0x38>)
 8008476:	4299      	cmp	r1, r3
 8008478:	d002      	beq.n	8008480 <cleanup_stdio+0x2c>
 800847a:	0020      	movs	r0, r4
 800847c:	f002 fc52 	bl	800ad24 <_fflush_r>
 8008480:	bd10      	pop	{r4, pc}
 8008482:	46c0      	nop			@ (mov r8, r8)
 8008484:	20000750 	.word	0x20000750
 8008488:	200007b8 	.word	0x200007b8
 800848c:	20000820 	.word	0x20000820

08008490 <global_stdio_init.part.0>:
 8008490:	b510      	push	{r4, lr}
 8008492:	4b09      	ldr	r3, [pc, #36]	@ (80084b8 <global_stdio_init.part.0+0x28>)
 8008494:	4a09      	ldr	r2, [pc, #36]	@ (80084bc <global_stdio_init.part.0+0x2c>)
 8008496:	2104      	movs	r1, #4
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	4809      	ldr	r0, [pc, #36]	@ (80084c0 <global_stdio_init.part.0+0x30>)
 800849c:	2200      	movs	r2, #0
 800849e:	f7ff ff95 	bl	80083cc <std>
 80084a2:	2201      	movs	r2, #1
 80084a4:	2109      	movs	r1, #9
 80084a6:	4807      	ldr	r0, [pc, #28]	@ (80084c4 <global_stdio_init.part.0+0x34>)
 80084a8:	f7ff ff90 	bl	80083cc <std>
 80084ac:	2202      	movs	r2, #2
 80084ae:	2112      	movs	r1, #18
 80084b0:	4805      	ldr	r0, [pc, #20]	@ (80084c8 <global_stdio_init.part.0+0x38>)
 80084b2:	f7ff ff8b 	bl	80083cc <std>
 80084b6:	bd10      	pop	{r4, pc}
 80084b8:	20000888 	.word	0x20000888
 80084bc:	08008439 	.word	0x08008439
 80084c0:	20000750 	.word	0x20000750
 80084c4:	200007b8 	.word	0x200007b8
 80084c8:	20000820 	.word	0x20000820

080084cc <__sfp_lock_acquire>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4802      	ldr	r0, [pc, #8]	@ (80084d8 <__sfp_lock_acquire+0xc>)
 80084d0:	f000 ff89 	bl	80093e6 <__retarget_lock_acquire_recursive>
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	2000088d 	.word	0x2000088d

080084dc <__sfp_lock_release>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	4802      	ldr	r0, [pc, #8]	@ (80084e8 <__sfp_lock_release+0xc>)
 80084e0:	f000 ff82 	bl	80093e8 <__retarget_lock_release_recursive>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	2000088d 	.word	0x2000088d

080084ec <__sinit>:
 80084ec:	b510      	push	{r4, lr}
 80084ee:	0004      	movs	r4, r0
 80084f0:	f7ff ffec 	bl	80084cc <__sfp_lock_acquire>
 80084f4:	6a23      	ldr	r3, [r4, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <__sinit+0x14>
 80084fa:	f7ff ffef 	bl	80084dc <__sfp_lock_release>
 80084fe:	bd10      	pop	{r4, pc}
 8008500:	4b04      	ldr	r3, [pc, #16]	@ (8008514 <__sinit+0x28>)
 8008502:	6223      	str	r3, [r4, #32]
 8008504:	4b04      	ldr	r3, [pc, #16]	@ (8008518 <__sinit+0x2c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f6      	bne.n	80084fa <__sinit+0xe>
 800850c:	f7ff ffc0 	bl	8008490 <global_stdio_init.part.0>
 8008510:	e7f3      	b.n	80084fa <__sinit+0xe>
 8008512:	46c0      	nop			@ (mov r8, r8)
 8008514:	08008455 	.word	0x08008455
 8008518:	20000888 	.word	0x20000888

0800851c <sulp>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	0016      	movs	r6, r2
 8008520:	000d      	movs	r5, r1
 8008522:	f002 ffcb 	bl	800b4bc <__ulp>
 8008526:	2e00      	cmp	r6, #0
 8008528:	d00d      	beq.n	8008546 <sulp+0x2a>
 800852a:	236b      	movs	r3, #107	@ 0x6b
 800852c:	006a      	lsls	r2, r5, #1
 800852e:	0d52      	lsrs	r2, r2, #21
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	dd07      	ble.n	8008546 <sulp+0x2a>
 8008536:	2400      	movs	r4, #0
 8008538:	4a03      	ldr	r2, [pc, #12]	@ (8008548 <sulp+0x2c>)
 800853a:	051b      	lsls	r3, r3, #20
 800853c:	189d      	adds	r5, r3, r2
 800853e:	002b      	movs	r3, r5
 8008540:	0022      	movs	r2, r4
 8008542:	f7f9 fbf9 	bl	8001d38 <__aeabi_dmul>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	3ff00000 	.word	0x3ff00000

0800854c <_strtod_l>:
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	b0a3      	sub	sp, #140	@ 0x8c
 8008550:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008552:	2200      	movs	r2, #0
 8008554:	2600      	movs	r6, #0
 8008556:	2700      	movs	r7, #0
 8008558:	9005      	str	r0, [sp, #20]
 800855a:	9109      	str	r1, [sp, #36]	@ 0x24
 800855c:	921e      	str	r2, [sp, #120]	@ 0x78
 800855e:	911d      	str	r1, [sp, #116]	@ 0x74
 8008560:	780a      	ldrb	r2, [r1, #0]
 8008562:	2a2b      	cmp	r2, #43	@ 0x2b
 8008564:	d053      	beq.n	800860e <_strtod_l+0xc2>
 8008566:	d83f      	bhi.n	80085e8 <_strtod_l+0x9c>
 8008568:	2a0d      	cmp	r2, #13
 800856a:	d839      	bhi.n	80085e0 <_strtod_l+0x94>
 800856c:	2a08      	cmp	r2, #8
 800856e:	d839      	bhi.n	80085e4 <_strtod_l+0x98>
 8008570:	2a00      	cmp	r2, #0
 8008572:	d042      	beq.n	80085fa <_strtod_l+0xae>
 8008574:	2200      	movs	r2, #0
 8008576:	9212      	str	r2, [sp, #72]	@ 0x48
 8008578:	2100      	movs	r1, #0
 800857a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800857c:	910c      	str	r1, [sp, #48]	@ 0x30
 800857e:	782a      	ldrb	r2, [r5, #0]
 8008580:	2a30      	cmp	r2, #48	@ 0x30
 8008582:	d000      	beq.n	8008586 <_strtod_l+0x3a>
 8008584:	e083      	b.n	800868e <_strtod_l+0x142>
 8008586:	786a      	ldrb	r2, [r5, #1]
 8008588:	3120      	adds	r1, #32
 800858a:	438a      	bics	r2, r1
 800858c:	2a58      	cmp	r2, #88	@ 0x58
 800858e:	d000      	beq.n	8008592 <_strtod_l+0x46>
 8008590:	e073      	b.n	800867a <_strtod_l+0x12e>
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008596:	4a95      	ldr	r2, [pc, #596]	@ (80087ec <_strtod_l+0x2a0>)
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	ab1e      	add	r3, sp, #120	@ 0x78
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	9805      	ldr	r0, [sp, #20]
 80085a0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80085a2:	a91d      	add	r1, sp, #116	@ 0x74
 80085a4:	f001 fe2a 	bl	800a1fc <__gethex>
 80085a8:	230f      	movs	r3, #15
 80085aa:	0002      	movs	r2, r0
 80085ac:	401a      	ands	r2, r3
 80085ae:	0004      	movs	r4, r0
 80085b0:	9206      	str	r2, [sp, #24]
 80085b2:	4218      	tst	r0, r3
 80085b4:	d005      	beq.n	80085c2 <_strtod_l+0x76>
 80085b6:	2a06      	cmp	r2, #6
 80085b8:	d12b      	bne.n	8008612 <_strtod_l+0xc6>
 80085ba:	2300      	movs	r3, #0
 80085bc:	3501      	adds	r5, #1
 80085be:	951d      	str	r5, [sp, #116]	@ 0x74
 80085c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80085c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <_strtod_l+0x82>
 80085c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d019      	beq.n	8008608 <_strtod_l+0xbc>
 80085d4:	2380      	movs	r3, #128	@ 0x80
 80085d6:	0030      	movs	r0, r6
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	18f9      	adds	r1, r7, r3
 80085dc:	b023      	add	sp, #140	@ 0x8c
 80085de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e0:	2a20      	cmp	r2, #32
 80085e2:	d1c7      	bne.n	8008574 <_strtod_l+0x28>
 80085e4:	3101      	adds	r1, #1
 80085e6:	e7ba      	b.n	800855e <_strtod_l+0x12>
 80085e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80085ea:	d1c3      	bne.n	8008574 <_strtod_l+0x28>
 80085ec:	3a2c      	subs	r2, #44	@ 0x2c
 80085ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80085f0:	1c4a      	adds	r2, r1, #1
 80085f2:	921d      	str	r2, [sp, #116]	@ 0x74
 80085f4:	784a      	ldrb	r2, [r1, #1]
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	d1be      	bne.n	8008578 <_strtod_l+0x2c>
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	931d      	str	r3, [sp, #116]	@ 0x74
 80085fe:	2300      	movs	r3, #0
 8008600:	9312      	str	r3, [sp, #72]	@ 0x48
 8008602:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1df      	bne.n	80085c8 <_strtod_l+0x7c>
 8008608:	0030      	movs	r0, r6
 800860a:	0039      	movs	r1, r7
 800860c:	e7e6      	b.n	80085dc <_strtod_l+0x90>
 800860e:	2200      	movs	r2, #0
 8008610:	e7ed      	b.n	80085ee <_strtod_l+0xa2>
 8008612:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008614:	2a00      	cmp	r2, #0
 8008616:	d007      	beq.n	8008628 <_strtod_l+0xdc>
 8008618:	2135      	movs	r1, #53	@ 0x35
 800861a:	a820      	add	r0, sp, #128	@ 0x80
 800861c:	f003 f844 	bl	800b6a8 <__copybits>
 8008620:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008622:	9805      	ldr	r0, [sp, #20]
 8008624:	f002 fbfe 	bl	800ae24 <_Bfree>
 8008628:	9806      	ldr	r0, [sp, #24]
 800862a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800862c:	3801      	subs	r0, #1
 800862e:	2804      	cmp	r0, #4
 8008630:	d806      	bhi.n	8008640 <_strtod_l+0xf4>
 8008632:	f7f7 fd6f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008636:	0312      	.short	0x0312
 8008638:	1e1c      	.short	0x1e1c
 800863a:	12          	.byte	0x12
 800863b:	00          	.byte	0x00
 800863c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800863e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008640:	05e4      	lsls	r4, r4, #23
 8008642:	d502      	bpl.n	800864a <_strtod_l+0xfe>
 8008644:	2380      	movs	r3, #128	@ 0x80
 8008646:	061b      	lsls	r3, r3, #24
 8008648:	431f      	orrs	r7, r3
 800864a:	4b69      	ldr	r3, [pc, #420]	@ (80087f0 <_strtod_l+0x2a4>)
 800864c:	423b      	tst	r3, r7
 800864e:	d1b8      	bne.n	80085c2 <_strtod_l+0x76>
 8008650:	f000 fe9e 	bl	8009390 <__errno>
 8008654:	2322      	movs	r3, #34	@ 0x22
 8008656:	6003      	str	r3, [r0, #0]
 8008658:	e7b3      	b.n	80085c2 <_strtod_l+0x76>
 800865a:	4966      	ldr	r1, [pc, #408]	@ (80087f4 <_strtod_l+0x2a8>)
 800865c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800865e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008660:	400a      	ands	r2, r1
 8008662:	4965      	ldr	r1, [pc, #404]	@ (80087f8 <_strtod_l+0x2ac>)
 8008664:	185b      	adds	r3, r3, r1
 8008666:	051b      	lsls	r3, r3, #20
 8008668:	431a      	orrs	r2, r3
 800866a:	0017      	movs	r7, r2
 800866c:	e7e8      	b.n	8008640 <_strtod_l+0xf4>
 800866e:	4f60      	ldr	r7, [pc, #384]	@ (80087f0 <_strtod_l+0x2a4>)
 8008670:	e7e6      	b.n	8008640 <_strtod_l+0xf4>
 8008672:	2601      	movs	r6, #1
 8008674:	4f61      	ldr	r7, [pc, #388]	@ (80087fc <_strtod_l+0x2b0>)
 8008676:	4276      	negs	r6, r6
 8008678:	e7e2      	b.n	8008640 <_strtod_l+0xf4>
 800867a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	921d      	str	r2, [sp, #116]	@ 0x74
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b30      	cmp	r3, #48	@ 0x30
 8008684:	d0f9      	beq.n	800867a <_strtod_l+0x12e>
 8008686:	2b00      	cmp	r3, #0
 8008688:	d09b      	beq.n	80085c2 <_strtod_l+0x76>
 800868a:	2301      	movs	r3, #1
 800868c:	930c      	str	r3, [sp, #48]	@ 0x30
 800868e:	2500      	movs	r5, #0
 8008690:	220a      	movs	r2, #10
 8008692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008694:	950d      	str	r5, [sp, #52]	@ 0x34
 8008696:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008698:	9508      	str	r5, [sp, #32]
 800869a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800869c:	7804      	ldrb	r4, [r0, #0]
 800869e:	0023      	movs	r3, r4
 80086a0:	3b30      	subs	r3, #48	@ 0x30
 80086a2:	b2d9      	uxtb	r1, r3
 80086a4:	2909      	cmp	r1, #9
 80086a6:	d927      	bls.n	80086f8 <_strtod_l+0x1ac>
 80086a8:	2201      	movs	r2, #1
 80086aa:	4955      	ldr	r1, [pc, #340]	@ (8008800 <_strtod_l+0x2b4>)
 80086ac:	f000 fe52 	bl	8009354 <strncmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d031      	beq.n	8008718 <_strtod_l+0x1cc>
 80086b4:	2000      	movs	r0, #0
 80086b6:	0023      	movs	r3, r4
 80086b8:	4684      	mov	ip, r0
 80086ba:	9a08      	ldr	r2, [sp, #32]
 80086bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80086be:	9206      	str	r2, [sp, #24]
 80086c0:	2220      	movs	r2, #32
 80086c2:	0019      	movs	r1, r3
 80086c4:	4391      	bics	r1, r2
 80086c6:	000a      	movs	r2, r1
 80086c8:	2100      	movs	r1, #0
 80086ca:	9107      	str	r1, [sp, #28]
 80086cc:	2a45      	cmp	r2, #69	@ 0x45
 80086ce:	d000      	beq.n	80086d2 <_strtod_l+0x186>
 80086d0:	e0c0      	b.n	8008854 <_strtod_l+0x308>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086d6:	4303      	orrs	r3, r0
 80086d8:	4313      	orrs	r3, r2
 80086da:	428b      	cmp	r3, r1
 80086dc:	d08d      	beq.n	80085fa <_strtod_l+0xae>
 80086de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e2:	3301      	adds	r3, #1
 80086e4:	931d      	str	r3, [sp, #116]	@ 0x74
 80086e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80086ec:	d070      	beq.n	80087d0 <_strtod_l+0x284>
 80086ee:	000c      	movs	r4, r1
 80086f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80086f2:	d173      	bne.n	80087dc <_strtod_l+0x290>
 80086f4:	2401      	movs	r4, #1
 80086f6:	e06c      	b.n	80087d2 <_strtod_l+0x286>
 80086f8:	9908      	ldr	r1, [sp, #32]
 80086fa:	2908      	cmp	r1, #8
 80086fc:	dc09      	bgt.n	8008712 <_strtod_l+0x1c6>
 80086fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008700:	4351      	muls	r1, r2
 8008702:	185b      	adds	r3, r3, r1
 8008704:	930d      	str	r3, [sp, #52]	@ 0x34
 8008706:	9b08      	ldr	r3, [sp, #32]
 8008708:	3001      	adds	r0, #1
 800870a:	3301      	adds	r3, #1
 800870c:	9308      	str	r3, [sp, #32]
 800870e:	901d      	str	r0, [sp, #116]	@ 0x74
 8008710:	e7c3      	b.n	800869a <_strtod_l+0x14e>
 8008712:	4355      	muls	r5, r2
 8008714:	195d      	adds	r5, r3, r5
 8008716:	e7f6      	b.n	8008706 <_strtod_l+0x1ba>
 8008718:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	921d      	str	r2, [sp, #116]	@ 0x74
 800871e:	9a08      	ldr	r2, [sp, #32]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2a00      	cmp	r2, #0
 8008724:	d03a      	beq.n	800879c <_strtod_l+0x250>
 8008726:	900e      	str	r0, [sp, #56]	@ 0x38
 8008728:	9206      	str	r2, [sp, #24]
 800872a:	001a      	movs	r2, r3
 800872c:	3a30      	subs	r2, #48	@ 0x30
 800872e:	2a09      	cmp	r2, #9
 8008730:	d912      	bls.n	8008758 <_strtod_l+0x20c>
 8008732:	2201      	movs	r2, #1
 8008734:	4694      	mov	ip, r2
 8008736:	e7c3      	b.n	80086c0 <_strtod_l+0x174>
 8008738:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800873a:	3001      	adds	r0, #1
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	921d      	str	r2, [sp, #116]	@ 0x74
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b30      	cmp	r3, #48	@ 0x30
 8008744:	d0f8      	beq.n	8008738 <_strtod_l+0x1ec>
 8008746:	001a      	movs	r2, r3
 8008748:	3a31      	subs	r2, #49	@ 0x31
 800874a:	2a08      	cmp	r2, #8
 800874c:	d83b      	bhi.n	80087c6 <_strtod_l+0x27a>
 800874e:	900e      	str	r0, [sp, #56]	@ 0x38
 8008750:	2000      	movs	r0, #0
 8008752:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008754:	9006      	str	r0, [sp, #24]
 8008756:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008758:	001a      	movs	r2, r3
 800875a:	1c41      	adds	r1, r0, #1
 800875c:	3a30      	subs	r2, #48	@ 0x30
 800875e:	2b30      	cmp	r3, #48	@ 0x30
 8008760:	d016      	beq.n	8008790 <_strtod_l+0x244>
 8008762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008764:	185b      	adds	r3, r3, r1
 8008766:	930e      	str	r3, [sp, #56]	@ 0x38
 8008768:	9b06      	ldr	r3, [sp, #24]
 800876a:	210a      	movs	r1, #10
 800876c:	469c      	mov	ip, r3
 800876e:	4484      	add	ip, r0
 8008770:	459c      	cmp	ip, r3
 8008772:	d115      	bne.n	80087a0 <_strtod_l+0x254>
 8008774:	9906      	ldr	r1, [sp, #24]
 8008776:	9b06      	ldr	r3, [sp, #24]
 8008778:	3101      	adds	r1, #1
 800877a:	1809      	adds	r1, r1, r0
 800877c:	181b      	adds	r3, r3, r0
 800877e:	9106      	str	r1, [sp, #24]
 8008780:	2b08      	cmp	r3, #8
 8008782:	dc19      	bgt.n	80087b8 <_strtod_l+0x26c>
 8008784:	230a      	movs	r3, #10
 8008786:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008788:	434b      	muls	r3, r1
 800878a:	2100      	movs	r1, #0
 800878c:	18d3      	adds	r3, r2, r3
 800878e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008792:	0008      	movs	r0, r1
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	921d      	str	r2, [sp, #116]	@ 0x74
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	e7c6      	b.n	800872a <_strtod_l+0x1de>
 800879c:	9808      	ldr	r0, [sp, #32]
 800879e:	e7d0      	b.n	8008742 <_strtod_l+0x1f6>
 80087a0:	1c5c      	adds	r4, r3, #1
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	dc04      	bgt.n	80087b0 <_strtod_l+0x264>
 80087a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087a8:	434b      	muls	r3, r1
 80087aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80087ac:	0023      	movs	r3, r4
 80087ae:	e7df      	b.n	8008770 <_strtod_l+0x224>
 80087b0:	2c10      	cmp	r4, #16
 80087b2:	dcfb      	bgt.n	80087ac <_strtod_l+0x260>
 80087b4:	434d      	muls	r5, r1
 80087b6:	e7f9      	b.n	80087ac <_strtod_l+0x260>
 80087b8:	2100      	movs	r1, #0
 80087ba:	2b0f      	cmp	r3, #15
 80087bc:	dce8      	bgt.n	8008790 <_strtod_l+0x244>
 80087be:	230a      	movs	r3, #10
 80087c0:	435d      	muls	r5, r3
 80087c2:	1955      	adds	r5, r2, r5
 80087c4:	e7e4      	b.n	8008790 <_strtod_l+0x244>
 80087c6:	2200      	movs	r2, #0
 80087c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ca:	9206      	str	r2, [sp, #24]
 80087cc:	3201      	adds	r2, #1
 80087ce:	e7b1      	b.n	8008734 <_strtod_l+0x1e8>
 80087d0:	2400      	movs	r4, #0
 80087d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d4:	3302      	adds	r3, #2
 80087d6:	931d      	str	r3, [sp, #116]	@ 0x74
 80087d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087da:	789b      	ldrb	r3, [r3, #2]
 80087dc:	001a      	movs	r2, r3
 80087de:	3a30      	subs	r2, #48	@ 0x30
 80087e0:	2a09      	cmp	r2, #9
 80087e2:	d913      	bls.n	800880c <_strtod_l+0x2c0>
 80087e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80087e8:	2200      	movs	r2, #0
 80087ea:	e032      	b.n	8008852 <_strtod_l+0x306>
 80087ec:	0800c208 	.word	0x0800c208
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	ffefffff 	.word	0xffefffff
 80087f8:	00000433 	.word	0x00000433
 80087fc:	7fffffff 	.word	0x7fffffff
 8008800:	0800c1f1 	.word	0x0800c1f1
 8008804:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	921d      	str	r2, [sp, #116]	@ 0x74
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b30      	cmp	r3, #48	@ 0x30
 800880e:	d0f9      	beq.n	8008804 <_strtod_l+0x2b8>
 8008810:	2200      	movs	r2, #0
 8008812:	9207      	str	r2, [sp, #28]
 8008814:	001a      	movs	r2, r3
 8008816:	3a31      	subs	r2, #49	@ 0x31
 8008818:	2a08      	cmp	r2, #8
 800881a:	d81b      	bhi.n	8008854 <_strtod_l+0x308>
 800881c:	3b30      	subs	r3, #48	@ 0x30
 800881e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008820:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	911d      	str	r1, [sp, #116]	@ 0x74
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	001a      	movs	r2, r3
 800882e:	3a30      	subs	r2, #48	@ 0x30
 8008830:	2a09      	cmp	r2, #9
 8008832:	d93a      	bls.n	80088aa <_strtod_l+0x35e>
 8008834:	9a07      	ldr	r2, [sp, #28]
 8008836:	1a8a      	subs	r2, r1, r2
 8008838:	49b4      	ldr	r1, [pc, #720]	@ (8008b0c <_strtod_l+0x5c0>)
 800883a:	9107      	str	r1, [sp, #28]
 800883c:	2a08      	cmp	r2, #8
 800883e:	dc04      	bgt.n	800884a <_strtod_l+0x2fe>
 8008840:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008842:	9207      	str	r2, [sp, #28]
 8008844:	428a      	cmp	r2, r1
 8008846:	dd00      	ble.n	800884a <_strtod_l+0x2fe>
 8008848:	9107      	str	r1, [sp, #28]
 800884a:	2c00      	cmp	r4, #0
 800884c:	d002      	beq.n	8008854 <_strtod_l+0x308>
 800884e:	9a07      	ldr	r2, [sp, #28]
 8008850:	4252      	negs	r2, r2
 8008852:	9207      	str	r2, [sp, #28]
 8008854:	9a06      	ldr	r2, [sp, #24]
 8008856:	2a00      	cmp	r2, #0
 8008858:	d14d      	bne.n	80088f6 <_strtod_l+0x3aa>
 800885a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800885c:	4310      	orrs	r0, r2
 800885e:	d000      	beq.n	8008862 <_strtod_l+0x316>
 8008860:	e6af      	b.n	80085c2 <_strtod_l+0x76>
 8008862:	4662      	mov	r2, ip
 8008864:	2a00      	cmp	r2, #0
 8008866:	d000      	beq.n	800886a <_strtod_l+0x31e>
 8008868:	e6c7      	b.n	80085fa <_strtod_l+0xae>
 800886a:	2b69      	cmp	r3, #105	@ 0x69
 800886c:	d027      	beq.n	80088be <_strtod_l+0x372>
 800886e:	dc23      	bgt.n	80088b8 <_strtod_l+0x36c>
 8008870:	2b49      	cmp	r3, #73	@ 0x49
 8008872:	d024      	beq.n	80088be <_strtod_l+0x372>
 8008874:	2b4e      	cmp	r3, #78	@ 0x4e
 8008876:	d000      	beq.n	800887a <_strtod_l+0x32e>
 8008878:	e6bf      	b.n	80085fa <_strtod_l+0xae>
 800887a:	49a5      	ldr	r1, [pc, #660]	@ (8008b10 <_strtod_l+0x5c4>)
 800887c:	a81d      	add	r0, sp, #116	@ 0x74
 800887e:	f001 fef3 	bl	800a668 <__match>
 8008882:	2800      	cmp	r0, #0
 8008884:	d100      	bne.n	8008888 <_strtod_l+0x33c>
 8008886:	e6b8      	b.n	80085fa <_strtod_l+0xae>
 8008888:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b28      	cmp	r3, #40	@ 0x28
 800888e:	d12c      	bne.n	80088ea <_strtod_l+0x39e>
 8008890:	49a0      	ldr	r1, [pc, #640]	@ (8008b14 <_strtod_l+0x5c8>)
 8008892:	aa20      	add	r2, sp, #128	@ 0x80
 8008894:	a81d      	add	r0, sp, #116	@ 0x74
 8008896:	f001 fefb 	bl	800a690 <__hexnan>
 800889a:	2805      	cmp	r0, #5
 800889c:	d125      	bne.n	80088ea <_strtod_l+0x39e>
 800889e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088a0:	4a9d      	ldr	r2, [pc, #628]	@ (8008b18 <_strtod_l+0x5cc>)
 80088a2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80088a4:	431a      	orrs	r2, r3
 80088a6:	0017      	movs	r7, r2
 80088a8:	e68b      	b.n	80085c2 <_strtod_l+0x76>
 80088aa:	220a      	movs	r2, #10
 80088ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80088ae:	434a      	muls	r2, r1
 80088b0:	18d2      	adds	r2, r2, r3
 80088b2:	3a30      	subs	r2, #48	@ 0x30
 80088b4:	9210      	str	r2, [sp, #64]	@ 0x40
 80088b6:	e7b5      	b.n	8008824 <_strtod_l+0x2d8>
 80088b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80088ba:	d0de      	beq.n	800887a <_strtod_l+0x32e>
 80088bc:	e69d      	b.n	80085fa <_strtod_l+0xae>
 80088be:	4997      	ldr	r1, [pc, #604]	@ (8008b1c <_strtod_l+0x5d0>)
 80088c0:	a81d      	add	r0, sp, #116	@ 0x74
 80088c2:	f001 fed1 	bl	800a668 <__match>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d100      	bne.n	80088cc <_strtod_l+0x380>
 80088ca:	e696      	b.n	80085fa <_strtod_l+0xae>
 80088cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088ce:	4994      	ldr	r1, [pc, #592]	@ (8008b20 <_strtod_l+0x5d4>)
 80088d0:	3b01      	subs	r3, #1
 80088d2:	a81d      	add	r0, sp, #116	@ 0x74
 80088d4:	931d      	str	r3, [sp, #116]	@ 0x74
 80088d6:	f001 fec7 	bl	800a668 <__match>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d102      	bne.n	80088e4 <_strtod_l+0x398>
 80088de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088e0:	3301      	adds	r3, #1
 80088e2:	931d      	str	r3, [sp, #116]	@ 0x74
 80088e4:	2600      	movs	r6, #0
 80088e6:	4f8c      	ldr	r7, [pc, #560]	@ (8008b18 <_strtod_l+0x5cc>)
 80088e8:	e66b      	b.n	80085c2 <_strtod_l+0x76>
 80088ea:	488e      	ldr	r0, [pc, #568]	@ (8008b24 <_strtod_l+0x5d8>)
 80088ec:	f000 fd92 	bl	8009414 <nan>
 80088f0:	0006      	movs	r6, r0
 80088f2:	000f      	movs	r7, r1
 80088f4:	e665      	b.n	80085c2 <_strtod_l+0x76>
 80088f6:	9b07      	ldr	r3, [sp, #28]
 80088f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80088fe:	9b08      	ldr	r3, [sp, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <_strtod_l+0x3bc>
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	9308      	str	r3, [sp, #32]
 8008908:	9c06      	ldr	r4, [sp, #24]
 800890a:	2c10      	cmp	r4, #16
 800890c:	dd00      	ble.n	8008910 <_strtod_l+0x3c4>
 800890e:	2410      	movs	r4, #16
 8008910:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008912:	f7fa f901 	bl	8002b18 <__aeabi_ui2d>
 8008916:	9b06      	ldr	r3, [sp, #24]
 8008918:	0006      	movs	r6, r0
 800891a:	000f      	movs	r7, r1
 800891c:	2b09      	cmp	r3, #9
 800891e:	dc13      	bgt.n	8008948 <_strtod_l+0x3fc>
 8008920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008922:	2b00      	cmp	r3, #0
 8008924:	d100      	bne.n	8008928 <_strtod_l+0x3dc>
 8008926:	e64c      	b.n	80085c2 <_strtod_l+0x76>
 8008928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800892a:	2b00      	cmp	r3, #0
 800892c:	dc00      	bgt.n	8008930 <_strtod_l+0x3e4>
 800892e:	e07e      	b.n	8008a2e <_strtod_l+0x4e2>
 8008930:	2b16      	cmp	r3, #22
 8008932:	dc63      	bgt.n	80089fc <_strtod_l+0x4b0>
 8008934:	497c      	ldr	r1, [pc, #496]	@ (8008b28 <_strtod_l+0x5dc>)
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	18c9      	adds	r1, r1, r3
 800893a:	0032      	movs	r2, r6
 800893c:	6808      	ldr	r0, [r1, #0]
 800893e:	6849      	ldr	r1, [r1, #4]
 8008940:	003b      	movs	r3, r7
 8008942:	f7f9 f9f9 	bl	8001d38 <__aeabi_dmul>
 8008946:	e7d3      	b.n	80088f0 <_strtod_l+0x3a4>
 8008948:	0022      	movs	r2, r4
 800894a:	4b77      	ldr	r3, [pc, #476]	@ (8008b28 <_strtod_l+0x5dc>)
 800894c:	3a09      	subs	r2, #9
 800894e:	00d2      	lsls	r2, r2, #3
 8008950:	189b      	adds	r3, r3, r2
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f7f9 f9ef 	bl	8001d38 <__aeabi_dmul>
 800895a:	0006      	movs	r6, r0
 800895c:	0028      	movs	r0, r5
 800895e:	000f      	movs	r7, r1
 8008960:	f7fa f8da 	bl	8002b18 <__aeabi_ui2d>
 8008964:	000b      	movs	r3, r1
 8008966:	0002      	movs	r2, r0
 8008968:	0039      	movs	r1, r7
 800896a:	0030      	movs	r0, r6
 800896c:	f7f8 fa3c 	bl	8000de8 <__aeabi_dadd>
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	0006      	movs	r6, r0
 8008974:	000f      	movs	r7, r1
 8008976:	2b0f      	cmp	r3, #15
 8008978:	ddd2      	ble.n	8008920 <_strtod_l+0x3d4>
 800897a:	9b06      	ldr	r3, [sp, #24]
 800897c:	1b1c      	subs	r4, r3, r4
 800897e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008980:	18e4      	adds	r4, r4, r3
 8008982:	2c00      	cmp	r4, #0
 8008984:	dc00      	bgt.n	8008988 <_strtod_l+0x43c>
 8008986:	e09b      	b.n	8008ac0 <_strtod_l+0x574>
 8008988:	220f      	movs	r2, #15
 800898a:	0023      	movs	r3, r4
 800898c:	4013      	ands	r3, r2
 800898e:	4214      	tst	r4, r2
 8008990:	d00a      	beq.n	80089a8 <_strtod_l+0x45c>
 8008992:	4965      	ldr	r1, [pc, #404]	@ (8008b28 <_strtod_l+0x5dc>)
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	18c9      	adds	r1, r1, r3
 8008998:	0032      	movs	r2, r6
 800899a:	6808      	ldr	r0, [r1, #0]
 800899c:	6849      	ldr	r1, [r1, #4]
 800899e:	003b      	movs	r3, r7
 80089a0:	f7f9 f9ca 	bl	8001d38 <__aeabi_dmul>
 80089a4:	0006      	movs	r6, r0
 80089a6:	000f      	movs	r7, r1
 80089a8:	230f      	movs	r3, #15
 80089aa:	439c      	bics	r4, r3
 80089ac:	d073      	beq.n	8008a96 <_strtod_l+0x54a>
 80089ae:	3326      	adds	r3, #38	@ 0x26
 80089b0:	33ff      	adds	r3, #255	@ 0xff
 80089b2:	429c      	cmp	r4, r3
 80089b4:	dd4b      	ble.n	8008a4e <_strtod_l+0x502>
 80089b6:	2300      	movs	r3, #0
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	2322      	movs	r3, #34	@ 0x22
 80089c2:	2600      	movs	r6, #0
 80089c4:	9a05      	ldr	r2, [sp, #20]
 80089c6:	4f54      	ldr	r7, [pc, #336]	@ (8008b18 <_strtod_l+0x5cc>)
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089cc:	42b3      	cmp	r3, r6
 80089ce:	d100      	bne.n	80089d2 <_strtod_l+0x486>
 80089d0:	e5f7      	b.n	80085c2 <_strtod_l+0x76>
 80089d2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	f002 fa25 	bl	800ae24 <_Bfree>
 80089da:	9908      	ldr	r1, [sp, #32]
 80089dc:	9805      	ldr	r0, [sp, #20]
 80089de:	f002 fa21 	bl	800ae24 <_Bfree>
 80089e2:	9907      	ldr	r1, [sp, #28]
 80089e4:	9805      	ldr	r0, [sp, #20]
 80089e6:	f002 fa1d 	bl	800ae24 <_Bfree>
 80089ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80089ec:	9805      	ldr	r0, [sp, #20]
 80089ee:	f002 fa19 	bl	800ae24 <_Bfree>
 80089f2:	9906      	ldr	r1, [sp, #24]
 80089f4:	9805      	ldr	r0, [sp, #20]
 80089f6:	f002 fa15 	bl	800ae24 <_Bfree>
 80089fa:	e5e2      	b.n	80085c2 <_strtod_l+0x76>
 80089fc:	2325      	movs	r3, #37	@ 0x25
 80089fe:	9a06      	ldr	r2, [sp, #24]
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a04:	4293      	cmp	r3, r2
 8008a06:	dbb8      	blt.n	800897a <_strtod_l+0x42e>
 8008a08:	240f      	movs	r4, #15
 8008a0a:	9b06      	ldr	r3, [sp, #24]
 8008a0c:	4d46      	ldr	r5, [pc, #280]	@ (8008b28 <_strtod_l+0x5dc>)
 8008a0e:	1ae4      	subs	r4, r4, r3
 8008a10:	00e1      	lsls	r1, r4, #3
 8008a12:	1869      	adds	r1, r5, r1
 8008a14:	0032      	movs	r2, r6
 8008a16:	6808      	ldr	r0, [r1, #0]
 8008a18:	6849      	ldr	r1, [r1, #4]
 8008a1a:	003b      	movs	r3, r7
 8008a1c:	f7f9 f98c 	bl	8001d38 <__aeabi_dmul>
 8008a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a22:	1b1c      	subs	r4, r3, r4
 8008a24:	00e4      	lsls	r4, r4, #3
 8008a26:	192d      	adds	r5, r5, r4
 8008a28:	682a      	ldr	r2, [r5, #0]
 8008a2a:	686b      	ldr	r3, [r5, #4]
 8008a2c:	e789      	b.n	8008942 <_strtod_l+0x3f6>
 8008a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a30:	3316      	adds	r3, #22
 8008a32:	dba2      	blt.n	800897a <_strtod_l+0x42e>
 8008a34:	9907      	ldr	r1, [sp, #28]
 8008a36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a38:	4b3b      	ldr	r3, [pc, #236]	@ (8008b28 <_strtod_l+0x5dc>)
 8008a3a:	1a52      	subs	r2, r2, r1
 8008a3c:	00d2      	lsls	r2, r2, #3
 8008a3e:	189b      	adds	r3, r3, r2
 8008a40:	0030      	movs	r0, r6
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	0039      	movs	r1, r7
 8008a48:	f7f8 fd32 	bl	80014b0 <__aeabi_ddiv>
 8008a4c:	e750      	b.n	80088f0 <_strtod_l+0x3a4>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	0030      	movs	r0, r6
 8008a52:	0039      	movs	r1, r7
 8008a54:	4d35      	ldr	r5, [pc, #212]	@ (8008b2c <_strtod_l+0x5e0>)
 8008a56:	1124      	asrs	r4, r4, #4
 8008a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5a:	2c01      	cmp	r4, #1
 8008a5c:	dc1e      	bgt.n	8008a9c <_strtod_l+0x550>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <_strtod_l+0x51a>
 8008a62:	0006      	movs	r6, r0
 8008a64:	000f      	movs	r7, r1
 8008a66:	4b32      	ldr	r3, [pc, #200]	@ (8008b30 <_strtod_l+0x5e4>)
 8008a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a6a:	18ff      	adds	r7, r7, r3
 8008a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <_strtod_l+0x5e0>)
 8008a6e:	00d5      	lsls	r5, r2, #3
 8008a70:	195d      	adds	r5, r3, r5
 8008a72:	0032      	movs	r2, r6
 8008a74:	6828      	ldr	r0, [r5, #0]
 8008a76:	6869      	ldr	r1, [r5, #4]
 8008a78:	003b      	movs	r3, r7
 8008a7a:	f7f9 f95d 	bl	8001d38 <__aeabi_dmul>
 8008a7e:	4b26      	ldr	r3, [pc, #152]	@ (8008b18 <_strtod_l+0x5cc>)
 8008a80:	4a2c      	ldr	r2, [pc, #176]	@ (8008b34 <_strtod_l+0x5e8>)
 8008a82:	0006      	movs	r6, r0
 8008a84:	400b      	ands	r3, r1
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d895      	bhi.n	80089b6 <_strtod_l+0x46a>
 8008a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8008b38 <_strtod_l+0x5ec>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d913      	bls.n	8008ab8 <_strtod_l+0x56c>
 8008a90:	2601      	movs	r6, #1
 8008a92:	4f2a      	ldr	r7, [pc, #168]	@ (8008b3c <_strtod_l+0x5f0>)
 8008a94:	4276      	negs	r6, r6
 8008a96:	2300      	movs	r3, #0
 8008a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a9a:	e086      	b.n	8008baa <_strtod_l+0x65e>
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4214      	tst	r4, r2
 8008aa0:	d004      	beq.n	8008aac <_strtod_l+0x560>
 8008aa2:	682a      	ldr	r2, [r5, #0]
 8008aa4:	686b      	ldr	r3, [r5, #4]
 8008aa6:	f7f9 f947 	bl	8001d38 <__aeabi_dmul>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aae:	1064      	asrs	r4, r4, #1
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ab4:	3508      	adds	r5, #8
 8008ab6:	e7d0      	b.n	8008a5a <_strtod_l+0x50e>
 8008ab8:	23d4      	movs	r3, #212	@ 0xd4
 8008aba:	049b      	lsls	r3, r3, #18
 8008abc:	18cf      	adds	r7, r1, r3
 8008abe:	e7ea      	b.n	8008a96 <_strtod_l+0x54a>
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	d0e8      	beq.n	8008a96 <_strtod_l+0x54a>
 8008ac4:	4264      	negs	r4, r4
 8008ac6:	230f      	movs	r3, #15
 8008ac8:	0022      	movs	r2, r4
 8008aca:	401a      	ands	r2, r3
 8008acc:	421c      	tst	r4, r3
 8008ace:	d00a      	beq.n	8008ae6 <_strtod_l+0x59a>
 8008ad0:	4b15      	ldr	r3, [pc, #84]	@ (8008b28 <_strtod_l+0x5dc>)
 8008ad2:	00d2      	lsls	r2, r2, #3
 8008ad4:	189b      	adds	r3, r3, r2
 8008ad6:	0030      	movs	r0, r6
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	0039      	movs	r1, r7
 8008ade:	f7f8 fce7 	bl	80014b0 <__aeabi_ddiv>
 8008ae2:	0006      	movs	r6, r0
 8008ae4:	000f      	movs	r7, r1
 8008ae6:	1124      	asrs	r4, r4, #4
 8008ae8:	d0d5      	beq.n	8008a96 <_strtod_l+0x54a>
 8008aea:	2c1f      	cmp	r4, #31
 8008aec:	dd28      	ble.n	8008b40 <_strtod_l+0x5f4>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	9307      	str	r3, [sp, #28]
 8008af4:	930d      	str	r3, [sp, #52]	@ 0x34
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	2322      	movs	r3, #34	@ 0x22
 8008afa:	9a05      	ldr	r2, [sp, #20]
 8008afc:	2600      	movs	r6, #0
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b02:	2700      	movs	r7, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d000      	beq.n	8008b0a <_strtod_l+0x5be>
 8008b08:	e763      	b.n	80089d2 <_strtod_l+0x486>
 8008b0a:	e55a      	b.n	80085c2 <_strtod_l+0x76>
 8008b0c:	00004e1f 	.word	0x00004e1f
 8008b10:	0800c1c5 	.word	0x0800c1c5
 8008b14:	0800c1f4 	.word	0x0800c1f4
 8008b18:	7ff00000 	.word	0x7ff00000
 8008b1c:	0800c1bd 	.word	0x0800c1bd
 8008b20:	0800c354 	.word	0x0800c354
 8008b24:	0800c5e3 	.word	0x0800c5e3
 8008b28:	0800c4e0 	.word	0x0800c4e0
 8008b2c:	0800c4b8 	.word	0x0800c4b8
 8008b30:	fcb00000 	.word	0xfcb00000
 8008b34:	7ca00000 	.word	0x7ca00000
 8008b38:	7c900000 	.word	0x7c900000
 8008b3c:	7fefffff 	.word	0x7fefffff
 8008b40:	2310      	movs	r3, #16
 8008b42:	0022      	movs	r2, r4
 8008b44:	401a      	ands	r2, r3
 8008b46:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b48:	421c      	tst	r4, r3
 8008b4a:	d001      	beq.n	8008b50 <_strtod_l+0x604>
 8008b4c:	335a      	adds	r3, #90	@ 0x5a
 8008b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b50:	0030      	movs	r0, r6
 8008b52:	0039      	movs	r1, r7
 8008b54:	2300      	movs	r3, #0
 8008b56:	4dbf      	ldr	r5, [pc, #764]	@ (8008e54 <_strtod_l+0x908>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	4214      	tst	r4, r2
 8008b5c:	d004      	beq.n	8008b68 <_strtod_l+0x61c>
 8008b5e:	682a      	ldr	r2, [r5, #0]
 8008b60:	686b      	ldr	r3, [r5, #4]
 8008b62:	f7f9 f8e9 	bl	8001d38 <__aeabi_dmul>
 8008b66:	2301      	movs	r3, #1
 8008b68:	1064      	asrs	r4, r4, #1
 8008b6a:	3508      	adds	r5, #8
 8008b6c:	2c00      	cmp	r4, #0
 8008b6e:	d1f3      	bne.n	8008b58 <_strtod_l+0x60c>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <_strtod_l+0x62c>
 8008b74:	0006      	movs	r6, r0
 8008b76:	000f      	movs	r7, r1
 8008b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00d      	beq.n	8008b9a <_strtod_l+0x64e>
 8008b7e:	236b      	movs	r3, #107	@ 0x6b
 8008b80:	007a      	lsls	r2, r7, #1
 8008b82:	0d52      	lsrs	r2, r2, #21
 8008b84:	0039      	movs	r1, r7
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dd06      	ble.n	8008b9a <_strtod_l+0x64e>
 8008b8c:	2b1f      	cmp	r3, #31
 8008b8e:	dd5a      	ble.n	8008c46 <_strtod_l+0x6fa>
 8008b90:	2600      	movs	r6, #0
 8008b92:	2b34      	cmp	r3, #52	@ 0x34
 8008b94:	dd50      	ble.n	8008c38 <_strtod_l+0x6ec>
 8008b96:	27dc      	movs	r7, #220	@ 0xdc
 8008b98:	04bf      	lsls	r7, r7, #18
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	0030      	movs	r0, r6
 8008ba0:	0039      	movs	r1, r7
 8008ba2:	f7f7 fc51 	bl	8000448 <__aeabi_dcmpeq>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d1a1      	bne.n	8008aee <_strtod_l+0x5a2>
 8008baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bac:	9a08      	ldr	r2, [sp, #32]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	f002 f99d 	bl	800aef4 <__s2b>
 8008bba:	900d      	str	r0, [sp, #52]	@ 0x34
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d100      	bne.n	8008bc2 <_strtod_l+0x676>
 8008bc0:	e6f9      	b.n	80089b6 <_strtod_l+0x46a>
 8008bc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bc4:	9907      	ldr	r1, [sp, #28]
 8008bc6:	17da      	asrs	r2, r3, #31
 8008bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bca:	1a5b      	subs	r3, r3, r1
 8008bcc:	401a      	ands	r2, r3
 8008bce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bd2:	43db      	mvns	r3, r3
 8008bd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008bd6:	17db      	asrs	r3, r3, #31
 8008bd8:	401a      	ands	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	6859      	ldr	r1, [r3, #4]
 8008be8:	f002 f8d8 	bl	800ad9c <_Balloc>
 8008bec:	9008      	str	r0, [sp, #32]
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d100      	bne.n	8008bf4 <_strtod_l+0x6a8>
 8008bf2:	e6e5      	b.n	80089c0 <_strtod_l+0x474>
 8008bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bf6:	300c      	adds	r0, #12
 8008bf8:	0019      	movs	r1, r3
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	310c      	adds	r1, #12
 8008bfe:	3202      	adds	r2, #2
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	f000 fbfd 	bl	8009400 <memcpy>
 8008c06:	ab20      	add	r3, sp, #128	@ 0x80
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	0032      	movs	r2, r6
 8008c10:	003b      	movs	r3, r7
 8008c12:	9805      	ldr	r0, [sp, #20]
 8008c14:	9610      	str	r6, [sp, #64]	@ 0x40
 8008c16:	9711      	str	r7, [sp, #68]	@ 0x44
 8008c18:	f002 fcbc 	bl	800b594 <__d2b>
 8008c1c:	901e      	str	r0, [sp, #120]	@ 0x78
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d100      	bne.n	8008c24 <_strtod_l+0x6d8>
 8008c22:	e6cd      	b.n	80089c0 <_strtod_l+0x474>
 8008c24:	2101      	movs	r1, #1
 8008c26:	9805      	ldr	r0, [sp, #20]
 8008c28:	f002 fa00 	bl	800b02c <__i2b>
 8008c2c:	9007      	str	r0, [sp, #28]
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d10e      	bne.n	8008c50 <_strtod_l+0x704>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	e6c3      	b.n	80089c0 <_strtod_l+0x474>
 8008c38:	234b      	movs	r3, #75	@ 0x4b
 8008c3a:	1a9a      	subs	r2, r3, r2
 8008c3c:	3b4c      	subs	r3, #76	@ 0x4c
 8008c3e:	4093      	lsls	r3, r2
 8008c40:	4019      	ands	r1, r3
 8008c42:	000f      	movs	r7, r1
 8008c44:	e7a9      	b.n	8008b9a <_strtod_l+0x64e>
 8008c46:	2201      	movs	r2, #1
 8008c48:	4252      	negs	r2, r2
 8008c4a:	409a      	lsls	r2, r3
 8008c4c:	4016      	ands	r6, r2
 8008c4e:	e7a4      	b.n	8008b9a <_strtod_l+0x64e>
 8008c50:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008c52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c54:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008c56:	1ad4      	subs	r4, r2, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	db01      	blt.n	8008c60 <_strtod_l+0x714>
 8008c5c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008c5e:	195d      	adds	r5, r3, r5
 8008c60:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c64:	1a5b      	subs	r3, r3, r1
 8008c66:	2136      	movs	r1, #54	@ 0x36
 8008c68:	189b      	adds	r3, r3, r2
 8008c6a:	1a8a      	subs	r2, r1, r2
 8008c6c:	497a      	ldr	r1, [pc, #488]	@ (8008e58 <_strtod_l+0x90c>)
 8008c6e:	2001      	movs	r0, #1
 8008c70:	468c      	mov	ip, r1
 8008c72:	2100      	movs	r1, #0
 8008c74:	3b01      	subs	r3, #1
 8008c76:	9116      	str	r1, [sp, #88]	@ 0x58
 8008c78:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c7a:	4563      	cmp	r3, ip
 8008c7c:	da06      	bge.n	8008c8c <_strtod_l+0x740>
 8008c7e:	4661      	mov	r1, ip
 8008c80:	1ac9      	subs	r1, r1, r3
 8008c82:	1a52      	subs	r2, r2, r1
 8008c84:	291f      	cmp	r1, #31
 8008c86:	dc3f      	bgt.n	8008d08 <_strtod_l+0x7bc>
 8008c88:	4088      	lsls	r0, r1
 8008c8a:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c8c:	18ab      	adds	r3, r5, r2
 8008c8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c90:	18a4      	adds	r4, r4, r2
 8008c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c96:	191c      	adds	r4, r3, r4
 8008c98:	002b      	movs	r3, r5
 8008c9a:	4295      	cmp	r5, r2
 8008c9c:	dd00      	ble.n	8008ca0 <_strtod_l+0x754>
 8008c9e:	0013      	movs	r3, r2
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	dd00      	ble.n	8008ca6 <_strtod_l+0x75a>
 8008ca4:	0023      	movs	r3, r4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dd04      	ble.n	8008cb4 <_strtod_l+0x768>
 8008caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cac:	1ae4      	subs	r4, r4, r3
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cb2:	1aed      	subs	r5, r5, r3
 8008cb4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd16      	ble.n	8008ce8 <_strtod_l+0x79c>
 8008cba:	001a      	movs	r2, r3
 8008cbc:	9907      	ldr	r1, [sp, #28]
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	f002 fa7e 	bl	800b1c0 <__pow5mult>
 8008cc4:	9007      	str	r0, [sp, #28]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0b3      	beq.n	8008c32 <_strtod_l+0x6e6>
 8008cca:	0001      	movs	r1, r0
 8008ccc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008cce:	9805      	ldr	r0, [sp, #20]
 8008cd0:	f002 f9c4 	bl	800b05c <__multiply>
 8008cd4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d100      	bne.n	8008cdc <_strtod_l+0x790>
 8008cda:	e671      	b.n	80089c0 <_strtod_l+0x474>
 8008cdc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008cde:	9805      	ldr	r0, [sp, #20]
 8008ce0:	f002 f8a0 	bl	800ae24 <_Bfree>
 8008ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ce6:	931e      	str	r3, [sp, #120]	@ 0x78
 8008ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dc12      	bgt.n	8008d14 <_strtod_l+0x7c8>
 8008cee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd18      	ble.n	8008d26 <_strtod_l+0x7da>
 8008cf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cf6:	9908      	ldr	r1, [sp, #32]
 8008cf8:	9805      	ldr	r0, [sp, #20]
 8008cfa:	f002 fa61 	bl	800b1c0 <__pow5mult>
 8008cfe:	9008      	str	r0, [sp, #32]
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d110      	bne.n	8008d26 <_strtod_l+0x7da>
 8008d04:	2300      	movs	r3, #0
 8008d06:	e65a      	b.n	80089be <_strtod_l+0x472>
 8008d08:	4954      	ldr	r1, [pc, #336]	@ (8008e5c <_strtod_l+0x910>)
 8008d0a:	1acb      	subs	r3, r1, r3
 8008d0c:	0001      	movs	r1, r0
 8008d0e:	4099      	lsls	r1, r3
 8008d10:	9116      	str	r1, [sp, #88]	@ 0x58
 8008d12:	e7ba      	b.n	8008c8a <_strtod_l+0x73e>
 8008d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d16:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008d18:	9805      	ldr	r0, [sp, #20]
 8008d1a:	f002 faad 	bl	800b278 <__lshift>
 8008d1e:	901e      	str	r0, [sp, #120]	@ 0x78
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1e4      	bne.n	8008cee <_strtod_l+0x7a2>
 8008d24:	e64c      	b.n	80089c0 <_strtod_l+0x474>
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	dd07      	ble.n	8008d3a <_strtod_l+0x7ee>
 8008d2a:	0022      	movs	r2, r4
 8008d2c:	9908      	ldr	r1, [sp, #32]
 8008d2e:	9805      	ldr	r0, [sp, #20]
 8008d30:	f002 faa2 	bl	800b278 <__lshift>
 8008d34:	9008      	str	r0, [sp, #32]
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d0e4      	beq.n	8008d04 <_strtod_l+0x7b8>
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	dd08      	ble.n	8008d50 <_strtod_l+0x804>
 8008d3e:	002a      	movs	r2, r5
 8008d40:	9907      	ldr	r1, [sp, #28]
 8008d42:	9805      	ldr	r0, [sp, #20]
 8008d44:	f002 fa98 	bl	800b278 <__lshift>
 8008d48:	9007      	str	r0, [sp, #28]
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d100      	bne.n	8008d50 <_strtod_l+0x804>
 8008d4e:	e637      	b.n	80089c0 <_strtod_l+0x474>
 8008d50:	9a08      	ldr	r2, [sp, #32]
 8008d52:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008d54:	9805      	ldr	r0, [sp, #20]
 8008d56:	f002 fb17 	bl	800b388 <__mdiff>
 8008d5a:	9006      	str	r0, [sp, #24]
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d100      	bne.n	8008d62 <_strtod_l+0x816>
 8008d60:	e62e      	b.n	80089c0 <_strtod_l+0x474>
 8008d62:	68c3      	ldr	r3, [r0, #12]
 8008d64:	9907      	ldr	r1, [sp, #28]
 8008d66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60c3      	str	r3, [r0, #12]
 8008d6c:	f002 faf0 	bl	800b350 <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	da3b      	bge.n	8008dec <_strtod_l+0x8a0>
 8008d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d76:	4333      	orrs	r3, r6
 8008d78:	d167      	bne.n	8008e4a <_strtod_l+0x8fe>
 8008d7a:	033b      	lsls	r3, r7, #12
 8008d7c:	d165      	bne.n	8008e4a <_strtod_l+0x8fe>
 8008d7e:	22d6      	movs	r2, #214	@ 0xd6
 8008d80:	4b37      	ldr	r3, [pc, #220]	@ (8008e60 <_strtod_l+0x914>)
 8008d82:	04d2      	lsls	r2, r2, #19
 8008d84:	403b      	ands	r3, r7
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d95f      	bls.n	8008e4a <_strtod_l+0x8fe>
 8008d8a:	9b06      	ldr	r3, [sp, #24]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d103      	bne.n	8008d9a <_strtod_l+0x84e>
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	dd57      	ble.n	8008e4a <_strtod_l+0x8fe>
 8008d9a:	9906      	ldr	r1, [sp, #24]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	9805      	ldr	r0, [sp, #20]
 8008da0:	f002 fa6a 	bl	800b278 <__lshift>
 8008da4:	9907      	ldr	r1, [sp, #28]
 8008da6:	9006      	str	r0, [sp, #24]
 8008da8:	f002 fad2 	bl	800b350 <__mcmp>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	dd4c      	ble.n	8008e4a <_strtod_l+0x8fe>
 8008db0:	4b2b      	ldr	r3, [pc, #172]	@ (8008e60 <_strtod_l+0x914>)
 8008db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db4:	403b      	ands	r3, r7
 8008db6:	2a00      	cmp	r2, #0
 8008db8:	d074      	beq.n	8008ea4 <_strtod_l+0x958>
 8008dba:	22d6      	movs	r2, #214	@ 0xd6
 8008dbc:	04d2      	lsls	r2, r2, #19
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d870      	bhi.n	8008ea4 <_strtod_l+0x958>
 8008dc2:	22dc      	movs	r2, #220	@ 0xdc
 8008dc4:	0492      	lsls	r2, r2, #18
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d800      	bhi.n	8008dcc <_strtod_l+0x880>
 8008dca:	e695      	b.n	8008af8 <_strtod_l+0x5ac>
 8008dcc:	0030      	movs	r0, r6
 8008dce:	0039      	movs	r1, r7
 8008dd0:	4b24      	ldr	r3, [pc, #144]	@ (8008e64 <_strtod_l+0x918>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7f8 ffb0 	bl	8001d38 <__aeabi_dmul>
 8008dd8:	4b21      	ldr	r3, [pc, #132]	@ (8008e60 <_strtod_l+0x914>)
 8008dda:	0006      	movs	r6, r0
 8008ddc:	000f      	movs	r7, r1
 8008dde:	420b      	tst	r3, r1
 8008de0:	d000      	beq.n	8008de4 <_strtod_l+0x898>
 8008de2:	e5f6      	b.n	80089d2 <_strtod_l+0x486>
 8008de4:	2322      	movs	r3, #34	@ 0x22
 8008de6:	9a05      	ldr	r2, [sp, #20]
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	e5f2      	b.n	80089d2 <_strtod_l+0x486>
 8008dec:	970e      	str	r7, [sp, #56]	@ 0x38
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d175      	bne.n	8008ede <_strtod_l+0x992>
 8008df2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008df4:	033b      	lsls	r3, r7, #12
 8008df6:	0b1b      	lsrs	r3, r3, #12
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	d039      	beq.n	8008e70 <_strtod_l+0x924>
 8008dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e68 <_strtod_l+0x91c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d138      	bne.n	8008e74 <_strtod_l+0x928>
 8008e02:	2101      	movs	r1, #1
 8008e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e06:	4249      	negs	r1, r1
 8008e08:	0032      	movs	r2, r6
 8008e0a:	0008      	movs	r0, r1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <_strtod_l+0x8dc>
 8008e10:	24d4      	movs	r4, #212	@ 0xd4
 8008e12:	4b13      	ldr	r3, [pc, #76]	@ (8008e60 <_strtod_l+0x914>)
 8008e14:	0008      	movs	r0, r1
 8008e16:	403b      	ands	r3, r7
 8008e18:	04e4      	lsls	r4, r4, #19
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	d804      	bhi.n	8008e28 <_strtod_l+0x8dc>
 8008e1e:	306c      	adds	r0, #108	@ 0x6c
 8008e20:	0d1b      	lsrs	r3, r3, #20
 8008e22:	1ac3      	subs	r3, r0, r3
 8008e24:	4099      	lsls	r1, r3
 8008e26:	0008      	movs	r0, r1
 8008e28:	4282      	cmp	r2, r0
 8008e2a:	d123      	bne.n	8008e74 <_strtod_l+0x928>
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e6c <_strtod_l+0x920>)
 8008e2e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d102      	bne.n	8008e3a <_strtod_l+0x8ee>
 8008e34:	3201      	adds	r2, #1
 8008e36:	d100      	bne.n	8008e3a <_strtod_l+0x8ee>
 8008e38:	e5c2      	b.n	80089c0 <_strtod_l+0x474>
 8008e3a:	4b09      	ldr	r3, [pc, #36]	@ (8008e60 <_strtod_l+0x914>)
 8008e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e3e:	2600      	movs	r6, #0
 8008e40:	401a      	ands	r2, r3
 8008e42:	0013      	movs	r3, r2
 8008e44:	2280      	movs	r2, #128	@ 0x80
 8008e46:	0352      	lsls	r2, r2, #13
 8008e48:	189f      	adds	r7, r3, r2
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1bd      	bne.n	8008dcc <_strtod_l+0x880>
 8008e50:	e5bf      	b.n	80089d2 <_strtod_l+0x486>
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	0800c220 	.word	0x0800c220
 8008e58:	fffffc02 	.word	0xfffffc02
 8008e5c:	fffffbe2 	.word	0xfffffbe2
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	39500000 	.word	0x39500000
 8008e68:	000fffff 	.word	0x000fffff
 8008e6c:	7fefffff 	.word	0x7fefffff
 8008e70:	4333      	orrs	r3, r6
 8008e72:	d09d      	beq.n	8008db0 <_strtod_l+0x864>
 8008e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01c      	beq.n	8008eb4 <_strtod_l+0x968>
 8008e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e7e:	4213      	tst	r3, r2
 8008e80:	d0e3      	beq.n	8008e4a <_strtod_l+0x8fe>
 8008e82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e84:	0030      	movs	r0, r6
 8008e86:	0039      	movs	r1, r7
 8008e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d016      	beq.n	8008ebc <_strtod_l+0x970>
 8008e8e:	f7ff fb45 	bl	800851c <sulp>
 8008e92:	0002      	movs	r2, r0
 8008e94:	000b      	movs	r3, r1
 8008e96:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008e98:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008e9a:	f7f7 ffa5 	bl	8000de8 <__aeabi_dadd>
 8008e9e:	0006      	movs	r6, r0
 8008ea0:	000f      	movs	r7, r1
 8008ea2:	e7d2      	b.n	8008e4a <_strtod_l+0x8fe>
 8008ea4:	2601      	movs	r6, #1
 8008ea6:	4a92      	ldr	r2, [pc, #584]	@ (80090f0 <_strtod_l+0xba4>)
 8008ea8:	4276      	negs	r6, r6
 8008eaa:	189b      	adds	r3, r3, r2
 8008eac:	4a91      	ldr	r2, [pc, #580]	@ (80090f4 <_strtod_l+0xba8>)
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	0017      	movs	r7, r2
 8008eb2:	e7ca      	b.n	8008e4a <_strtod_l+0x8fe>
 8008eb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008eb6:	4233      	tst	r3, r6
 8008eb8:	d0c7      	beq.n	8008e4a <_strtod_l+0x8fe>
 8008eba:	e7e2      	b.n	8008e82 <_strtod_l+0x936>
 8008ebc:	f7ff fb2e 	bl	800851c <sulp>
 8008ec0:	0002      	movs	r2, r0
 8008ec2:	000b      	movs	r3, r1
 8008ec4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008ec6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008ec8:	f7f9 f9fe 	bl	80022c8 <__aeabi_dsub>
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	0006      	movs	r6, r0
 8008ed2:	000f      	movs	r7, r1
 8008ed4:	f7f7 fab8 	bl	8000448 <__aeabi_dcmpeq>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0b6      	beq.n	8008e4a <_strtod_l+0x8fe>
 8008edc:	e60c      	b.n	8008af8 <_strtod_l+0x5ac>
 8008ede:	9907      	ldr	r1, [sp, #28]
 8008ee0:	9806      	ldr	r0, [sp, #24]
 8008ee2:	f002 fbb7 	bl	800b654 <__ratio>
 8008ee6:	2380      	movs	r3, #128	@ 0x80
 8008ee8:	2200      	movs	r2, #0
 8008eea:	05db      	lsls	r3, r3, #23
 8008eec:	0004      	movs	r4, r0
 8008eee:	000d      	movs	r5, r1
 8008ef0:	f7f7 faba 	bl	8000468 <__aeabi_dcmple>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d06c      	beq.n	8008fd2 <_strtod_l+0xa86>
 8008ef8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d177      	bne.n	8008fee <_strtod_l+0xaa2>
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d157      	bne.n	8008fb2 <_strtod_l+0xa66>
 8008f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f04:	031b      	lsls	r3, r3, #12
 8008f06:	d15a      	bne.n	8008fbe <_strtod_l+0xa72>
 8008f08:	2200      	movs	r2, #0
 8008f0a:	0020      	movs	r0, r4
 8008f0c:	0029      	movs	r1, r5
 8008f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80090f8 <_strtod_l+0xbac>)
 8008f10:	f7f7 faa0 	bl	8000454 <__aeabi_dcmplt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d159      	bne.n	8008fcc <_strtod_l+0xa80>
 8008f18:	0020      	movs	r0, r4
 8008f1a:	0029      	movs	r1, r5
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	4b77      	ldr	r3, [pc, #476]	@ (80090fc <_strtod_l+0xbb0>)
 8008f20:	f7f8 ff0a 	bl	8001d38 <__aeabi_dmul>
 8008f24:	0004      	movs	r4, r0
 8008f26:	000d      	movs	r5, r1
 8008f28:	2380      	movs	r3, #128	@ 0x80
 8008f2a:	061b      	lsls	r3, r3, #24
 8008f2c:	18eb      	adds	r3, r5, r3
 8008f2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f36:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f38:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f3a:	4a71      	ldr	r2, [pc, #452]	@ (8009100 <_strtod_l+0xbb4>)
 8008f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f3e:	4013      	ands	r3, r2
 8008f40:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f44:	4b6f      	ldr	r3, [pc, #444]	@ (8009104 <_strtod_l+0xbb8>)
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d000      	beq.n	8008f4c <_strtod_l+0xa00>
 8008f4a:	e087      	b.n	800905c <_strtod_l+0xb10>
 8008f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8009108 <_strtod_l+0xbbc>)
 8008f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f50:	4694      	mov	ip, r2
 8008f52:	4463      	add	r3, ip
 8008f54:	001f      	movs	r7, r3
 8008f56:	0030      	movs	r0, r6
 8008f58:	0019      	movs	r1, r3
 8008f5a:	f002 faaf 	bl	800b4bc <__ulp>
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f62:	f7f8 fee9 	bl	8001d38 <__aeabi_dmul>
 8008f66:	0032      	movs	r2, r6
 8008f68:	003b      	movs	r3, r7
 8008f6a:	f7f7 ff3d 	bl	8000de8 <__aeabi_dadd>
 8008f6e:	4a64      	ldr	r2, [pc, #400]	@ (8009100 <_strtod_l+0xbb4>)
 8008f70:	4b66      	ldr	r3, [pc, #408]	@ (800910c <_strtod_l+0xbc0>)
 8008f72:	0006      	movs	r6, r0
 8008f74:	400a      	ands	r2, r1
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d940      	bls.n	8008ffc <_strtod_l+0xab0>
 8008f7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f7c:	4a64      	ldr	r2, [pc, #400]	@ (8009110 <_strtod_l+0xbc4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d103      	bne.n	8008f8a <_strtod_l+0xa3e>
 8008f82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f84:	3301      	adds	r3, #1
 8008f86:	d100      	bne.n	8008f8a <_strtod_l+0xa3e>
 8008f88:	e51a      	b.n	80089c0 <_strtod_l+0x474>
 8008f8a:	2601      	movs	r6, #1
 8008f8c:	4f60      	ldr	r7, [pc, #384]	@ (8009110 <_strtod_l+0xbc4>)
 8008f8e:	4276      	negs	r6, r6
 8008f90:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008f92:	9805      	ldr	r0, [sp, #20]
 8008f94:	f001 ff46 	bl	800ae24 <_Bfree>
 8008f98:	9908      	ldr	r1, [sp, #32]
 8008f9a:	9805      	ldr	r0, [sp, #20]
 8008f9c:	f001 ff42 	bl	800ae24 <_Bfree>
 8008fa0:	9907      	ldr	r1, [sp, #28]
 8008fa2:	9805      	ldr	r0, [sp, #20]
 8008fa4:	f001 ff3e 	bl	800ae24 <_Bfree>
 8008fa8:	9906      	ldr	r1, [sp, #24]
 8008faa:	9805      	ldr	r0, [sp, #20]
 8008fac:	f001 ff3a 	bl	800ae24 <_Bfree>
 8008fb0:	e617      	b.n	8008be2 <_strtod_l+0x696>
 8008fb2:	2e01      	cmp	r6, #1
 8008fb4:	d103      	bne.n	8008fbe <_strtod_l+0xa72>
 8008fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d100      	bne.n	8008fbe <_strtod_l+0xa72>
 8008fbc:	e59c      	b.n	8008af8 <_strtod_l+0x5ac>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	4c54      	ldr	r4, [pc, #336]	@ (8009114 <_strtod_l+0xbc8>)
 8008fc2:	4d4d      	ldr	r5, [pc, #308]	@ (80090f8 <_strtod_l+0xbac>)
 8008fc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fc8:	2400      	movs	r4, #0
 8008fca:	e7b2      	b.n	8008f32 <_strtod_l+0x9e6>
 8008fcc:	2400      	movs	r4, #0
 8008fce:	4d4b      	ldr	r5, [pc, #300]	@ (80090fc <_strtod_l+0xbb0>)
 8008fd0:	e7aa      	b.n	8008f28 <_strtod_l+0x9dc>
 8008fd2:	0020      	movs	r0, r4
 8008fd4:	0029      	movs	r1, r5
 8008fd6:	4b49      	ldr	r3, [pc, #292]	@ (80090fc <_strtod_l+0xbb0>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f7f8 fead 	bl	8001d38 <__aeabi_dmul>
 8008fde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fe0:	0004      	movs	r4, r0
 8008fe2:	000d      	movs	r5, r1
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d09f      	beq.n	8008f28 <_strtod_l+0x9dc>
 8008fe8:	940a      	str	r4, [sp, #40]	@ 0x28
 8008fea:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008fec:	e7a1      	b.n	8008f32 <_strtod_l+0x9e6>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4c41      	ldr	r4, [pc, #260]	@ (80090f8 <_strtod_l+0xbac>)
 8008ff2:	0025      	movs	r5, r4
 8008ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ff6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff8:	001c      	movs	r4, r3
 8008ffa:	e79a      	b.n	8008f32 <_strtod_l+0x9e6>
 8008ffc:	23d4      	movs	r3, #212	@ 0xd4
 8008ffe:	049b      	lsls	r3, r3, #18
 8009000:	18cf      	adds	r7, r1, r3
 8009002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009004:	9710      	str	r7, [sp, #64]	@ 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1c2      	bne.n	8008f90 <_strtod_l+0xa44>
 800900a:	4b3d      	ldr	r3, [pc, #244]	@ (8009100 <_strtod_l+0xbb4>)
 800900c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800900e:	403b      	ands	r3, r7
 8009010:	429a      	cmp	r2, r3
 8009012:	d1bd      	bne.n	8008f90 <_strtod_l+0xa44>
 8009014:	0020      	movs	r0, r4
 8009016:	0029      	movs	r1, r5
 8009018:	f7f7 fa62 	bl	80004e0 <__aeabi_d2lz>
 800901c:	f7f7 fa9a 	bl	8000554 <__aeabi_l2d>
 8009020:	0002      	movs	r2, r0
 8009022:	000b      	movs	r3, r1
 8009024:	0020      	movs	r0, r4
 8009026:	0029      	movs	r1, r5
 8009028:	f7f9 f94e 	bl	80022c8 <__aeabi_dsub>
 800902c:	033c      	lsls	r4, r7, #12
 800902e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009030:	0b24      	lsrs	r4, r4, #12
 8009032:	4334      	orrs	r4, r6
 8009034:	900e      	str	r0, [sp, #56]	@ 0x38
 8009036:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009038:	4a37      	ldr	r2, [pc, #220]	@ (8009118 <_strtod_l+0xbcc>)
 800903a:	431c      	orrs	r4, r3
 800903c:	d052      	beq.n	80090e4 <_strtod_l+0xb98>
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <_strtod_l+0xbd0>)
 8009040:	f7f7 fa08 	bl	8000454 <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d000      	beq.n	800904a <_strtod_l+0xafe>
 8009048:	e4c3      	b.n	80089d2 <_strtod_l+0x486>
 800904a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800904c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800904e:	4a34      	ldr	r2, [pc, #208]	@ (8009120 <_strtod_l+0xbd4>)
 8009050:	4b2a      	ldr	r3, [pc, #168]	@ (80090fc <_strtod_l+0xbb0>)
 8009052:	f7f7 fa13 	bl	800047c <__aeabi_dcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d09a      	beq.n	8008f90 <_strtod_l+0xa44>
 800905a:	e4ba      	b.n	80089d2 <_strtod_l+0x486>
 800905c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d02a      	beq.n	80090b8 <_strtod_l+0xb6c>
 8009062:	23d4      	movs	r3, #212	@ 0xd4
 8009064:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009066:	04db      	lsls	r3, r3, #19
 8009068:	429a      	cmp	r2, r3
 800906a:	d825      	bhi.n	80090b8 <_strtod_l+0xb6c>
 800906c:	0020      	movs	r0, r4
 800906e:	0029      	movs	r1, r5
 8009070:	4a2c      	ldr	r2, [pc, #176]	@ (8009124 <_strtod_l+0xbd8>)
 8009072:	4b2d      	ldr	r3, [pc, #180]	@ (8009128 <_strtod_l+0xbdc>)
 8009074:	f7f7 f9f8 	bl	8000468 <__aeabi_dcmple>
 8009078:	2800      	cmp	r0, #0
 800907a:	d016      	beq.n	80090aa <_strtod_l+0xb5e>
 800907c:	0020      	movs	r0, r4
 800907e:	0029      	movs	r1, r5
 8009080:	f7f7 fa10 	bl	80004a4 <__aeabi_d2uiz>
 8009084:	2800      	cmp	r0, #0
 8009086:	d100      	bne.n	800908a <_strtod_l+0xb3e>
 8009088:	3001      	adds	r0, #1
 800908a:	f7f9 fd45 	bl	8002b18 <__aeabi_ui2d>
 800908e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009090:	0004      	movs	r4, r0
 8009092:	000d      	movs	r5, r1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d122      	bne.n	80090de <_strtod_l+0xb92>
 8009098:	2380      	movs	r3, #128	@ 0x80
 800909a:	061b      	lsls	r3, r3, #24
 800909c:	18cb      	adds	r3, r1, r3
 800909e:	9018      	str	r0, [sp, #96]	@ 0x60
 80090a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80090a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80090a8:	9315      	str	r3, [sp, #84]	@ 0x54
 80090aa:	22d6      	movs	r2, #214	@ 0xd6
 80090ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80090ae:	04d2      	lsls	r2, r2, #19
 80090b0:	189b      	adds	r3, r3, r2
 80090b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80090b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80090ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80090bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80090be:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80090c0:	f002 f9fc 	bl	800b4bc <__ulp>
 80090c4:	0002      	movs	r2, r0
 80090c6:	000b      	movs	r3, r1
 80090c8:	0030      	movs	r0, r6
 80090ca:	0039      	movs	r1, r7
 80090cc:	f7f8 fe34 	bl	8001d38 <__aeabi_dmul>
 80090d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80090d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090d4:	f7f7 fe88 	bl	8000de8 <__aeabi_dadd>
 80090d8:	0006      	movs	r6, r0
 80090da:	000f      	movs	r7, r1
 80090dc:	e791      	b.n	8009002 <_strtod_l+0xab6>
 80090de:	9418      	str	r4, [sp, #96]	@ 0x60
 80090e0:	9519      	str	r5, [sp, #100]	@ 0x64
 80090e2:	e7de      	b.n	80090a2 <_strtod_l+0xb56>
 80090e4:	4b11      	ldr	r3, [pc, #68]	@ (800912c <_strtod_l+0xbe0>)
 80090e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80090e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090ea:	f7f7 f9b3 	bl	8000454 <__aeabi_dcmplt>
 80090ee:	e7b2      	b.n	8009056 <_strtod_l+0xb0a>
 80090f0:	fff00000 	.word	0xfff00000
 80090f4:	000fffff 	.word	0x000fffff
 80090f8:	3ff00000 	.word	0x3ff00000
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	7ff00000 	.word	0x7ff00000
 8009104:	7fe00000 	.word	0x7fe00000
 8009108:	fcb00000 	.word	0xfcb00000
 800910c:	7c9fffff 	.word	0x7c9fffff
 8009110:	7fefffff 	.word	0x7fefffff
 8009114:	bff00000 	.word	0xbff00000
 8009118:	94a03595 	.word	0x94a03595
 800911c:	3fdfffff 	.word	0x3fdfffff
 8009120:	35afe535 	.word	0x35afe535
 8009124:	ffc00000 	.word	0xffc00000
 8009128:	41dfffff 	.word	0x41dfffff
 800912c:	3fcfffff 	.word	0x3fcfffff

08009130 <_strtod_r>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4b02      	ldr	r3, [pc, #8]	@ (800913c <_strtod_r+0xc>)
 8009134:	f7ff fa0a 	bl	800854c <_strtod_l>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	46c0      	nop			@ (mov r8, r8)
 800913c:	20000018 	.word	0x20000018

08009140 <_strtol_l.constprop.0>:
 8009140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009142:	b085      	sub	sp, #20
 8009144:	0017      	movs	r7, r2
 8009146:	001e      	movs	r6, r3
 8009148:	9003      	str	r0, [sp, #12]
 800914a:	9101      	str	r1, [sp, #4]
 800914c:	2b24      	cmp	r3, #36	@ 0x24
 800914e:	d844      	bhi.n	80091da <_strtol_l.constprop.0+0x9a>
 8009150:	000c      	movs	r4, r1
 8009152:	2b01      	cmp	r3, #1
 8009154:	d041      	beq.n	80091da <_strtol_l.constprop.0+0x9a>
 8009156:	4b3d      	ldr	r3, [pc, #244]	@ (800924c <_strtol_l.constprop.0+0x10c>)
 8009158:	2208      	movs	r2, #8
 800915a:	469c      	mov	ip, r3
 800915c:	0023      	movs	r3, r4
 800915e:	4661      	mov	r1, ip
 8009160:	781d      	ldrb	r5, [r3, #0]
 8009162:	3401      	adds	r4, #1
 8009164:	5d48      	ldrb	r0, [r1, r5]
 8009166:	0001      	movs	r1, r0
 8009168:	4011      	ands	r1, r2
 800916a:	4210      	tst	r0, r2
 800916c:	d1f6      	bne.n	800915c <_strtol_l.constprop.0+0x1c>
 800916e:	2d2d      	cmp	r5, #45	@ 0x2d
 8009170:	d13a      	bne.n	80091e8 <_strtol_l.constprop.0+0xa8>
 8009172:	7825      	ldrb	r5, [r4, #0]
 8009174:	1c9c      	adds	r4, r3, #2
 8009176:	2301      	movs	r3, #1
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	2210      	movs	r2, #16
 800917c:	0033      	movs	r3, r6
 800917e:	4393      	bics	r3, r2
 8009180:	d109      	bne.n	8009196 <_strtol_l.constprop.0+0x56>
 8009182:	2d30      	cmp	r5, #48	@ 0x30
 8009184:	d136      	bne.n	80091f4 <_strtol_l.constprop.0+0xb4>
 8009186:	2120      	movs	r1, #32
 8009188:	7823      	ldrb	r3, [r4, #0]
 800918a:	438b      	bics	r3, r1
 800918c:	2b58      	cmp	r3, #88	@ 0x58
 800918e:	d131      	bne.n	80091f4 <_strtol_l.constprop.0+0xb4>
 8009190:	0016      	movs	r6, r2
 8009192:	7865      	ldrb	r5, [r4, #1]
 8009194:	3402      	adds	r4, #2
 8009196:	4a2e      	ldr	r2, [pc, #184]	@ (8009250 <_strtol_l.constprop.0+0x110>)
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	4694      	mov	ip, r2
 800919c:	4463      	add	r3, ip
 800919e:	0031      	movs	r1, r6
 80091a0:	0018      	movs	r0, r3
 80091a2:	9302      	str	r3, [sp, #8]
 80091a4:	f7f7 f850 	bl	8000248 <__aeabi_uidivmod>
 80091a8:	2200      	movs	r2, #0
 80091aa:	4684      	mov	ip, r0
 80091ac:	0010      	movs	r0, r2
 80091ae:	002b      	movs	r3, r5
 80091b0:	3b30      	subs	r3, #48	@ 0x30
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d825      	bhi.n	8009202 <_strtol_l.constprop.0+0xc2>
 80091b6:	001d      	movs	r5, r3
 80091b8:	42ae      	cmp	r6, r5
 80091ba:	dd31      	ble.n	8009220 <_strtol_l.constprop.0+0xe0>
 80091bc:	1c53      	adds	r3, r2, #1
 80091be:	d009      	beq.n	80091d4 <_strtol_l.constprop.0+0x94>
 80091c0:	2201      	movs	r2, #1
 80091c2:	4252      	negs	r2, r2
 80091c4:	4584      	cmp	ip, r0
 80091c6:	d305      	bcc.n	80091d4 <_strtol_l.constprop.0+0x94>
 80091c8:	d101      	bne.n	80091ce <_strtol_l.constprop.0+0x8e>
 80091ca:	42a9      	cmp	r1, r5
 80091cc:	db25      	blt.n	800921a <_strtol_l.constprop.0+0xda>
 80091ce:	2201      	movs	r2, #1
 80091d0:	4370      	muls	r0, r6
 80091d2:	1828      	adds	r0, r5, r0
 80091d4:	7825      	ldrb	r5, [r4, #0]
 80091d6:	3401      	adds	r4, #1
 80091d8:	e7e9      	b.n	80091ae <_strtol_l.constprop.0+0x6e>
 80091da:	f000 f8d9 	bl	8009390 <__errno>
 80091de:	2316      	movs	r3, #22
 80091e0:	6003      	str	r3, [r0, #0]
 80091e2:	2000      	movs	r0, #0
 80091e4:	b005      	add	sp, #20
 80091e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e8:	9100      	str	r1, [sp, #0]
 80091ea:	2d2b      	cmp	r5, #43	@ 0x2b
 80091ec:	d1c5      	bne.n	800917a <_strtol_l.constprop.0+0x3a>
 80091ee:	7825      	ldrb	r5, [r4, #0]
 80091f0:	1c9c      	adds	r4, r3, #2
 80091f2:	e7c2      	b.n	800917a <_strtol_l.constprop.0+0x3a>
 80091f4:	2e00      	cmp	r6, #0
 80091f6:	d1ce      	bne.n	8009196 <_strtol_l.constprop.0+0x56>
 80091f8:	3608      	adds	r6, #8
 80091fa:	2d30      	cmp	r5, #48	@ 0x30
 80091fc:	d0cb      	beq.n	8009196 <_strtol_l.constprop.0+0x56>
 80091fe:	3602      	adds	r6, #2
 8009200:	e7c9      	b.n	8009196 <_strtol_l.constprop.0+0x56>
 8009202:	002b      	movs	r3, r5
 8009204:	3b41      	subs	r3, #65	@ 0x41
 8009206:	2b19      	cmp	r3, #25
 8009208:	d801      	bhi.n	800920e <_strtol_l.constprop.0+0xce>
 800920a:	3d37      	subs	r5, #55	@ 0x37
 800920c:	e7d4      	b.n	80091b8 <_strtol_l.constprop.0+0x78>
 800920e:	002b      	movs	r3, r5
 8009210:	3b61      	subs	r3, #97	@ 0x61
 8009212:	2b19      	cmp	r3, #25
 8009214:	d804      	bhi.n	8009220 <_strtol_l.constprop.0+0xe0>
 8009216:	3d57      	subs	r5, #87	@ 0x57
 8009218:	e7ce      	b.n	80091b8 <_strtol_l.constprop.0+0x78>
 800921a:	2201      	movs	r2, #1
 800921c:	4252      	negs	r2, r2
 800921e:	e7d9      	b.n	80091d4 <_strtol_l.constprop.0+0x94>
 8009220:	1c53      	adds	r3, r2, #1
 8009222:	d108      	bne.n	8009236 <_strtol_l.constprop.0+0xf6>
 8009224:	2322      	movs	r3, #34	@ 0x22
 8009226:	9a03      	ldr	r2, [sp, #12]
 8009228:	9802      	ldr	r0, [sp, #8]
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	2f00      	cmp	r7, #0
 800922e:	d0d9      	beq.n	80091e4 <_strtol_l.constprop.0+0xa4>
 8009230:	1e63      	subs	r3, r4, #1
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	e007      	b.n	8009246 <_strtol_l.constprop.0+0x106>
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d000      	beq.n	800923e <_strtol_l.constprop.0+0xfe>
 800923c:	4240      	negs	r0, r0
 800923e:	2f00      	cmp	r7, #0
 8009240:	d0d0      	beq.n	80091e4 <_strtol_l.constprop.0+0xa4>
 8009242:	2a00      	cmp	r2, #0
 8009244:	d1f4      	bne.n	8009230 <_strtol_l.constprop.0+0xf0>
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	603b      	str	r3, [r7, #0]
 800924a:	e7cb      	b.n	80091e4 <_strtol_l.constprop.0+0xa4>
 800924c:	0800c251 	.word	0x0800c251
 8009250:	7fffffff 	.word	0x7fffffff

08009254 <_strtol_r>:
 8009254:	b510      	push	{r4, lr}
 8009256:	f7ff ff73 	bl	8009140 <_strtol_l.constprop.0>
 800925a:	bd10      	pop	{r4, pc}

0800925c <_fwalk_sglue>:
 800925c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800925e:	0014      	movs	r4, r2
 8009260:	2600      	movs	r6, #0
 8009262:	9000      	str	r0, [sp, #0]
 8009264:	9101      	str	r1, [sp, #4]
 8009266:	68a5      	ldr	r5, [r4, #8]
 8009268:	6867      	ldr	r7, [r4, #4]
 800926a:	3f01      	subs	r7, #1
 800926c:	d504      	bpl.n	8009278 <_fwalk_sglue+0x1c>
 800926e:	6824      	ldr	r4, [r4, #0]
 8009270:	2c00      	cmp	r4, #0
 8009272:	d1f8      	bne.n	8009266 <_fwalk_sglue+0xa>
 8009274:	0030      	movs	r0, r6
 8009276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009278:	89ab      	ldrh	r3, [r5, #12]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d908      	bls.n	8009290 <_fwalk_sglue+0x34>
 800927e:	220e      	movs	r2, #14
 8009280:	5eab      	ldrsh	r3, [r5, r2]
 8009282:	3301      	adds	r3, #1
 8009284:	d004      	beq.n	8009290 <_fwalk_sglue+0x34>
 8009286:	0029      	movs	r1, r5
 8009288:	9800      	ldr	r0, [sp, #0]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	4798      	blx	r3
 800928e:	4306      	orrs	r6, r0
 8009290:	3568      	adds	r5, #104	@ 0x68
 8009292:	e7ea      	b.n	800926a <_fwalk_sglue+0xe>

08009294 <_puts_r>:
 8009294:	6a03      	ldr	r3, [r0, #32]
 8009296:	b570      	push	{r4, r5, r6, lr}
 8009298:	0005      	movs	r5, r0
 800929a:	000e      	movs	r6, r1
 800929c:	6884      	ldr	r4, [r0, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <_puts_r+0x12>
 80092a2:	f7ff f923 	bl	80084ec <__sinit>
 80092a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092a8:	07db      	lsls	r3, r3, #31
 80092aa:	d405      	bmi.n	80092b8 <_puts_r+0x24>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	059b      	lsls	r3, r3, #22
 80092b0:	d402      	bmi.n	80092b8 <_puts_r+0x24>
 80092b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092b4:	f000 f897 	bl	80093e6 <__retarget_lock_acquire_recursive>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	071b      	lsls	r3, r3, #28
 80092bc:	d502      	bpl.n	80092c4 <_puts_r+0x30>
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11f      	bne.n	8009304 <_puts_r+0x70>
 80092c4:	0021      	movs	r1, r4
 80092c6:	0028      	movs	r0, r5
 80092c8:	f002 faf0 	bl	800b8ac <__swsetup_r>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d019      	beq.n	8009304 <_puts_r+0x70>
 80092d0:	2501      	movs	r5, #1
 80092d2:	426d      	negs	r5, r5
 80092d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d405      	bmi.n	80092e6 <_puts_r+0x52>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	059b      	lsls	r3, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_puts_r+0x52>
 80092e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092e2:	f000 f881 	bl	80093e8 <__retarget_lock_release_recursive>
 80092e6:	0028      	movs	r0, r5
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	3601      	adds	r6, #1
 80092ec:	60a3      	str	r3, [r4, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da04      	bge.n	80092fc <_puts_r+0x68>
 80092f2:	69a2      	ldr	r2, [r4, #24]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	dc16      	bgt.n	8009326 <_puts_r+0x92>
 80092f8:	290a      	cmp	r1, #10
 80092fa:	d014      	beq.n	8009326 <_puts_r+0x92>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	7019      	strb	r1, [r3, #0]
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	7831      	ldrb	r1, [r6, #0]
 8009308:	3b01      	subs	r3, #1
 800930a:	2900      	cmp	r1, #0
 800930c:	d1ed      	bne.n	80092ea <_puts_r+0x56>
 800930e:	60a3      	str	r3, [r4, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	da0f      	bge.n	8009334 <_puts_r+0xa0>
 8009314:	0022      	movs	r2, r4
 8009316:	0028      	movs	r0, r5
 8009318:	310a      	adds	r1, #10
 800931a:	f002 fa84 	bl	800b826 <__swbuf_r>
 800931e:	3001      	adds	r0, #1
 8009320:	d0d6      	beq.n	80092d0 <_puts_r+0x3c>
 8009322:	250a      	movs	r5, #10
 8009324:	e7d6      	b.n	80092d4 <_puts_r+0x40>
 8009326:	0022      	movs	r2, r4
 8009328:	0028      	movs	r0, r5
 800932a:	f002 fa7c 	bl	800b826 <__swbuf_r>
 800932e:	3001      	adds	r0, #1
 8009330:	d1e8      	bne.n	8009304 <_puts_r+0x70>
 8009332:	e7cd      	b.n	80092d0 <_puts_r+0x3c>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	6022      	str	r2, [r4, #0]
 800933a:	220a      	movs	r2, #10
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	e7f0      	b.n	8009322 <_puts_r+0x8e>

08009340 <puts>:
 8009340:	b510      	push	{r4, lr}
 8009342:	4b03      	ldr	r3, [pc, #12]	@ (8009350 <puts+0x10>)
 8009344:	0001      	movs	r1, r0
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	f7ff ffa4 	bl	8009294 <_puts_r>
 800934c:	bd10      	pop	{r4, pc}
 800934e:	46c0      	nop			@ (mov r8, r8)
 8009350:	20000184 	.word	0x20000184

08009354 <strncmp>:
 8009354:	b530      	push	{r4, r5, lr}
 8009356:	0005      	movs	r5, r0
 8009358:	1e10      	subs	r0, r2, #0
 800935a:	d00b      	beq.n	8009374 <strncmp+0x20>
 800935c:	2400      	movs	r4, #0
 800935e:	3a01      	subs	r2, #1
 8009360:	5d2b      	ldrb	r3, [r5, r4]
 8009362:	5d08      	ldrb	r0, [r1, r4]
 8009364:	4283      	cmp	r3, r0
 8009366:	d104      	bne.n	8009372 <strncmp+0x1e>
 8009368:	42a2      	cmp	r2, r4
 800936a:	d002      	beq.n	8009372 <strncmp+0x1e>
 800936c:	3401      	adds	r4, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f6      	bne.n	8009360 <strncmp+0xc>
 8009372:	1a18      	subs	r0, r3, r0
 8009374:	bd30      	pop	{r4, r5, pc}

08009376 <memset>:
 8009376:	0003      	movs	r3, r0
 8009378:	1882      	adds	r2, r0, r2
 800937a:	4293      	cmp	r3, r2
 800937c:	d100      	bne.n	8009380 <memset+0xa>
 800937e:	4770      	bx	lr
 8009380:	7019      	strb	r1, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	e7f9      	b.n	800937a <memset+0x4>
	...

08009388 <_localeconv_r>:
 8009388:	4800      	ldr	r0, [pc, #0]	@ (800938c <_localeconv_r+0x4>)
 800938a:	4770      	bx	lr
 800938c:	20000108 	.word	0x20000108

08009390 <__errno>:
 8009390:	4b01      	ldr	r3, [pc, #4]	@ (8009398 <__errno+0x8>)
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	4770      	bx	lr
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	20000184 	.word	0x20000184

0800939c <__libc_init_array>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	2600      	movs	r6, #0
 80093a0:	4c0c      	ldr	r4, [pc, #48]	@ (80093d4 <__libc_init_array+0x38>)
 80093a2:	4d0d      	ldr	r5, [pc, #52]	@ (80093d8 <__libc_init_array+0x3c>)
 80093a4:	1b64      	subs	r4, r4, r5
 80093a6:	10a4      	asrs	r4, r4, #2
 80093a8:	42a6      	cmp	r6, r4
 80093aa:	d109      	bne.n	80093c0 <__libc_init_array+0x24>
 80093ac:	2600      	movs	r6, #0
 80093ae:	f002 fe2d 	bl	800c00c <_init>
 80093b2:	4c0a      	ldr	r4, [pc, #40]	@ (80093dc <__libc_init_array+0x40>)
 80093b4:	4d0a      	ldr	r5, [pc, #40]	@ (80093e0 <__libc_init_array+0x44>)
 80093b6:	1b64      	subs	r4, r4, r5
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	42a6      	cmp	r6, r4
 80093bc:	d105      	bne.n	80093ca <__libc_init_array+0x2e>
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	00b3      	lsls	r3, r6, #2
 80093c2:	58eb      	ldr	r3, [r5, r3]
 80093c4:	4798      	blx	r3
 80093c6:	3601      	adds	r6, #1
 80093c8:	e7ee      	b.n	80093a8 <__libc_init_array+0xc>
 80093ca:	00b3      	lsls	r3, r6, #2
 80093cc:	58eb      	ldr	r3, [r5, r3]
 80093ce:	4798      	blx	r3
 80093d0:	3601      	adds	r6, #1
 80093d2:	e7f2      	b.n	80093ba <__libc_init_array+0x1e>
 80093d4:	0800c5e4 	.word	0x0800c5e4
 80093d8:	0800c5e4 	.word	0x0800c5e4
 80093dc:	0800c5e8 	.word	0x0800c5e8
 80093e0:	0800c5e4 	.word	0x0800c5e4

080093e4 <__retarget_lock_init_recursive>:
 80093e4:	4770      	bx	lr

080093e6 <__retarget_lock_acquire_recursive>:
 80093e6:	4770      	bx	lr

080093e8 <__retarget_lock_release_recursive>:
 80093e8:	4770      	bx	lr

080093ea <memchr>:
 80093ea:	b2c9      	uxtb	r1, r1
 80093ec:	1882      	adds	r2, r0, r2
 80093ee:	4290      	cmp	r0, r2
 80093f0:	d101      	bne.n	80093f6 <memchr+0xc>
 80093f2:	2000      	movs	r0, #0
 80093f4:	4770      	bx	lr
 80093f6:	7803      	ldrb	r3, [r0, #0]
 80093f8:	428b      	cmp	r3, r1
 80093fa:	d0fb      	beq.n	80093f4 <memchr+0xa>
 80093fc:	3001      	adds	r0, #1
 80093fe:	e7f6      	b.n	80093ee <memchr+0x4>

08009400 <memcpy>:
 8009400:	2300      	movs	r3, #0
 8009402:	b510      	push	{r4, lr}
 8009404:	429a      	cmp	r2, r3
 8009406:	d100      	bne.n	800940a <memcpy+0xa>
 8009408:	bd10      	pop	{r4, pc}
 800940a:	5ccc      	ldrb	r4, [r1, r3]
 800940c:	54c4      	strb	r4, [r0, r3]
 800940e:	3301      	adds	r3, #1
 8009410:	e7f8      	b.n	8009404 <memcpy+0x4>
	...

08009414 <nan>:
 8009414:	2000      	movs	r0, #0
 8009416:	4901      	ldr	r1, [pc, #4]	@ (800941c <nan+0x8>)
 8009418:	4770      	bx	lr
 800941a:	46c0      	nop			@ (mov r8, r8)
 800941c:	7ff80000 	.word	0x7ff80000

08009420 <nanf>:
 8009420:	4800      	ldr	r0, [pc, #0]	@ (8009424 <nanf+0x4>)
 8009422:	4770      	bx	lr
 8009424:	7fc00000 	.word	0x7fc00000

08009428 <quorem>:
 8009428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942a:	6902      	ldr	r2, [r0, #16]
 800942c:	690f      	ldr	r7, [r1, #16]
 800942e:	b087      	sub	sp, #28
 8009430:	0006      	movs	r6, r0
 8009432:	000b      	movs	r3, r1
 8009434:	2000      	movs	r0, #0
 8009436:	9102      	str	r1, [sp, #8]
 8009438:	42ba      	cmp	r2, r7
 800943a:	db6d      	blt.n	8009518 <quorem+0xf0>
 800943c:	3f01      	subs	r7, #1
 800943e:	00bc      	lsls	r4, r7, #2
 8009440:	3314      	adds	r3, #20
 8009442:	9305      	str	r3, [sp, #20]
 8009444:	191b      	adds	r3, r3, r4
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	0033      	movs	r3, r6
 800944a:	3314      	adds	r3, #20
 800944c:	191c      	adds	r4, r3, r4
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	9804      	ldr	r0, [sp, #16]
 8009458:	681d      	ldr	r5, [r3, #0]
 800945a:	3501      	adds	r5, #1
 800945c:	0029      	movs	r1, r5
 800945e:	f7f6 fe6d 	bl	800013c <__udivsi3>
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	9000      	str	r0, [sp, #0]
 8009466:	42ab      	cmp	r3, r5
 8009468:	d32b      	bcc.n	80094c2 <quorem+0x9a>
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	9d01      	ldr	r5, [sp, #4]
 800946e:	469c      	mov	ip, r3
 8009470:	2300      	movs	r3, #0
 8009472:	9305      	str	r3, [sp, #20]
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4662      	mov	r2, ip
 8009478:	ca08      	ldmia	r2!, {r3}
 800947a:	6828      	ldr	r0, [r5, #0]
 800947c:	4694      	mov	ip, r2
 800947e:	9a00      	ldr	r2, [sp, #0]
 8009480:	b299      	uxth	r1, r3
 8009482:	4351      	muls	r1, r2
 8009484:	9a05      	ldr	r2, [sp, #20]
 8009486:	0c1b      	lsrs	r3, r3, #16
 8009488:	1889      	adds	r1, r1, r2
 800948a:	9a00      	ldr	r2, [sp, #0]
 800948c:	4353      	muls	r3, r2
 800948e:	0c0a      	lsrs	r2, r1, #16
 8009490:	189b      	adds	r3, r3, r2
 8009492:	0c1a      	lsrs	r2, r3, #16
 8009494:	b289      	uxth	r1, r1
 8009496:	9205      	str	r2, [sp, #20]
 8009498:	b282      	uxth	r2, r0
 800949a:	1a52      	subs	r2, r2, r1
 800949c:	9904      	ldr	r1, [sp, #16]
 800949e:	0c00      	lsrs	r0, r0, #16
 80094a0:	1852      	adds	r2, r2, r1
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	1411      	asrs	r1, r2, #16
 80094a6:	1ac3      	subs	r3, r0, r3
 80094a8:	185b      	adds	r3, r3, r1
 80094aa:	1419      	asrs	r1, r3, #16
 80094ac:	b292      	uxth	r2, r2
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	431a      	orrs	r2, r3
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	9104      	str	r1, [sp, #16]
 80094b6:	c504      	stmia	r5!, {r2}
 80094b8:	4563      	cmp	r3, ip
 80094ba:	d2dc      	bcs.n	8009476 <quorem+0x4e>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d030      	beq.n	8009524 <quorem+0xfc>
 80094c2:	0030      	movs	r0, r6
 80094c4:	9902      	ldr	r1, [sp, #8]
 80094c6:	f001 ff43 	bl	800b350 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	db23      	blt.n	8009516 <quorem+0xee>
 80094ce:	0034      	movs	r4, r6
 80094d0:	2500      	movs	r5, #0
 80094d2:	9902      	ldr	r1, [sp, #8]
 80094d4:	3414      	adds	r4, #20
 80094d6:	3114      	adds	r1, #20
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	c901      	ldmia	r1!, {r0}
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	466b      	mov	r3, sp
 80094e0:	891b      	ldrh	r3, [r3, #8]
 80094e2:	b282      	uxth	r2, r0
 80094e4:	1a9a      	subs	r2, r3, r2
 80094e6:	9b02      	ldr	r3, [sp, #8]
 80094e8:	1952      	adds	r2, r2, r5
 80094ea:	0c00      	lsrs	r0, r0, #16
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	1a1b      	subs	r3, r3, r0
 80094f0:	1410      	asrs	r0, r2, #16
 80094f2:	181b      	adds	r3, r3, r0
 80094f4:	141d      	asrs	r5, r3, #16
 80094f6:	b292      	uxth	r2, r2
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	431a      	orrs	r2, r3
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	c404      	stmia	r4!, {r2}
 8009500:	428b      	cmp	r3, r1
 8009502:	d2e9      	bcs.n	80094d8 <quorem+0xb0>
 8009504:	9a01      	ldr	r2, [sp, #4]
 8009506:	00bb      	lsls	r3, r7, #2
 8009508:	18d3      	adds	r3, r2, r3
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	2a00      	cmp	r2, #0
 800950e:	d013      	beq.n	8009538 <quorem+0x110>
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	3301      	adds	r3, #1
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	9800      	ldr	r0, [sp, #0]
 8009518:	b007      	add	sp, #28
 800951a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <quorem+0x104>
 8009522:	3f01      	subs	r7, #1
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	3c04      	subs	r4, #4
 8009528:	42a3      	cmp	r3, r4
 800952a:	d3f7      	bcc.n	800951c <quorem+0xf4>
 800952c:	6137      	str	r7, [r6, #16]
 800952e:	e7c8      	b.n	80094c2 <quorem+0x9a>
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	2a00      	cmp	r2, #0
 8009534:	d104      	bne.n	8009540 <quorem+0x118>
 8009536:	3f01      	subs	r7, #1
 8009538:	9a01      	ldr	r2, [sp, #4]
 800953a:	3b04      	subs	r3, #4
 800953c:	429a      	cmp	r2, r3
 800953e:	d3f7      	bcc.n	8009530 <quorem+0x108>
 8009540:	6137      	str	r7, [r6, #16]
 8009542:	e7e5      	b.n	8009510 <quorem+0xe8>

08009544 <_dtoa_r>:
 8009544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009546:	0014      	movs	r4, r2
 8009548:	001d      	movs	r5, r3
 800954a:	69c6      	ldr	r6, [r0, #28]
 800954c:	b09d      	sub	sp, #116	@ 0x74
 800954e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009550:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009552:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009554:	9003      	str	r0, [sp, #12]
 8009556:	2e00      	cmp	r6, #0
 8009558:	d10f      	bne.n	800957a <_dtoa_r+0x36>
 800955a:	2010      	movs	r0, #16
 800955c:	f001 fa9e 	bl	800aa9c <malloc>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	1e02      	subs	r2, r0, #0
 8009564:	61d8      	str	r0, [r3, #28]
 8009566:	d104      	bne.n	8009572 <_dtoa_r+0x2e>
 8009568:	21ef      	movs	r1, #239	@ 0xef
 800956a:	4bc7      	ldr	r3, [pc, #796]	@ (8009888 <_dtoa_r+0x344>)
 800956c:	48c7      	ldr	r0, [pc, #796]	@ (800988c <_dtoa_r+0x348>)
 800956e:	f002 fb0b 	bl	800bb88 <__assert_func>
 8009572:	6046      	str	r6, [r0, #4]
 8009574:	6086      	str	r6, [r0, #8]
 8009576:	6006      	str	r6, [r0, #0]
 8009578:	60c6      	str	r6, [r0, #12]
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	2900      	cmp	r1, #0
 8009582:	d00b      	beq.n	800959c <_dtoa_r+0x58>
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	2301      	movs	r3, #1
 8009588:	4093      	lsls	r3, r2
 800958a:	604a      	str	r2, [r1, #4]
 800958c:	608b      	str	r3, [r1, #8]
 800958e:	9803      	ldr	r0, [sp, #12]
 8009590:	f001 fc48 	bl	800ae24 <_Bfree>
 8009594:	2200      	movs	r2, #0
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	2d00      	cmp	r5, #0
 800959e:	da1e      	bge.n	80095de <_dtoa_r+0x9a>
 80095a0:	2301      	movs	r3, #1
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	006b      	lsls	r3, r5, #1
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80095ac:	4bb8      	ldr	r3, [pc, #736]	@ (8009890 <_dtoa_r+0x34c>)
 80095ae:	4ab8      	ldr	r2, [pc, #736]	@ (8009890 <_dtoa_r+0x34c>)
 80095b0:	403b      	ands	r3, r7
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d116      	bne.n	80095e4 <_dtoa_r+0xa0>
 80095b6:	4bb7      	ldr	r3, [pc, #732]	@ (8009894 <_dtoa_r+0x350>)
 80095b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	033b      	lsls	r3, r7, #12
 80095be:	0b1b      	lsrs	r3, r3, #12
 80095c0:	4323      	orrs	r3, r4
 80095c2:	d101      	bne.n	80095c8 <_dtoa_r+0x84>
 80095c4:	f000 fd83 	bl	800a0ce <_dtoa_r+0xb8a>
 80095c8:	4bb3      	ldr	r3, [pc, #716]	@ (8009898 <_dtoa_r+0x354>)
 80095ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80095cc:	9308      	str	r3, [sp, #32]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	d002      	beq.n	80095d8 <_dtoa_r+0x94>
 80095d2:	4bb2      	ldr	r3, [pc, #712]	@ (800989c <_dtoa_r+0x358>)
 80095d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	9808      	ldr	r0, [sp, #32]
 80095da:	b01d      	add	sp, #116	@ 0x74
 80095dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095de:	2300      	movs	r3, #0
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	e7e2      	b.n	80095aa <_dtoa_r+0x66>
 80095e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80095ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80095ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	f7f6 ff28 	bl	8000448 <__aeabi_dcmpeq>
 80095f8:	1e06      	subs	r6, r0, #0
 80095fa:	d00b      	beq.n	8009614 <_dtoa_r+0xd0>
 80095fc:	2301      	movs	r3, #1
 80095fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <_dtoa_r+0xca>
 8009608:	4ba5      	ldr	r3, [pc, #660]	@ (80098a0 <_dtoa_r+0x35c>)
 800960a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	4ba5      	ldr	r3, [pc, #660]	@ (80098a4 <_dtoa_r+0x360>)
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	e7e1      	b.n	80095d8 <_dtoa_r+0x94>
 8009614:	ab1a      	add	r3, sp, #104	@ 0x68
 8009616:	9301      	str	r3, [sp, #4]
 8009618:	ab1b      	add	r3, sp, #108	@ 0x6c
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	9803      	ldr	r0, [sp, #12]
 800961e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009620:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009622:	f001 ffb7 	bl	800b594 <__d2b>
 8009626:	007a      	lsls	r2, r7, #1
 8009628:	9005      	str	r0, [sp, #20]
 800962a:	0d52      	lsrs	r2, r2, #21
 800962c:	d100      	bne.n	8009630 <_dtoa_r+0xec>
 800962e:	e07b      	b.n	8009728 <_dtoa_r+0x1e4>
 8009630:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009632:	9618      	str	r6, [sp, #96]	@ 0x60
 8009634:	0319      	lsls	r1, r3, #12
 8009636:	4b9c      	ldr	r3, [pc, #624]	@ (80098a8 <_dtoa_r+0x364>)
 8009638:	0b09      	lsrs	r1, r1, #12
 800963a:	430b      	orrs	r3, r1
 800963c:	499b      	ldr	r1, [pc, #620]	@ (80098ac <_dtoa_r+0x368>)
 800963e:	1857      	adds	r7, r2, r1
 8009640:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009642:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009644:	0019      	movs	r1, r3
 8009646:	2200      	movs	r2, #0
 8009648:	4b99      	ldr	r3, [pc, #612]	@ (80098b0 <_dtoa_r+0x36c>)
 800964a:	f7f8 fe3d 	bl	80022c8 <__aeabi_dsub>
 800964e:	4a99      	ldr	r2, [pc, #612]	@ (80098b4 <_dtoa_r+0x370>)
 8009650:	4b99      	ldr	r3, [pc, #612]	@ (80098b8 <_dtoa_r+0x374>)
 8009652:	f7f8 fb71 	bl	8001d38 <__aeabi_dmul>
 8009656:	4a99      	ldr	r2, [pc, #612]	@ (80098bc <_dtoa_r+0x378>)
 8009658:	4b99      	ldr	r3, [pc, #612]	@ (80098c0 <_dtoa_r+0x37c>)
 800965a:	f7f7 fbc5 	bl	8000de8 <__aeabi_dadd>
 800965e:	0004      	movs	r4, r0
 8009660:	0038      	movs	r0, r7
 8009662:	000d      	movs	r5, r1
 8009664:	f7f9 fa2a 	bl	8002abc <__aeabi_i2d>
 8009668:	4a96      	ldr	r2, [pc, #600]	@ (80098c4 <_dtoa_r+0x380>)
 800966a:	4b97      	ldr	r3, [pc, #604]	@ (80098c8 <_dtoa_r+0x384>)
 800966c:	f7f8 fb64 	bl	8001d38 <__aeabi_dmul>
 8009670:	0002      	movs	r2, r0
 8009672:	000b      	movs	r3, r1
 8009674:	0020      	movs	r0, r4
 8009676:	0029      	movs	r1, r5
 8009678:	f7f7 fbb6 	bl	8000de8 <__aeabi_dadd>
 800967c:	0004      	movs	r4, r0
 800967e:	000d      	movs	r5, r1
 8009680:	f7f9 f9e0 	bl	8002a44 <__aeabi_d2iz>
 8009684:	2200      	movs	r2, #0
 8009686:	9004      	str	r0, [sp, #16]
 8009688:	2300      	movs	r3, #0
 800968a:	0020      	movs	r0, r4
 800968c:	0029      	movs	r1, r5
 800968e:	f7f6 fee1 	bl	8000454 <__aeabi_dcmplt>
 8009692:	2800      	cmp	r0, #0
 8009694:	d00b      	beq.n	80096ae <_dtoa_r+0x16a>
 8009696:	9804      	ldr	r0, [sp, #16]
 8009698:	f7f9 fa10 	bl	8002abc <__aeabi_i2d>
 800969c:	002b      	movs	r3, r5
 800969e:	0022      	movs	r2, r4
 80096a0:	f7f6 fed2 	bl	8000448 <__aeabi_dcmpeq>
 80096a4:	4243      	negs	r3, r0
 80096a6:	4158      	adcs	r0, r3
 80096a8:	9b04      	ldr	r3, [sp, #16]
 80096aa:	1a1b      	subs	r3, r3, r0
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	2301      	movs	r3, #1
 80096b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80096b2:	9b04      	ldr	r3, [sp, #16]
 80096b4:	2b16      	cmp	r3, #22
 80096b6:	d810      	bhi.n	80096da <_dtoa_r+0x196>
 80096b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80096ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80096bc:	9a04      	ldr	r2, [sp, #16]
 80096be:	4b83      	ldr	r3, [pc, #524]	@ (80098cc <_dtoa_r+0x388>)
 80096c0:	00d2      	lsls	r2, r2, #3
 80096c2:	189b      	adds	r3, r3, r2
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f7f6 fec4 	bl	8000454 <__aeabi_dcmplt>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d047      	beq.n	8009760 <_dtoa_r+0x21c>
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	2300      	movs	r3, #0
 80096d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80096da:	2200      	movs	r2, #0
 80096dc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80096de:	9206      	str	r2, [sp, #24]
 80096e0:	1bdb      	subs	r3, r3, r7
 80096e2:	1e5a      	subs	r2, r3, #1
 80096e4:	d53e      	bpl.n	8009764 <_dtoa_r+0x220>
 80096e6:	2201      	movs	r2, #1
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	9306      	str	r3, [sp, #24]
 80096ec:	2300      	movs	r3, #0
 80096ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80096f0:	9b04      	ldr	r3, [sp, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	db38      	blt.n	8009768 <_dtoa_r+0x224>
 80096f6:	9a04      	ldr	r2, [sp, #16]
 80096f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096fa:	4694      	mov	ip, r2
 80096fc:	4463      	add	r3, ip
 80096fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009700:	2300      	movs	r3, #0
 8009702:	9214      	str	r2, [sp, #80]	@ 0x50
 8009704:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009706:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009708:	2401      	movs	r4, #1
 800970a:	2b09      	cmp	r3, #9
 800970c:	d867      	bhi.n	80097de <_dtoa_r+0x29a>
 800970e:	2b05      	cmp	r3, #5
 8009710:	dd02      	ble.n	8009718 <_dtoa_r+0x1d4>
 8009712:	2400      	movs	r4, #0
 8009714:	3b04      	subs	r3, #4
 8009716:	9322      	str	r3, [sp, #136]	@ 0x88
 8009718:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800971a:	1e98      	subs	r0, r3, #2
 800971c:	2803      	cmp	r0, #3
 800971e:	d867      	bhi.n	80097f0 <_dtoa_r+0x2ac>
 8009720:	f7f6 fcf8 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009724:	5b383a2b 	.word	0x5b383a2b
 8009728:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800972a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800972c:	18f6      	adds	r6, r6, r3
 800972e:	4b68      	ldr	r3, [pc, #416]	@ (80098d0 <_dtoa_r+0x38c>)
 8009730:	18f2      	adds	r2, r6, r3
 8009732:	2a20      	cmp	r2, #32
 8009734:	dd0f      	ble.n	8009756 <_dtoa_r+0x212>
 8009736:	2340      	movs	r3, #64	@ 0x40
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	409f      	lsls	r7, r3
 800973c:	4b65      	ldr	r3, [pc, #404]	@ (80098d4 <_dtoa_r+0x390>)
 800973e:	0038      	movs	r0, r7
 8009740:	18f3      	adds	r3, r6, r3
 8009742:	40dc      	lsrs	r4, r3
 8009744:	4320      	orrs	r0, r4
 8009746:	f7f9 f9e7 	bl	8002b18 <__aeabi_ui2d>
 800974a:	2201      	movs	r2, #1
 800974c:	4b62      	ldr	r3, [pc, #392]	@ (80098d8 <_dtoa_r+0x394>)
 800974e:	1e77      	subs	r7, r6, #1
 8009750:	18cb      	adds	r3, r1, r3
 8009752:	9218      	str	r2, [sp, #96]	@ 0x60
 8009754:	e776      	b.n	8009644 <_dtoa_r+0x100>
 8009756:	2320      	movs	r3, #32
 8009758:	0020      	movs	r0, r4
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	4098      	lsls	r0, r3
 800975e:	e7f2      	b.n	8009746 <_dtoa_r+0x202>
 8009760:	9015      	str	r0, [sp, #84]	@ 0x54
 8009762:	e7ba      	b.n	80096da <_dtoa_r+0x196>
 8009764:	920d      	str	r2, [sp, #52]	@ 0x34
 8009766:	e7c3      	b.n	80096f0 <_dtoa_r+0x1ac>
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	9a04      	ldr	r2, [sp, #16]
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	9306      	str	r3, [sp, #24]
 8009770:	4253      	negs	r3, r2
 8009772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009774:	2300      	movs	r3, #0
 8009776:	9314      	str	r3, [sp, #80]	@ 0x50
 8009778:	e7c5      	b.n	8009706 <_dtoa_r+0x1c2>
 800977a:	2300      	movs	r3, #0
 800977c:	9310      	str	r3, [sp, #64]	@ 0x40
 800977e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009780:	930e      	str	r3, [sp, #56]	@ 0x38
 8009782:	9309      	str	r3, [sp, #36]	@ 0x24
 8009784:	2b00      	cmp	r3, #0
 8009786:	dc13      	bgt.n	80097b0 <_dtoa_r+0x26c>
 8009788:	2301      	movs	r3, #1
 800978a:	001a      	movs	r2, r3
 800978c:	930e      	str	r3, [sp, #56]	@ 0x38
 800978e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009790:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009792:	e00d      	b.n	80097b0 <_dtoa_r+0x26c>
 8009794:	2301      	movs	r3, #1
 8009796:	e7f1      	b.n	800977c <_dtoa_r+0x238>
 8009798:	2300      	movs	r3, #0
 800979a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800979c:	9310      	str	r3, [sp, #64]	@ 0x40
 800979e:	4694      	mov	ip, r2
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	4463      	add	r3, ip
 80097a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80097a6:	3301      	adds	r3, #1
 80097a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dc00      	bgt.n	80097b0 <_dtoa_r+0x26c>
 80097ae:	2301      	movs	r3, #1
 80097b0:	9a03      	ldr	r2, [sp, #12]
 80097b2:	2100      	movs	r1, #0
 80097b4:	69d0      	ldr	r0, [r2, #28]
 80097b6:	2204      	movs	r2, #4
 80097b8:	0015      	movs	r5, r2
 80097ba:	3514      	adds	r5, #20
 80097bc:	429d      	cmp	r5, r3
 80097be:	d91b      	bls.n	80097f8 <_dtoa_r+0x2b4>
 80097c0:	6041      	str	r1, [r0, #4]
 80097c2:	9803      	ldr	r0, [sp, #12]
 80097c4:	f001 faea 	bl	800ad9c <_Balloc>
 80097c8:	9008      	str	r0, [sp, #32]
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d117      	bne.n	80097fe <_dtoa_r+0x2ba>
 80097ce:	21b0      	movs	r1, #176	@ 0xb0
 80097d0:	4b42      	ldr	r3, [pc, #264]	@ (80098dc <_dtoa_r+0x398>)
 80097d2:	482e      	ldr	r0, [pc, #184]	@ (800988c <_dtoa_r+0x348>)
 80097d4:	9a08      	ldr	r2, [sp, #32]
 80097d6:	31ff      	adds	r1, #255	@ 0xff
 80097d8:	e6c9      	b.n	800956e <_dtoa_r+0x2a>
 80097da:	2301      	movs	r3, #1
 80097dc:	e7dd      	b.n	800979a <_dtoa_r+0x256>
 80097de:	2300      	movs	r3, #0
 80097e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80097e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80097e4:	3b01      	subs	r3, #1
 80097e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80097e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ea:	2200      	movs	r2, #0
 80097ec:	3313      	adds	r3, #19
 80097ee:	e7cf      	b.n	8009790 <_dtoa_r+0x24c>
 80097f0:	2301      	movs	r3, #1
 80097f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80097f4:	3b02      	subs	r3, #2
 80097f6:	e7f6      	b.n	80097e6 <_dtoa_r+0x2a2>
 80097f8:	3101      	adds	r1, #1
 80097fa:	0052      	lsls	r2, r2, #1
 80097fc:	e7dc      	b.n	80097b8 <_dtoa_r+0x274>
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	9a08      	ldr	r2, [sp, #32]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009808:	2b0e      	cmp	r3, #14
 800980a:	d900      	bls.n	800980e <_dtoa_r+0x2ca>
 800980c:	e0d9      	b.n	80099c2 <_dtoa_r+0x47e>
 800980e:	2c00      	cmp	r4, #0
 8009810:	d100      	bne.n	8009814 <_dtoa_r+0x2d0>
 8009812:	e0d6      	b.n	80099c2 <_dtoa_r+0x47e>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	dd64      	ble.n	80098e4 <_dtoa_r+0x3a0>
 800981a:	210f      	movs	r1, #15
 800981c:	9a04      	ldr	r2, [sp, #16]
 800981e:	4b2b      	ldr	r3, [pc, #172]	@ (80098cc <_dtoa_r+0x388>)
 8009820:	400a      	ands	r2, r1
 8009822:	00d2      	lsls	r2, r2, #3
 8009824:	189b      	adds	r3, r3, r2
 8009826:	681e      	ldr	r6, [r3, #0]
 8009828:	685f      	ldr	r7, [r3, #4]
 800982a:	9b04      	ldr	r3, [sp, #16]
 800982c:	2402      	movs	r4, #2
 800982e:	111d      	asrs	r5, r3, #4
 8009830:	05db      	lsls	r3, r3, #23
 8009832:	d50a      	bpl.n	800984a <_dtoa_r+0x306>
 8009834:	4b2a      	ldr	r3, [pc, #168]	@ (80098e0 <_dtoa_r+0x39c>)
 8009836:	400d      	ands	r5, r1
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800983e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009840:	f7f7 fe36 	bl	80014b0 <__aeabi_ddiv>
 8009844:	900a      	str	r0, [sp, #40]	@ 0x28
 8009846:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009848:	3401      	adds	r4, #1
 800984a:	4b25      	ldr	r3, [pc, #148]	@ (80098e0 <_dtoa_r+0x39c>)
 800984c:	930c      	str	r3, [sp, #48]	@ 0x30
 800984e:	2d00      	cmp	r5, #0
 8009850:	d108      	bne.n	8009864 <_dtoa_r+0x320>
 8009852:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009854:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009856:	0032      	movs	r2, r6
 8009858:	003b      	movs	r3, r7
 800985a:	f7f7 fe29 	bl	80014b0 <__aeabi_ddiv>
 800985e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009860:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009862:	e05a      	b.n	800991a <_dtoa_r+0x3d6>
 8009864:	2301      	movs	r3, #1
 8009866:	421d      	tst	r5, r3
 8009868:	d009      	beq.n	800987e <_dtoa_r+0x33a>
 800986a:	18e4      	adds	r4, r4, r3
 800986c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800986e:	0030      	movs	r0, r6
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	0039      	movs	r1, r7
 8009876:	f7f8 fa5f 	bl	8001d38 <__aeabi_dmul>
 800987a:	0006      	movs	r6, r0
 800987c:	000f      	movs	r7, r1
 800987e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009880:	106d      	asrs	r5, r5, #1
 8009882:	3308      	adds	r3, #8
 8009884:	e7e2      	b.n	800984c <_dtoa_r+0x308>
 8009886:	46c0      	nop			@ (mov r8, r8)
 8009888:	0800c35e 	.word	0x0800c35e
 800988c:	0800c375 	.word	0x0800c375
 8009890:	7ff00000 	.word	0x7ff00000
 8009894:	0000270f 	.word	0x0000270f
 8009898:	0800c35a 	.word	0x0800c35a
 800989c:	0800c35d 	.word	0x0800c35d
 80098a0:	0800c1c9 	.word	0x0800c1c9
 80098a4:	0800c1c8 	.word	0x0800c1c8
 80098a8:	3ff00000 	.word	0x3ff00000
 80098ac:	fffffc01 	.word	0xfffffc01
 80098b0:	3ff80000 	.word	0x3ff80000
 80098b4:	636f4361 	.word	0x636f4361
 80098b8:	3fd287a7 	.word	0x3fd287a7
 80098bc:	8b60c8b3 	.word	0x8b60c8b3
 80098c0:	3fc68a28 	.word	0x3fc68a28
 80098c4:	509f79fb 	.word	0x509f79fb
 80098c8:	3fd34413 	.word	0x3fd34413
 80098cc:	0800c4e0 	.word	0x0800c4e0
 80098d0:	00000432 	.word	0x00000432
 80098d4:	00000412 	.word	0x00000412
 80098d8:	fe100000 	.word	0xfe100000
 80098dc:	0800c3cd 	.word	0x0800c3cd
 80098e0:	0800c4b8 	.word	0x0800c4b8
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	2402      	movs	r4, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d016      	beq.n	800991a <_dtoa_r+0x3d6>
 80098ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80098ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80098f0:	220f      	movs	r2, #15
 80098f2:	425d      	negs	r5, r3
 80098f4:	402a      	ands	r2, r5
 80098f6:	4bd7      	ldr	r3, [pc, #860]	@ (8009c54 <_dtoa_r+0x710>)
 80098f8:	00d2      	lsls	r2, r2, #3
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f7f8 fa1a 	bl	8001d38 <__aeabi_dmul>
 8009904:	2701      	movs	r7, #1
 8009906:	2300      	movs	r3, #0
 8009908:	900a      	str	r0, [sp, #40]	@ 0x28
 800990a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800990c:	4ed2      	ldr	r6, [pc, #840]	@ (8009c58 <_dtoa_r+0x714>)
 800990e:	112d      	asrs	r5, r5, #4
 8009910:	2d00      	cmp	r5, #0
 8009912:	d000      	beq.n	8009916 <_dtoa_r+0x3d2>
 8009914:	e0ba      	b.n	8009a8c <_dtoa_r+0x548>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1a1      	bne.n	800985e <_dtoa_r+0x31a>
 800991a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800991c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800991e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	d100      	bne.n	8009926 <_dtoa_r+0x3e2>
 8009924:	e0bd      	b.n	8009aa2 <_dtoa_r+0x55e>
 8009926:	2200      	movs	r2, #0
 8009928:	0030      	movs	r0, r6
 800992a:	0039      	movs	r1, r7
 800992c:	4bcb      	ldr	r3, [pc, #812]	@ (8009c5c <_dtoa_r+0x718>)
 800992e:	f7f6 fd91 	bl	8000454 <__aeabi_dcmplt>
 8009932:	2800      	cmp	r0, #0
 8009934:	d100      	bne.n	8009938 <_dtoa_r+0x3f4>
 8009936:	e0b4      	b.n	8009aa2 <_dtoa_r+0x55e>
 8009938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	d100      	bne.n	8009940 <_dtoa_r+0x3fc>
 800993e:	e0b0      	b.n	8009aa2 <_dtoa_r+0x55e>
 8009940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009942:	2b00      	cmp	r3, #0
 8009944:	dd39      	ble.n	80099ba <_dtoa_r+0x476>
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	2200      	movs	r2, #0
 800994a:	3b01      	subs	r3, #1
 800994c:	930c      	str	r3, [sp, #48]	@ 0x30
 800994e:	0030      	movs	r0, r6
 8009950:	4bc3      	ldr	r3, [pc, #780]	@ (8009c60 <_dtoa_r+0x71c>)
 8009952:	0039      	movs	r1, r7
 8009954:	f7f8 f9f0 	bl	8001d38 <__aeabi_dmul>
 8009958:	900a      	str	r0, [sp, #40]	@ 0x28
 800995a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800995c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800995e:	3401      	adds	r4, #1
 8009960:	0020      	movs	r0, r4
 8009962:	9311      	str	r3, [sp, #68]	@ 0x44
 8009964:	f7f9 f8aa 	bl	8002abc <__aeabi_i2d>
 8009968:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800996a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800996c:	f7f8 f9e4 	bl	8001d38 <__aeabi_dmul>
 8009970:	4bbc      	ldr	r3, [pc, #752]	@ (8009c64 <_dtoa_r+0x720>)
 8009972:	2200      	movs	r2, #0
 8009974:	f7f7 fa38 	bl	8000de8 <__aeabi_dadd>
 8009978:	4bbb      	ldr	r3, [pc, #748]	@ (8009c68 <_dtoa_r+0x724>)
 800997a:	0006      	movs	r6, r0
 800997c:	18cf      	adds	r7, r1, r3
 800997e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009980:	2b00      	cmp	r3, #0
 8009982:	d000      	beq.n	8009986 <_dtoa_r+0x442>
 8009984:	e091      	b.n	8009aaa <_dtoa_r+0x566>
 8009986:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800998a:	2200      	movs	r2, #0
 800998c:	4bb7      	ldr	r3, [pc, #732]	@ (8009c6c <_dtoa_r+0x728>)
 800998e:	f7f8 fc9b 	bl	80022c8 <__aeabi_dsub>
 8009992:	0032      	movs	r2, r6
 8009994:	003b      	movs	r3, r7
 8009996:	0004      	movs	r4, r0
 8009998:	000d      	movs	r5, r1
 800999a:	f7f6 fd6f 	bl	800047c <__aeabi_dcmpgt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d000      	beq.n	80099a4 <_dtoa_r+0x460>
 80099a2:	e29d      	b.n	8009ee0 <_dtoa_r+0x99c>
 80099a4:	2180      	movs	r1, #128	@ 0x80
 80099a6:	0609      	lsls	r1, r1, #24
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	0032      	movs	r2, r6
 80099ac:	0020      	movs	r0, r4
 80099ae:	0029      	movs	r1, r5
 80099b0:	f7f6 fd50 	bl	8000454 <__aeabi_dcmplt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d000      	beq.n	80099ba <_dtoa_r+0x476>
 80099b8:	e130      	b.n	8009c1c <_dtoa_r+0x6d8>
 80099ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80099be:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099c2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da00      	bge.n	80099ca <_dtoa_r+0x486>
 80099c8:	e177      	b.n	8009cba <_dtoa_r+0x776>
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	2a0e      	cmp	r2, #14
 80099ce:	dd00      	ble.n	80099d2 <_dtoa_r+0x48e>
 80099d0:	e173      	b.n	8009cba <_dtoa_r+0x776>
 80099d2:	4ba0      	ldr	r3, [pc, #640]	@ (8009c54 <_dtoa_r+0x710>)
 80099d4:	00d2      	lsls	r2, r2, #3
 80099d6:	189b      	adds	r3, r3, r2
 80099d8:	685c      	ldr	r4, [r3, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9306      	str	r3, [sp, #24]
 80099de:	9407      	str	r4, [sp, #28]
 80099e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da03      	bge.n	80099ee <_dtoa_r+0x4aa>
 80099e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc00      	bgt.n	80099ee <_dtoa_r+0x4aa>
 80099ec:	e106      	b.n	8009bfc <_dtoa_r+0x6b8>
 80099ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80099f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f4:	9d08      	ldr	r5, [sp, #32]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	195b      	adds	r3, r3, r5
 80099fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80099fc:	9a06      	ldr	r2, [sp, #24]
 80099fe:	9b07      	ldr	r3, [sp, #28]
 8009a00:	0030      	movs	r0, r6
 8009a02:	0039      	movs	r1, r7
 8009a04:	f7f7 fd54 	bl	80014b0 <__aeabi_ddiv>
 8009a08:	f7f9 f81c 	bl	8002a44 <__aeabi_d2iz>
 8009a0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a0e:	f7f9 f855 	bl	8002abc <__aeabi_i2d>
 8009a12:	9a06      	ldr	r2, [sp, #24]
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	f7f8 f98f 	bl	8001d38 <__aeabi_dmul>
 8009a1a:	0002      	movs	r2, r0
 8009a1c:	000b      	movs	r3, r1
 8009a1e:	0030      	movs	r0, r6
 8009a20:	0039      	movs	r1, r7
 8009a22:	f7f8 fc51 	bl	80022c8 <__aeabi_dsub>
 8009a26:	002b      	movs	r3, r5
 8009a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a2a:	3501      	adds	r5, #1
 8009a2c:	3230      	adds	r2, #48	@ 0x30
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a32:	002c      	movs	r4, r5
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d000      	beq.n	8009a3a <_dtoa_r+0x4f6>
 8009a38:	e131      	b.n	8009c9e <_dtoa_r+0x75a>
 8009a3a:	0002      	movs	r2, r0
 8009a3c:	000b      	movs	r3, r1
 8009a3e:	f7f7 f9d3 	bl	8000de8 <__aeabi_dadd>
 8009a42:	9a06      	ldr	r2, [sp, #24]
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	0006      	movs	r6, r0
 8009a48:	000f      	movs	r7, r1
 8009a4a:	f7f6 fd17 	bl	800047c <__aeabi_dcmpgt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d000      	beq.n	8009a54 <_dtoa_r+0x510>
 8009a52:	e10f      	b.n	8009c74 <_dtoa_r+0x730>
 8009a54:	9a06      	ldr	r2, [sp, #24]
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	0030      	movs	r0, r6
 8009a5a:	0039      	movs	r1, r7
 8009a5c:	f7f6 fcf4 	bl	8000448 <__aeabi_dcmpeq>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d003      	beq.n	8009a6c <_dtoa_r+0x528>
 8009a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a66:	07dd      	lsls	r5, r3, #31
 8009a68:	d500      	bpl.n	8009a6c <_dtoa_r+0x528>
 8009a6a:	e103      	b.n	8009c74 <_dtoa_r+0x730>
 8009a6c:	9905      	ldr	r1, [sp, #20]
 8009a6e:	9803      	ldr	r0, [sp, #12]
 8009a70:	f001 f9d8 	bl	800ae24 <_Bfree>
 8009a74:	2300      	movs	r3, #0
 8009a76:	7023      	strb	r3, [r4, #0]
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d100      	bne.n	8009a88 <_dtoa_r+0x544>
 8009a86:	e5a7      	b.n	80095d8 <_dtoa_r+0x94>
 8009a88:	601c      	str	r4, [r3, #0]
 8009a8a:	e5a5      	b.n	80095d8 <_dtoa_r+0x94>
 8009a8c:	423d      	tst	r5, r7
 8009a8e:	d005      	beq.n	8009a9c <_dtoa_r+0x558>
 8009a90:	6832      	ldr	r2, [r6, #0]
 8009a92:	6873      	ldr	r3, [r6, #4]
 8009a94:	f7f8 f950 	bl	8001d38 <__aeabi_dmul>
 8009a98:	003b      	movs	r3, r7
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	106d      	asrs	r5, r5, #1
 8009a9e:	3608      	adds	r6, #8
 8009aa0:	e736      	b.n	8009910 <_dtoa_r+0x3cc>
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa8:	e75a      	b.n	8009960 <_dtoa_r+0x41c>
 8009aaa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009aac:	4b69      	ldr	r3, [pc, #420]	@ (8009c54 <_dtoa_r+0x710>)
 8009aae:	3a01      	subs	r2, #1
 8009ab0:	00d2      	lsls	r2, r2, #3
 8009ab2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009ab4:	189b      	adds	r3, r3, r2
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2900      	cmp	r1, #0
 8009abc:	d04c      	beq.n	8009b58 <_dtoa_r+0x614>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	496b      	ldr	r1, [pc, #428]	@ (8009c70 <_dtoa_r+0x72c>)
 8009ac2:	f7f7 fcf5 	bl	80014b0 <__aeabi_ddiv>
 8009ac6:	0032      	movs	r2, r6
 8009ac8:	003b      	movs	r3, r7
 8009aca:	f7f8 fbfd 	bl	80022c8 <__aeabi_dsub>
 8009ace:	9a08      	ldr	r2, [sp, #32]
 8009ad0:	0006      	movs	r6, r0
 8009ad2:	4694      	mov	ip, r2
 8009ad4:	000f      	movs	r7, r1
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	9316      	str	r3, [sp, #88]	@ 0x58
 8009ada:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009adc:	4463      	add	r3, ip
 8009ade:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ae0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ae2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ae4:	f7f8 ffae 	bl	8002a44 <__aeabi_d2iz>
 8009ae8:	0005      	movs	r5, r0
 8009aea:	f7f8 ffe7 	bl	8002abc <__aeabi_i2d>
 8009aee:	0002      	movs	r2, r0
 8009af0:	000b      	movs	r3, r1
 8009af2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009af6:	f7f8 fbe7 	bl	80022c8 <__aeabi_dsub>
 8009afa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009afc:	3530      	adds	r5, #48	@ 0x30
 8009afe:	1c5c      	adds	r4, r3, #1
 8009b00:	701d      	strb	r5, [r3, #0]
 8009b02:	0032      	movs	r2, r6
 8009b04:	003b      	movs	r3, r7
 8009b06:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b0a:	f7f6 fca3 	bl	8000454 <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d16a      	bne.n	8009be8 <_dtoa_r+0x6a4>
 8009b12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b16:	2000      	movs	r0, #0
 8009b18:	4950      	ldr	r1, [pc, #320]	@ (8009c5c <_dtoa_r+0x718>)
 8009b1a:	f7f8 fbd5 	bl	80022c8 <__aeabi_dsub>
 8009b1e:	0032      	movs	r2, r6
 8009b20:	003b      	movs	r3, r7
 8009b22:	f7f6 fc97 	bl	8000454 <__aeabi_dcmplt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d000      	beq.n	8009b2c <_dtoa_r+0x5e8>
 8009b2a:	e0a5      	b.n	8009c78 <_dtoa_r+0x734>
 8009b2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	d100      	bne.n	8009b34 <_dtoa_r+0x5f0>
 8009b32:	e742      	b.n	80099ba <_dtoa_r+0x476>
 8009b34:	2200      	movs	r2, #0
 8009b36:	0030      	movs	r0, r6
 8009b38:	0039      	movs	r1, r7
 8009b3a:	4b49      	ldr	r3, [pc, #292]	@ (8009c60 <_dtoa_r+0x71c>)
 8009b3c:	f7f8 f8fc 	bl	8001d38 <__aeabi_dmul>
 8009b40:	2200      	movs	r2, #0
 8009b42:	0006      	movs	r6, r0
 8009b44:	000f      	movs	r7, r1
 8009b46:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b4a:	4b45      	ldr	r3, [pc, #276]	@ (8009c60 <_dtoa_r+0x71c>)
 8009b4c:	f7f8 f8f4 	bl	8001d38 <__aeabi_dmul>
 8009b50:	9416      	str	r4, [sp, #88]	@ 0x58
 8009b52:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b56:	e7c3      	b.n	8009ae0 <_dtoa_r+0x59c>
 8009b58:	0030      	movs	r0, r6
 8009b5a:	0039      	movs	r1, r7
 8009b5c:	f7f8 f8ec 	bl	8001d38 <__aeabi_dmul>
 8009b60:	9d08      	ldr	r5, [sp, #32]
 8009b62:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009b64:	002b      	movs	r3, r5
 8009b66:	4694      	mov	ip, r2
 8009b68:	9016      	str	r0, [sp, #88]	@ 0x58
 8009b6a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009b6c:	4463      	add	r3, ip
 8009b6e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b74:	f7f8 ff66 	bl	8002a44 <__aeabi_d2iz>
 8009b78:	0004      	movs	r4, r0
 8009b7a:	f7f8 ff9f 	bl	8002abc <__aeabi_i2d>
 8009b7e:	000b      	movs	r3, r1
 8009b80:	0002      	movs	r2, r0
 8009b82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b86:	f7f8 fb9f 	bl	80022c8 <__aeabi_dsub>
 8009b8a:	3430      	adds	r4, #48	@ 0x30
 8009b8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b8e:	702c      	strb	r4, [r5, #0]
 8009b90:	3501      	adds	r5, #1
 8009b92:	0006      	movs	r6, r0
 8009b94:	000f      	movs	r7, r1
 8009b96:	42ab      	cmp	r3, r5
 8009b98:	d129      	bne.n	8009bee <_dtoa_r+0x6aa>
 8009b9a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009b9c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009ba2:	469c      	mov	ip, r3
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4b32      	ldr	r3, [pc, #200]	@ (8009c70 <_dtoa_r+0x72c>)
 8009ba8:	4464      	add	r4, ip
 8009baa:	f7f7 f91d 	bl	8000de8 <__aeabi_dadd>
 8009bae:	0002      	movs	r2, r0
 8009bb0:	000b      	movs	r3, r1
 8009bb2:	0030      	movs	r0, r6
 8009bb4:	0039      	movs	r1, r7
 8009bb6:	f7f6 fc61 	bl	800047c <__aeabi_dcmpgt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d15c      	bne.n	8009c78 <_dtoa_r+0x734>
 8009bbe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009bc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	492a      	ldr	r1, [pc, #168]	@ (8009c70 <_dtoa_r+0x72c>)
 8009bc6:	f7f8 fb7f 	bl	80022c8 <__aeabi_dsub>
 8009bca:	0002      	movs	r2, r0
 8009bcc:	000b      	movs	r3, r1
 8009bce:	0030      	movs	r0, r6
 8009bd0:	0039      	movs	r1, r7
 8009bd2:	f7f6 fc3f 	bl	8000454 <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d100      	bne.n	8009bdc <_dtoa_r+0x698>
 8009bda:	e6ee      	b.n	80099ba <_dtoa_r+0x476>
 8009bdc:	0023      	movs	r3, r4
 8009bde:	3c01      	subs	r4, #1
 8009be0:	7822      	ldrb	r2, [r4, #0]
 8009be2:	2a30      	cmp	r2, #48	@ 0x30
 8009be4:	d0fa      	beq.n	8009bdc <_dtoa_r+0x698>
 8009be6:	001c      	movs	r4, r3
 8009be8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	e73e      	b.n	8009a6c <_dtoa_r+0x528>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c60 <_dtoa_r+0x71c>)
 8009bf2:	f7f8 f8a1 	bl	8001d38 <__aeabi_dmul>
 8009bf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bf8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009bfa:	e7b9      	b.n	8009b70 <_dtoa_r+0x62c>
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10c      	bne.n	8009c1c <_dtoa_r+0x6d8>
 8009c02:	9806      	ldr	r0, [sp, #24]
 8009c04:	9907      	ldr	r1, [sp, #28]
 8009c06:	2200      	movs	r2, #0
 8009c08:	4b18      	ldr	r3, [pc, #96]	@ (8009c6c <_dtoa_r+0x728>)
 8009c0a:	f7f8 f895 	bl	8001d38 <__aeabi_dmul>
 8009c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c12:	f7f6 fc3d 	bl	8000490 <__aeabi_dcmpge>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d100      	bne.n	8009c1c <_dtoa_r+0x6d8>
 8009c1a:	e164      	b.n	8009ee6 <_dtoa_r+0x9a2>
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	0037      	movs	r7, r6
 8009c20:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c22:	9c08      	ldr	r4, [sp, #32]
 8009c24:	43db      	mvns	r3, r3
 8009c26:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	0031      	movs	r1, r6
 8009c2e:	9803      	ldr	r0, [sp, #12]
 8009c30:	f001 f8f8 	bl	800ae24 <_Bfree>
 8009c34:	2f00      	cmp	r7, #0
 8009c36:	d0d7      	beq.n	8009be8 <_dtoa_r+0x6a4>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <_dtoa_r+0x706>
 8009c3e:	42bb      	cmp	r3, r7
 8009c40:	d003      	beq.n	8009c4a <_dtoa_r+0x706>
 8009c42:	0019      	movs	r1, r3
 8009c44:	9803      	ldr	r0, [sp, #12]
 8009c46:	f001 f8ed 	bl	800ae24 <_Bfree>
 8009c4a:	0039      	movs	r1, r7
 8009c4c:	9803      	ldr	r0, [sp, #12]
 8009c4e:	f001 f8e9 	bl	800ae24 <_Bfree>
 8009c52:	e7c9      	b.n	8009be8 <_dtoa_r+0x6a4>
 8009c54:	0800c4e0 	.word	0x0800c4e0
 8009c58:	0800c4b8 	.word	0x0800c4b8
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	40240000 	.word	0x40240000
 8009c64:	401c0000 	.word	0x401c0000
 8009c68:	fcc00000 	.word	0xfcc00000
 8009c6c:	40140000 	.word	0x40140000
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c78:	0023      	movs	r3, r4
 8009c7a:	001c      	movs	r4, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	781a      	ldrb	r2, [r3, #0]
 8009c80:	2a39      	cmp	r2, #57	@ 0x39
 8009c82:	d108      	bne.n	8009c96 <_dtoa_r+0x752>
 8009c84:	9a08      	ldr	r2, [sp, #32]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d1f7      	bne.n	8009c7a <_dtoa_r+0x736>
 8009c8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c8c:	9908      	ldr	r1, [sp, #32]
 8009c8e:	3201      	adds	r2, #1
 8009c90:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c92:	2230      	movs	r2, #48	@ 0x30
 8009c94:	700a      	strb	r2, [r1, #0]
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	3201      	adds	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e7a4      	b.n	8009be8 <_dtoa_r+0x6a4>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4bc6      	ldr	r3, [pc, #792]	@ (8009fbc <_dtoa_r+0xa78>)
 8009ca2:	f7f8 f849 	bl	8001d38 <__aeabi_dmul>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	0006      	movs	r6, r0
 8009cac:	000f      	movs	r7, r1
 8009cae:	f7f6 fbcb 	bl	8000448 <__aeabi_dcmpeq>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d100      	bne.n	8009cb8 <_dtoa_r+0x774>
 8009cb6:	e6a1      	b.n	80099fc <_dtoa_r+0x4b8>
 8009cb8:	e6d8      	b.n	8009a6c <_dtoa_r+0x528>
 8009cba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009cbc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009cbe:	9c06      	ldr	r4, [sp, #24]
 8009cc0:	2f00      	cmp	r7, #0
 8009cc2:	d014      	beq.n	8009cee <_dtoa_r+0x7aa>
 8009cc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cc6:	2a01      	cmp	r2, #1
 8009cc8:	dd00      	ble.n	8009ccc <_dtoa_r+0x788>
 8009cca:	e0c8      	b.n	8009e5e <_dtoa_r+0x91a>
 8009ccc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	d100      	bne.n	8009cd4 <_dtoa_r+0x790>
 8009cd2:	e0be      	b.n	8009e52 <_dtoa_r+0x90e>
 8009cd4:	4aba      	ldr	r2, [pc, #744]	@ (8009fc0 <_dtoa_r+0xa7c>)
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	9a06      	ldr	r2, [sp, #24]
 8009cda:	2101      	movs	r1, #1
 8009cdc:	18d2      	adds	r2, r2, r3
 8009cde:	9206      	str	r2, [sp, #24]
 8009ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ce2:	9803      	ldr	r0, [sp, #12]
 8009ce4:	18d3      	adds	r3, r2, r3
 8009ce6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ce8:	f001 f9a0 	bl	800b02c <__i2b>
 8009cec:	0007      	movs	r7, r0
 8009cee:	2c00      	cmp	r4, #0
 8009cf0:	d00e      	beq.n	8009d10 <_dtoa_r+0x7cc>
 8009cf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dd0b      	ble.n	8009d10 <_dtoa_r+0x7cc>
 8009cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cfa:	0023      	movs	r3, r4
 8009cfc:	4294      	cmp	r4, r2
 8009cfe:	dd00      	ble.n	8009d02 <_dtoa_r+0x7be>
 8009d00:	0013      	movs	r3, r2
 8009d02:	9a06      	ldr	r2, [sp, #24]
 8009d04:	1ae4      	subs	r4, r4, r3
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	9206      	str	r2, [sp, #24]
 8009d0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d01f      	beq.n	8009d56 <_dtoa_r+0x812>
 8009d16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d100      	bne.n	8009d1e <_dtoa_r+0x7da>
 8009d1c:	e0b5      	b.n	8009e8a <_dtoa_r+0x946>
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	d010      	beq.n	8009d44 <_dtoa_r+0x800>
 8009d22:	0039      	movs	r1, r7
 8009d24:	002a      	movs	r2, r5
 8009d26:	9803      	ldr	r0, [sp, #12]
 8009d28:	f001 fa4a 	bl	800b1c0 <__pow5mult>
 8009d2c:	9a05      	ldr	r2, [sp, #20]
 8009d2e:	0001      	movs	r1, r0
 8009d30:	0007      	movs	r7, r0
 8009d32:	9803      	ldr	r0, [sp, #12]
 8009d34:	f001 f992 	bl	800b05c <__multiply>
 8009d38:	0006      	movs	r6, r0
 8009d3a:	9905      	ldr	r1, [sp, #20]
 8009d3c:	9803      	ldr	r0, [sp, #12]
 8009d3e:	f001 f871 	bl	800ae24 <_Bfree>
 8009d42:	9605      	str	r6, [sp, #20]
 8009d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d46:	1b5a      	subs	r2, r3, r5
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	d004      	beq.n	8009d56 <_dtoa_r+0x812>
 8009d4c:	9905      	ldr	r1, [sp, #20]
 8009d4e:	9803      	ldr	r0, [sp, #12]
 8009d50:	f001 fa36 	bl	800b1c0 <__pow5mult>
 8009d54:	9005      	str	r0, [sp, #20]
 8009d56:	2101      	movs	r1, #1
 8009d58:	9803      	ldr	r0, [sp, #12]
 8009d5a:	f001 f967 	bl	800b02c <__i2b>
 8009d5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d60:	0006      	movs	r6, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d100      	bne.n	8009d68 <_dtoa_r+0x824>
 8009d66:	e1bc      	b.n	800a0e2 <_dtoa_r+0xb9e>
 8009d68:	001a      	movs	r2, r3
 8009d6a:	0001      	movs	r1, r0
 8009d6c:	9803      	ldr	r0, [sp, #12]
 8009d6e:	f001 fa27 	bl	800b1c0 <__pow5mult>
 8009d72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d74:	0006      	movs	r6, r0
 8009d76:	2500      	movs	r5, #0
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	dc16      	bgt.n	8009daa <_dtoa_r+0x866>
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	d10e      	bne.n	8009da2 <_dtoa_r+0x85e>
 8009d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d86:	031b      	lsls	r3, r3, #12
 8009d88:	42ab      	cmp	r3, r5
 8009d8a:	d10a      	bne.n	8009da2 <_dtoa_r+0x85e>
 8009d8c:	4b8d      	ldr	r3, [pc, #564]	@ (8009fc4 <_dtoa_r+0xa80>)
 8009d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d90:	4213      	tst	r3, r2
 8009d92:	d006      	beq.n	8009da2 <_dtoa_r+0x85e>
 8009d94:	9b06      	ldr	r3, [sp, #24]
 8009d96:	3501      	adds	r5, #1
 8009d98:	3301      	adds	r3, #1
 8009d9a:	9306      	str	r3, [sp, #24]
 8009d9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d9e:	3301      	adds	r3, #1
 8009da0:	930d      	str	r3, [sp, #52]	@ 0x34
 8009da2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009da4:	2001      	movs	r0, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <_dtoa_r+0x878>
 8009daa:	6933      	ldr	r3, [r6, #16]
 8009dac:	3303      	adds	r3, #3
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	18f3      	adds	r3, r6, r3
 8009db2:	6858      	ldr	r0, [r3, #4]
 8009db4:	f001 f8ea 	bl	800af8c <__hi0bits>
 8009db8:	2320      	movs	r3, #32
 8009dba:	1a18      	subs	r0, r3, r0
 8009dbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dbe:	1818      	adds	r0, r3, r0
 8009dc0:	0002      	movs	r2, r0
 8009dc2:	231f      	movs	r3, #31
 8009dc4:	401a      	ands	r2, r3
 8009dc6:	4218      	tst	r0, r3
 8009dc8:	d065      	beq.n	8009e96 <_dtoa_r+0x952>
 8009dca:	3301      	adds	r3, #1
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	dd5d      	ble.n	8009e8e <_dtoa_r+0x94a>
 8009dd2:	231c      	movs	r3, #28
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	9a06      	ldr	r2, [sp, #24]
 8009dd8:	18e4      	adds	r4, r4, r3
 8009dda:	18d2      	adds	r2, r2, r3
 8009ddc:	9206      	str	r2, [sp, #24]
 8009dde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009de0:	18d3      	adds	r3, r2, r3
 8009de2:	930d      	str	r3, [sp, #52]	@ 0x34
 8009de4:	9b06      	ldr	r3, [sp, #24]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	dd05      	ble.n	8009df6 <_dtoa_r+0x8b2>
 8009dea:	001a      	movs	r2, r3
 8009dec:	9905      	ldr	r1, [sp, #20]
 8009dee:	9803      	ldr	r0, [sp, #12]
 8009df0:	f001 fa42 	bl	800b278 <__lshift>
 8009df4:	9005      	str	r0, [sp, #20]
 8009df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dd05      	ble.n	8009e08 <_dtoa_r+0x8c4>
 8009dfc:	0031      	movs	r1, r6
 8009dfe:	001a      	movs	r2, r3
 8009e00:	9803      	ldr	r0, [sp, #12]
 8009e02:	f001 fa39 	bl	800b278 <__lshift>
 8009e06:	0006      	movs	r6, r0
 8009e08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d045      	beq.n	8009e9a <_dtoa_r+0x956>
 8009e0e:	0031      	movs	r1, r6
 8009e10:	9805      	ldr	r0, [sp, #20]
 8009e12:	f001 fa9d 	bl	800b350 <__mcmp>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	da3f      	bge.n	8009e9a <_dtoa_r+0x956>
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	220a      	movs	r2, #10
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e22:	9905      	ldr	r1, [sp, #20]
 8009e24:	2300      	movs	r3, #0
 8009e26:	9803      	ldr	r0, [sp, #12]
 8009e28:	f001 f820 	bl	800ae6c <__multadd>
 8009e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e2e:	9005      	str	r0, [sp, #20]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d100      	bne.n	8009e36 <_dtoa_r+0x8f2>
 8009e34:	e15c      	b.n	800a0f0 <_dtoa_r+0xbac>
 8009e36:	2300      	movs	r3, #0
 8009e38:	0039      	movs	r1, r7
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	9803      	ldr	r0, [sp, #12]
 8009e3e:	f001 f815 	bl	800ae6c <__multadd>
 8009e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e44:	0007      	movs	r7, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	dc55      	bgt.n	8009ef6 <_dtoa_r+0x9b2>
 8009e4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	dc2d      	bgt.n	8009eac <_dtoa_r+0x968>
 8009e50:	e051      	b.n	8009ef6 <_dtoa_r+0x9b2>
 8009e52:	2336      	movs	r3, #54	@ 0x36
 8009e54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e56:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009e58:	9c06      	ldr	r4, [sp, #24]
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	e73c      	b.n	8009cd8 <_dtoa_r+0x794>
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	1e5d      	subs	r5, r3, #1
 8009e62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	db08      	blt.n	8009e7a <_dtoa_r+0x936>
 8009e68:	1b5d      	subs	r5, r3, r5
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	9c06      	ldr	r4, [sp, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	db00      	blt.n	8009e74 <_dtoa_r+0x930>
 8009e72:	e731      	b.n	8009cd8 <_dtoa_r+0x794>
 8009e74:	1ae4      	subs	r4, r4, r3
 8009e76:	2300      	movs	r3, #0
 8009e78:	e72e      	b.n	8009cd8 <_dtoa_r+0x794>
 8009e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e7e:	1aeb      	subs	r3, r5, r3
 8009e80:	18d3      	adds	r3, r2, r3
 8009e82:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009e84:	9314      	str	r3, [sp, #80]	@ 0x50
 8009e86:	2500      	movs	r5, #0
 8009e88:	e7ef      	b.n	8009e6a <_dtoa_r+0x926>
 8009e8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e8c:	e75e      	b.n	8009d4c <_dtoa_r+0x808>
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d0a8      	beq.n	8009de4 <_dtoa_r+0x8a0>
 8009e92:	331c      	adds	r3, #28
 8009e94:	e79f      	b.n	8009dd6 <_dtoa_r+0x892>
 8009e96:	0013      	movs	r3, r2
 8009e98:	e7fb      	b.n	8009e92 <_dtoa_r+0x94e>
 8009e9a:	9b04      	ldr	r3, [sp, #16]
 8009e9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dc23      	bgt.n	8009eee <_dtoa_r+0x9aa>
 8009ea6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	dd20      	ble.n	8009eee <_dtoa_r+0x9aa>
 8009eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d000      	beq.n	8009eb4 <_dtoa_r+0x970>
 8009eb2:	e6b5      	b.n	8009c20 <_dtoa_r+0x6dc>
 8009eb4:	0031      	movs	r1, r6
 8009eb6:	2205      	movs	r2, #5
 8009eb8:	9803      	ldr	r0, [sp, #12]
 8009eba:	f000 ffd7 	bl	800ae6c <__multadd>
 8009ebe:	0006      	movs	r6, r0
 8009ec0:	0001      	movs	r1, r0
 8009ec2:	9805      	ldr	r0, [sp, #20]
 8009ec4:	f001 fa44 	bl	800b350 <__mcmp>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dc00      	bgt.n	8009ece <_dtoa_r+0x98a>
 8009ecc:	e6a8      	b.n	8009c20 <_dtoa_r+0x6dc>
 8009ece:	9b08      	ldr	r3, [sp, #32]
 8009ed0:	9a08      	ldr	r2, [sp, #32]
 8009ed2:	1c5c      	adds	r4, r3, #1
 8009ed4:	2331      	movs	r3, #49	@ 0x31
 8009ed6:	7013      	strb	r3, [r2, #0]
 8009ed8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009eda:	3301      	adds	r3, #1
 8009edc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ede:	e6a3      	b.n	8009c28 <_dtoa_r+0x6e4>
 8009ee0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009ee2:	0037      	movs	r7, r6
 8009ee4:	e7f3      	b.n	8009ece <_dtoa_r+0x98a>
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009eea:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eec:	e7f9      	b.n	8009ee2 <_dtoa_r+0x99e>
 8009eee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d100      	bne.n	8009ef6 <_dtoa_r+0x9b2>
 8009ef4:	e100      	b.n	800a0f8 <_dtoa_r+0xbb4>
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	dd05      	ble.n	8009f06 <_dtoa_r+0x9c2>
 8009efa:	0039      	movs	r1, r7
 8009efc:	0022      	movs	r2, r4
 8009efe:	9803      	ldr	r0, [sp, #12]
 8009f00:	f001 f9ba 	bl	800b278 <__lshift>
 8009f04:	0007      	movs	r7, r0
 8009f06:	0038      	movs	r0, r7
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	d018      	beq.n	8009f3e <_dtoa_r+0x9fa>
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	9803      	ldr	r0, [sp, #12]
 8009f10:	f000 ff44 	bl	800ad9c <_Balloc>
 8009f14:	1e04      	subs	r4, r0, #0
 8009f16:	d105      	bne.n	8009f24 <_dtoa_r+0x9e0>
 8009f18:	0022      	movs	r2, r4
 8009f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc8 <_dtoa_r+0xa84>)
 8009f1c:	482b      	ldr	r0, [pc, #172]	@ (8009fcc <_dtoa_r+0xa88>)
 8009f1e:	492c      	ldr	r1, [pc, #176]	@ (8009fd0 <_dtoa_r+0xa8c>)
 8009f20:	f7ff fb25 	bl	800956e <_dtoa_r+0x2a>
 8009f24:	0039      	movs	r1, r7
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	310c      	adds	r1, #12
 8009f2a:	3202      	adds	r2, #2
 8009f2c:	0092      	lsls	r2, r2, #2
 8009f2e:	300c      	adds	r0, #12
 8009f30:	f7ff fa66 	bl	8009400 <memcpy>
 8009f34:	2201      	movs	r2, #1
 8009f36:	0021      	movs	r1, r4
 8009f38:	9803      	ldr	r0, [sp, #12]
 8009f3a:	f001 f99d 	bl	800b278 <__lshift>
 8009f3e:	9b08      	ldr	r3, [sp, #32]
 8009f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f42:	9306      	str	r3, [sp, #24]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	2201      	movs	r2, #1
 8009f4a:	9704      	str	r7, [sp, #16]
 8009f4c:	0007      	movs	r7, r0
 8009f4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f52:	4013      	ands	r3, r2
 8009f54:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f56:	0031      	movs	r1, r6
 8009f58:	9805      	ldr	r0, [sp, #20]
 8009f5a:	f7ff fa65 	bl	8009428 <quorem>
 8009f5e:	9904      	ldr	r1, [sp, #16]
 8009f60:	0005      	movs	r5, r0
 8009f62:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	f001 f9f3 	bl	800b350 <__mcmp>
 8009f6a:	003a      	movs	r2, r7
 8009f6c:	900d      	str	r0, [sp, #52]	@ 0x34
 8009f6e:	0031      	movs	r1, r6
 8009f70:	9803      	ldr	r0, [sp, #12]
 8009f72:	f001 fa09 	bl	800b388 <__mdiff>
 8009f76:	2201      	movs	r2, #1
 8009f78:	68c3      	ldr	r3, [r0, #12]
 8009f7a:	0004      	movs	r4, r0
 8009f7c:	3530      	adds	r5, #48	@ 0x30
 8009f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d104      	bne.n	8009f8e <_dtoa_r+0xa4a>
 8009f84:	0001      	movs	r1, r0
 8009f86:	9805      	ldr	r0, [sp, #20]
 8009f88:	f001 f9e2 	bl	800b350 <__mcmp>
 8009f8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f8e:	0021      	movs	r1, r4
 8009f90:	9803      	ldr	r0, [sp, #12]
 8009f92:	f000 ff47 	bl	800ae24 <_Bfree>
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f9a:	1c5c      	adds	r4, r3, #1
 8009f9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	d116      	bne.n	8009fd4 <_dtoa_r+0xa90>
 8009fa6:	2d39      	cmp	r5, #57	@ 0x39
 8009fa8:	d02f      	beq.n	800a00a <_dtoa_r+0xac6>
 8009faa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dd01      	ble.n	8009fb4 <_dtoa_r+0xa70>
 8009fb0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009fb2:	3531      	adds	r5, #49	@ 0x31
 8009fb4:	9b06      	ldr	r3, [sp, #24]
 8009fb6:	701d      	strb	r5, [r3, #0]
 8009fb8:	e638      	b.n	8009c2c <_dtoa_r+0x6e8>
 8009fba:	46c0      	nop			@ (mov r8, r8)
 8009fbc:	40240000 	.word	0x40240000
 8009fc0:	00000433 	.word	0x00000433
 8009fc4:	7ff00000 	.word	0x7ff00000
 8009fc8:	0800c3cd 	.word	0x0800c3cd
 8009fcc:	0800c375 	.word	0x0800c375
 8009fd0:	000002ef 	.word	0x000002ef
 8009fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	db04      	blt.n	8009fe4 <_dtoa_r+0xaa0>
 8009fda:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	d11e      	bne.n	800a022 <_dtoa_r+0xade>
 8009fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dde4      	ble.n	8009fb4 <_dtoa_r+0xa70>
 8009fea:	9905      	ldr	r1, [sp, #20]
 8009fec:	2201      	movs	r2, #1
 8009fee:	9803      	ldr	r0, [sp, #12]
 8009ff0:	f001 f942 	bl	800b278 <__lshift>
 8009ff4:	0031      	movs	r1, r6
 8009ff6:	9005      	str	r0, [sp, #20]
 8009ff8:	f001 f9aa 	bl	800b350 <__mcmp>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	dc02      	bgt.n	800a006 <_dtoa_r+0xac2>
 800a000:	d1d8      	bne.n	8009fb4 <_dtoa_r+0xa70>
 800a002:	07eb      	lsls	r3, r5, #31
 800a004:	d5d6      	bpl.n	8009fb4 <_dtoa_r+0xa70>
 800a006:	2d39      	cmp	r5, #57	@ 0x39
 800a008:	d1d2      	bne.n	8009fb0 <_dtoa_r+0xa6c>
 800a00a:	2339      	movs	r3, #57	@ 0x39
 800a00c:	9a06      	ldr	r2, [sp, #24]
 800a00e:	7013      	strb	r3, [r2, #0]
 800a010:	0023      	movs	r3, r4
 800a012:	001c      	movs	r4, r3
 800a014:	3b01      	subs	r3, #1
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	2a39      	cmp	r2, #57	@ 0x39
 800a01a:	d04f      	beq.n	800a0bc <_dtoa_r+0xb78>
 800a01c:	3201      	adds	r2, #1
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	e604      	b.n	8009c2c <_dtoa_r+0x6e8>
 800a022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	dd03      	ble.n	800a030 <_dtoa_r+0xaec>
 800a028:	2d39      	cmp	r5, #57	@ 0x39
 800a02a:	d0ee      	beq.n	800a00a <_dtoa_r+0xac6>
 800a02c:	3501      	adds	r5, #1
 800a02e:	e7c1      	b.n	8009fb4 <_dtoa_r+0xa70>
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	9a06      	ldr	r2, [sp, #24]
 800a034:	701d      	strb	r5, [r3, #0]
 800a036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a038:	4293      	cmp	r3, r2
 800a03a:	d02a      	beq.n	800a092 <_dtoa_r+0xb4e>
 800a03c:	2300      	movs	r3, #0
 800a03e:	220a      	movs	r2, #10
 800a040:	9905      	ldr	r1, [sp, #20]
 800a042:	9803      	ldr	r0, [sp, #12]
 800a044:	f000 ff12 	bl	800ae6c <__multadd>
 800a048:	9b04      	ldr	r3, [sp, #16]
 800a04a:	9005      	str	r0, [sp, #20]
 800a04c:	42bb      	cmp	r3, r7
 800a04e:	d109      	bne.n	800a064 <_dtoa_r+0xb20>
 800a050:	2300      	movs	r3, #0
 800a052:	220a      	movs	r2, #10
 800a054:	9904      	ldr	r1, [sp, #16]
 800a056:	9803      	ldr	r0, [sp, #12]
 800a058:	f000 ff08 	bl	800ae6c <__multadd>
 800a05c:	9004      	str	r0, [sp, #16]
 800a05e:	0007      	movs	r7, r0
 800a060:	9406      	str	r4, [sp, #24]
 800a062:	e778      	b.n	8009f56 <_dtoa_r+0xa12>
 800a064:	9904      	ldr	r1, [sp, #16]
 800a066:	2300      	movs	r3, #0
 800a068:	220a      	movs	r2, #10
 800a06a:	9803      	ldr	r0, [sp, #12]
 800a06c:	f000 fefe 	bl	800ae6c <__multadd>
 800a070:	2300      	movs	r3, #0
 800a072:	9004      	str	r0, [sp, #16]
 800a074:	220a      	movs	r2, #10
 800a076:	0039      	movs	r1, r7
 800a078:	9803      	ldr	r0, [sp, #12]
 800a07a:	f000 fef7 	bl	800ae6c <__multadd>
 800a07e:	e7ee      	b.n	800a05e <_dtoa_r+0xb1a>
 800a080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a082:	2401      	movs	r4, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd00      	ble.n	800a08a <_dtoa_r+0xb46>
 800a088:	001c      	movs	r4, r3
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	191c      	adds	r4, r3, r4
 800a08e:	2300      	movs	r3, #0
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	9905      	ldr	r1, [sp, #20]
 800a094:	2201      	movs	r2, #1
 800a096:	9803      	ldr	r0, [sp, #12]
 800a098:	f001 f8ee 	bl	800b278 <__lshift>
 800a09c:	0031      	movs	r1, r6
 800a09e:	9005      	str	r0, [sp, #20]
 800a0a0:	f001 f956 	bl	800b350 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	dcb3      	bgt.n	800a010 <_dtoa_r+0xacc>
 800a0a8:	d101      	bne.n	800a0ae <_dtoa_r+0xb6a>
 800a0aa:	07ed      	lsls	r5, r5, #31
 800a0ac:	d4b0      	bmi.n	800a010 <_dtoa_r+0xacc>
 800a0ae:	0023      	movs	r3, r4
 800a0b0:	001c      	movs	r4, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	2a30      	cmp	r2, #48	@ 0x30
 800a0b8:	d0fa      	beq.n	800a0b0 <_dtoa_r+0xb6c>
 800a0ba:	e5b7      	b.n	8009c2c <_dtoa_r+0x6e8>
 800a0bc:	9a08      	ldr	r2, [sp, #32]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d1a7      	bne.n	800a012 <_dtoa_r+0xace>
 800a0c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0c8:	2331      	movs	r3, #49	@ 0x31
 800a0ca:	7013      	strb	r3, [r2, #0]
 800a0cc:	e5ae      	b.n	8009c2c <_dtoa_r+0x6e8>
 800a0ce:	4b15      	ldr	r3, [pc, #84]	@ (800a124 <_dtoa_r+0xbe0>)
 800a0d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a0d2:	9308      	str	r3, [sp, #32]
 800a0d4:	4b14      	ldr	r3, [pc, #80]	@ (800a128 <_dtoa_r+0xbe4>)
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	d001      	beq.n	800a0de <_dtoa_r+0xb9a>
 800a0da:	f7ff fa7b 	bl	80095d4 <_dtoa_r+0x90>
 800a0de:	f7ff fa7b 	bl	80095d8 <_dtoa_r+0x94>
 800a0e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	dc00      	bgt.n	800a0ea <_dtoa_r+0xba6>
 800a0e8:	e648      	b.n	8009d7c <_dtoa_r+0x838>
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a0ee:	e665      	b.n	8009dbc <_dtoa_r+0x878>
 800a0f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dc00      	bgt.n	800a0f8 <_dtoa_r+0xbb4>
 800a0f6:	e6d6      	b.n	8009ea6 <_dtoa_r+0x962>
 800a0f8:	2400      	movs	r4, #0
 800a0fa:	0031      	movs	r1, r6
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	f7ff f993 	bl	8009428 <quorem>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	3030      	adds	r0, #48	@ 0x30
 800a106:	5518      	strb	r0, [r3, r4]
 800a108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10a:	3401      	adds	r4, #1
 800a10c:	0005      	movs	r5, r0
 800a10e:	429c      	cmp	r4, r3
 800a110:	dab6      	bge.n	800a080 <_dtoa_r+0xb3c>
 800a112:	2300      	movs	r3, #0
 800a114:	220a      	movs	r2, #10
 800a116:	9905      	ldr	r1, [sp, #20]
 800a118:	9803      	ldr	r0, [sp, #12]
 800a11a:	f000 fea7 	bl	800ae6c <__multadd>
 800a11e:	9005      	str	r0, [sp, #20]
 800a120:	e7eb      	b.n	800a0fa <_dtoa_r+0xbb6>
 800a122:	46c0      	nop			@ (mov r8, r8)
 800a124:	0800c351 	.word	0x0800c351
 800a128:	0800c359 	.word	0x0800c359

0800a12c <rshift>:
 800a12c:	0002      	movs	r2, r0
 800a12e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a130:	6904      	ldr	r4, [r0, #16]
 800a132:	b085      	sub	sp, #20
 800a134:	3214      	adds	r2, #20
 800a136:	114b      	asrs	r3, r1, #5
 800a138:	0016      	movs	r6, r2
 800a13a:	9302      	str	r3, [sp, #8]
 800a13c:	429c      	cmp	r4, r3
 800a13e:	dd31      	ble.n	800a1a4 <rshift+0x78>
 800a140:	261f      	movs	r6, #31
 800a142:	000f      	movs	r7, r1
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	00a5      	lsls	r5, r4, #2
 800a148:	18d3      	adds	r3, r2, r3
 800a14a:	4037      	ands	r7, r6
 800a14c:	1955      	adds	r5, r2, r5
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	9701      	str	r7, [sp, #4]
 800a152:	4231      	tst	r1, r6
 800a154:	d10d      	bne.n	800a172 <rshift+0x46>
 800a156:	0016      	movs	r6, r2
 800a158:	0019      	movs	r1, r3
 800a15a:	428d      	cmp	r5, r1
 800a15c:	d836      	bhi.n	800a1cc <rshift+0xa0>
 800a15e:	9b00      	ldr	r3, [sp, #0]
 800a160:	2600      	movs	r6, #0
 800a162:	3b03      	subs	r3, #3
 800a164:	429d      	cmp	r5, r3
 800a166:	d302      	bcc.n	800a16e <rshift+0x42>
 800a168:	9b02      	ldr	r3, [sp, #8]
 800a16a:	1ae4      	subs	r4, r4, r3
 800a16c:	00a6      	lsls	r6, r4, #2
 800a16e:	1996      	adds	r6, r2, r6
 800a170:	e018      	b.n	800a1a4 <rshift+0x78>
 800a172:	2120      	movs	r1, #32
 800a174:	9e01      	ldr	r6, [sp, #4]
 800a176:	9f01      	ldr	r7, [sp, #4]
 800a178:	1b89      	subs	r1, r1, r6
 800a17a:	9e00      	ldr	r6, [sp, #0]
 800a17c:	9103      	str	r1, [sp, #12]
 800a17e:	ce02      	ldmia	r6!, {r1}
 800a180:	4694      	mov	ip, r2
 800a182:	40f9      	lsrs	r1, r7
 800a184:	42b5      	cmp	r5, r6
 800a186:	d816      	bhi.n	800a1b6 <rshift+0x8a>
 800a188:	9b00      	ldr	r3, [sp, #0]
 800a18a:	2600      	movs	r6, #0
 800a18c:	3301      	adds	r3, #1
 800a18e:	429d      	cmp	r5, r3
 800a190:	d303      	bcc.n	800a19a <rshift+0x6e>
 800a192:	9b02      	ldr	r3, [sp, #8]
 800a194:	1ae4      	subs	r4, r4, r3
 800a196:	00a6      	lsls	r6, r4, #2
 800a198:	3e04      	subs	r6, #4
 800a19a:	1996      	adds	r6, r2, r6
 800a19c:	6031      	str	r1, [r6, #0]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d000      	beq.n	800a1a4 <rshift+0x78>
 800a1a2:	3604      	adds	r6, #4
 800a1a4:	1ab1      	subs	r1, r6, r2
 800a1a6:	1089      	asrs	r1, r1, #2
 800a1a8:	6101      	str	r1, [r0, #16]
 800a1aa:	4296      	cmp	r6, r2
 800a1ac:	d101      	bne.n	800a1b2 <rshift+0x86>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6143      	str	r3, [r0, #20]
 800a1b2:	b005      	add	sp, #20
 800a1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b6:	6837      	ldr	r7, [r6, #0]
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	409f      	lsls	r7, r3
 800a1bc:	430f      	orrs	r7, r1
 800a1be:	4661      	mov	r1, ip
 800a1c0:	c180      	stmia	r1!, {r7}
 800a1c2:	468c      	mov	ip, r1
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	ce02      	ldmia	r6!, {r1}
 800a1c8:	40d9      	lsrs	r1, r3
 800a1ca:	e7db      	b.n	800a184 <rshift+0x58>
 800a1cc:	c980      	ldmia	r1!, {r7}
 800a1ce:	c680      	stmia	r6!, {r7}
 800a1d0:	e7c3      	b.n	800a15a <rshift+0x2e>

0800a1d2 <__hexdig_fun>:
 800a1d2:	0002      	movs	r2, r0
 800a1d4:	3a30      	subs	r2, #48	@ 0x30
 800a1d6:	0003      	movs	r3, r0
 800a1d8:	2a09      	cmp	r2, #9
 800a1da:	d802      	bhi.n	800a1e2 <__hexdig_fun+0x10>
 800a1dc:	3b20      	subs	r3, #32
 800a1de:	b2d8      	uxtb	r0, r3
 800a1e0:	4770      	bx	lr
 800a1e2:	0002      	movs	r2, r0
 800a1e4:	3a61      	subs	r2, #97	@ 0x61
 800a1e6:	2a05      	cmp	r2, #5
 800a1e8:	d801      	bhi.n	800a1ee <__hexdig_fun+0x1c>
 800a1ea:	3b47      	subs	r3, #71	@ 0x47
 800a1ec:	e7f7      	b.n	800a1de <__hexdig_fun+0xc>
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	3a41      	subs	r2, #65	@ 0x41
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	2a05      	cmp	r2, #5
 800a1f6:	d8f3      	bhi.n	800a1e0 <__hexdig_fun+0xe>
 800a1f8:	3b27      	subs	r3, #39	@ 0x27
 800a1fa:	e7f0      	b.n	800a1de <__hexdig_fun+0xc>

0800a1fc <__gethex>:
 800a1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1fe:	b089      	sub	sp, #36	@ 0x24
 800a200:	9307      	str	r3, [sp, #28]
 800a202:	680b      	ldr	r3, [r1, #0]
 800a204:	9201      	str	r2, [sp, #4]
 800a206:	9003      	str	r0, [sp, #12]
 800a208:	9106      	str	r1, [sp, #24]
 800a20a:	1c9a      	adds	r2, r3, #2
 800a20c:	0011      	movs	r1, r2
 800a20e:	3201      	adds	r2, #1
 800a210:	1e50      	subs	r0, r2, #1
 800a212:	7800      	ldrb	r0, [r0, #0]
 800a214:	2830      	cmp	r0, #48	@ 0x30
 800a216:	d0f9      	beq.n	800a20c <__gethex+0x10>
 800a218:	1acb      	subs	r3, r1, r3
 800a21a:	3b02      	subs	r3, #2
 800a21c:	9305      	str	r3, [sp, #20]
 800a21e:	9100      	str	r1, [sp, #0]
 800a220:	f7ff ffd7 	bl	800a1d2 <__hexdig_fun>
 800a224:	2300      	movs	r3, #0
 800a226:	001d      	movs	r5, r3
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	4298      	cmp	r0, r3
 800a22c:	d11e      	bne.n	800a26c <__gethex+0x70>
 800a22e:	2201      	movs	r2, #1
 800a230:	49a6      	ldr	r1, [pc, #664]	@ (800a4cc <__gethex+0x2d0>)
 800a232:	9800      	ldr	r0, [sp, #0]
 800a234:	f7ff f88e 	bl	8009354 <strncmp>
 800a238:	0007      	movs	r7, r0
 800a23a:	42a8      	cmp	r0, r5
 800a23c:	d000      	beq.n	800a240 <__gethex+0x44>
 800a23e:	e06a      	b.n	800a316 <__gethex+0x11a>
 800a240:	9b00      	ldr	r3, [sp, #0]
 800a242:	7858      	ldrb	r0, [r3, #1]
 800a244:	1c5c      	adds	r4, r3, #1
 800a246:	f7ff ffc4 	bl	800a1d2 <__hexdig_fun>
 800a24a:	2301      	movs	r3, #1
 800a24c:	9302      	str	r3, [sp, #8]
 800a24e:	42a8      	cmp	r0, r5
 800a250:	d02f      	beq.n	800a2b2 <__gethex+0xb6>
 800a252:	9400      	str	r4, [sp, #0]
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	7818      	ldrb	r0, [r3, #0]
 800a258:	2830      	cmp	r0, #48	@ 0x30
 800a25a:	d009      	beq.n	800a270 <__gethex+0x74>
 800a25c:	f7ff ffb9 	bl	800a1d2 <__hexdig_fun>
 800a260:	4242      	negs	r2, r0
 800a262:	4142      	adcs	r2, r0
 800a264:	2301      	movs	r3, #1
 800a266:	0025      	movs	r5, r4
 800a268:	9202      	str	r2, [sp, #8]
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	9c00      	ldr	r4, [sp, #0]
 800a26e:	e004      	b.n	800a27a <__gethex+0x7e>
 800a270:	9b00      	ldr	r3, [sp, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	e7ed      	b.n	800a254 <__gethex+0x58>
 800a278:	3401      	adds	r4, #1
 800a27a:	7820      	ldrb	r0, [r4, #0]
 800a27c:	f7ff ffa9 	bl	800a1d2 <__hexdig_fun>
 800a280:	1e07      	subs	r7, r0, #0
 800a282:	d1f9      	bne.n	800a278 <__gethex+0x7c>
 800a284:	2201      	movs	r2, #1
 800a286:	0020      	movs	r0, r4
 800a288:	4990      	ldr	r1, [pc, #576]	@ (800a4cc <__gethex+0x2d0>)
 800a28a:	f7ff f863 	bl	8009354 <strncmp>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d10d      	bne.n	800a2ae <__gethex+0xb2>
 800a292:	2d00      	cmp	r5, #0
 800a294:	d106      	bne.n	800a2a4 <__gethex+0xa8>
 800a296:	3401      	adds	r4, #1
 800a298:	0025      	movs	r5, r4
 800a29a:	7820      	ldrb	r0, [r4, #0]
 800a29c:	f7ff ff99 	bl	800a1d2 <__hexdig_fun>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d102      	bne.n	800a2aa <__gethex+0xae>
 800a2a4:	1b2d      	subs	r5, r5, r4
 800a2a6:	00af      	lsls	r7, r5, #2
 800a2a8:	e003      	b.n	800a2b2 <__gethex+0xb6>
 800a2aa:	3401      	adds	r4, #1
 800a2ac:	e7f5      	b.n	800a29a <__gethex+0x9e>
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	d1f8      	bne.n	800a2a4 <__gethex+0xa8>
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	7823      	ldrb	r3, [r4, #0]
 800a2b6:	0026      	movs	r6, r4
 800a2b8:	4393      	bics	r3, r2
 800a2ba:	2b50      	cmp	r3, #80	@ 0x50
 800a2bc:	d11d      	bne.n	800a2fa <__gethex+0xfe>
 800a2be:	7863      	ldrb	r3, [r4, #1]
 800a2c0:	2b2b      	cmp	r3, #43	@ 0x2b
 800a2c2:	d02d      	beq.n	800a320 <__gethex+0x124>
 800a2c4:	2b2d      	cmp	r3, #45	@ 0x2d
 800a2c6:	d02f      	beq.n	800a328 <__gethex+0x12c>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	1c66      	adds	r6, r4, #1
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	7830      	ldrb	r0, [r6, #0]
 800a2d0:	f7ff ff7f 	bl	800a1d2 <__hexdig_fun>
 800a2d4:	1e43      	subs	r3, r0, #1
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	0005      	movs	r5, r0
 800a2da:	2b18      	cmp	r3, #24
 800a2dc:	d82a      	bhi.n	800a334 <__gethex+0x138>
 800a2de:	7870      	ldrb	r0, [r6, #1]
 800a2e0:	f7ff ff77 	bl	800a1d2 <__hexdig_fun>
 800a2e4:	1e43      	subs	r3, r0, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	3601      	adds	r6, #1
 800a2ea:	3d10      	subs	r5, #16
 800a2ec:	2b18      	cmp	r3, #24
 800a2ee:	d91d      	bls.n	800a32c <__gethex+0x130>
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d000      	beq.n	800a2f8 <__gethex+0xfc>
 800a2f6:	426d      	negs	r5, r5
 800a2f8:	197f      	adds	r7, r7, r5
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	601e      	str	r6, [r3, #0]
 800a2fe:	9b02      	ldr	r3, [sp, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d019      	beq.n	800a338 <__gethex+0x13c>
 800a304:	9b05      	ldr	r3, [sp, #20]
 800a306:	2606      	movs	r6, #6
 800a308:	425a      	negs	r2, r3
 800a30a:	4153      	adcs	r3, r2
 800a30c:	425b      	negs	r3, r3
 800a30e:	401e      	ands	r6, r3
 800a310:	0030      	movs	r0, r6
 800a312:	b009      	add	sp, #36	@ 0x24
 800a314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a316:	2301      	movs	r3, #1
 800a318:	2700      	movs	r7, #0
 800a31a:	9c00      	ldr	r4, [sp, #0]
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	e7c8      	b.n	800a2b2 <__gethex+0xb6>
 800a320:	2300      	movs	r3, #0
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	1ca6      	adds	r6, r4, #2
 800a326:	e7d2      	b.n	800a2ce <__gethex+0xd2>
 800a328:	2301      	movs	r3, #1
 800a32a:	e7fa      	b.n	800a322 <__gethex+0x126>
 800a32c:	230a      	movs	r3, #10
 800a32e:	435d      	muls	r5, r3
 800a330:	182d      	adds	r5, r5, r0
 800a332:	e7d4      	b.n	800a2de <__gethex+0xe2>
 800a334:	0026      	movs	r6, r4
 800a336:	e7e0      	b.n	800a2fa <__gethex+0xfe>
 800a338:	9b00      	ldr	r3, [sp, #0]
 800a33a:	9902      	ldr	r1, [sp, #8]
 800a33c:	1ae3      	subs	r3, r4, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	2b07      	cmp	r3, #7
 800a342:	dc0a      	bgt.n	800a35a <__gethex+0x15e>
 800a344:	9803      	ldr	r0, [sp, #12]
 800a346:	f000 fd29 	bl	800ad9c <_Balloc>
 800a34a:	1e05      	subs	r5, r0, #0
 800a34c:	d108      	bne.n	800a360 <__gethex+0x164>
 800a34e:	002a      	movs	r2, r5
 800a350:	21e4      	movs	r1, #228	@ 0xe4
 800a352:	4b5f      	ldr	r3, [pc, #380]	@ (800a4d0 <__gethex+0x2d4>)
 800a354:	485f      	ldr	r0, [pc, #380]	@ (800a4d4 <__gethex+0x2d8>)
 800a356:	f001 fc17 	bl	800bb88 <__assert_func>
 800a35a:	3101      	adds	r1, #1
 800a35c:	105b      	asrs	r3, r3, #1
 800a35e:	e7ef      	b.n	800a340 <__gethex+0x144>
 800a360:	0003      	movs	r3, r0
 800a362:	3314      	adds	r3, #20
 800a364:	9302      	str	r3, [sp, #8]
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	2300      	movs	r3, #0
 800a36a:	001e      	movs	r6, r3
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	42a3      	cmp	r3, r4
 800a372:	d338      	bcc.n	800a3e6 <__gethex+0x1ea>
 800a374:	9c05      	ldr	r4, [sp, #20]
 800a376:	9b02      	ldr	r3, [sp, #8]
 800a378:	c440      	stmia	r4!, {r6}
 800a37a:	1ae4      	subs	r4, r4, r3
 800a37c:	10a4      	asrs	r4, r4, #2
 800a37e:	0030      	movs	r0, r6
 800a380:	612c      	str	r4, [r5, #16]
 800a382:	f000 fe03 	bl	800af8c <__hi0bits>
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	0164      	lsls	r4, r4, #5
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1a26      	subs	r6, r4, r0
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	429e      	cmp	r6, r3
 800a392:	dd52      	ble.n	800a43a <__gethex+0x23e>
 800a394:	1af6      	subs	r6, r6, r3
 800a396:	0031      	movs	r1, r6
 800a398:	0028      	movs	r0, r5
 800a39a:	f001 f9a6 	bl	800b6ea <__any_on>
 800a39e:	1e04      	subs	r4, r0, #0
 800a3a0:	d00f      	beq.n	800a3c2 <__gethex+0x1c6>
 800a3a2:	2401      	movs	r4, #1
 800a3a4:	231f      	movs	r3, #31
 800a3a6:	0020      	movs	r0, r4
 800a3a8:	1e72      	subs	r2, r6, #1
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	4098      	lsls	r0, r3
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	1151      	asrs	r1, r2, #5
 800a3b2:	9802      	ldr	r0, [sp, #8]
 800a3b4:	0089      	lsls	r1, r1, #2
 800a3b6:	5809      	ldr	r1, [r1, r0]
 800a3b8:	4219      	tst	r1, r3
 800a3ba:	d002      	beq.n	800a3c2 <__gethex+0x1c6>
 800a3bc:	42a2      	cmp	r2, r4
 800a3be:	dc34      	bgt.n	800a42a <__gethex+0x22e>
 800a3c0:	2402      	movs	r4, #2
 800a3c2:	0031      	movs	r1, r6
 800a3c4:	0028      	movs	r0, r5
 800a3c6:	f7ff feb1 	bl	800a12c <rshift>
 800a3ca:	19bf      	adds	r7, r7, r6
 800a3cc:	9b01      	ldr	r3, [sp, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	42bb      	cmp	r3, r7
 800a3d2:	da42      	bge.n	800a45a <__gethex+0x25e>
 800a3d4:	0029      	movs	r1, r5
 800a3d6:	9803      	ldr	r0, [sp, #12]
 800a3d8:	f000 fd24 	bl	800ae24 <_Bfree>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3e0:	26a3      	movs	r6, #163	@ 0xa3
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	e794      	b.n	800a310 <__gethex+0x114>
 800a3e6:	3c01      	subs	r4, #1
 800a3e8:	7823      	ldrb	r3, [r4, #0]
 800a3ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3ec:	d012      	beq.n	800a414 <__gethex+0x218>
 800a3ee:	9b04      	ldr	r3, [sp, #16]
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	d104      	bne.n	800a3fe <__gethex+0x202>
 800a3f4:	9b05      	ldr	r3, [sp, #20]
 800a3f6:	c340      	stmia	r3!, {r6}
 800a3f8:	2600      	movs	r6, #0
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	9604      	str	r6, [sp, #16]
 800a3fe:	7820      	ldrb	r0, [r4, #0]
 800a400:	f7ff fee7 	bl	800a1d2 <__hexdig_fun>
 800a404:	230f      	movs	r3, #15
 800a406:	4018      	ands	r0, r3
 800a408:	9b04      	ldr	r3, [sp, #16]
 800a40a:	4098      	lsls	r0, r3
 800a40c:	3304      	adds	r3, #4
 800a40e:	4306      	orrs	r6, r0
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	e7ac      	b.n	800a36e <__gethex+0x172>
 800a414:	9b00      	ldr	r3, [sp, #0]
 800a416:	42a3      	cmp	r3, r4
 800a418:	d8e9      	bhi.n	800a3ee <__gethex+0x1f2>
 800a41a:	2201      	movs	r2, #1
 800a41c:	0020      	movs	r0, r4
 800a41e:	492b      	ldr	r1, [pc, #172]	@ (800a4cc <__gethex+0x2d0>)
 800a420:	f7fe ff98 	bl	8009354 <strncmp>
 800a424:	2800      	cmp	r0, #0
 800a426:	d1e2      	bne.n	800a3ee <__gethex+0x1f2>
 800a428:	e7a1      	b.n	800a36e <__gethex+0x172>
 800a42a:	0028      	movs	r0, r5
 800a42c:	1eb1      	subs	r1, r6, #2
 800a42e:	f001 f95c 	bl	800b6ea <__any_on>
 800a432:	2800      	cmp	r0, #0
 800a434:	d0c4      	beq.n	800a3c0 <__gethex+0x1c4>
 800a436:	2403      	movs	r4, #3
 800a438:	e7c3      	b.n	800a3c2 <__gethex+0x1c6>
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	2400      	movs	r4, #0
 800a43e:	429e      	cmp	r6, r3
 800a440:	dac4      	bge.n	800a3cc <__gethex+0x1d0>
 800a442:	1b9e      	subs	r6, r3, r6
 800a444:	0029      	movs	r1, r5
 800a446:	0032      	movs	r2, r6
 800a448:	9803      	ldr	r0, [sp, #12]
 800a44a:	f000 ff15 	bl	800b278 <__lshift>
 800a44e:	0003      	movs	r3, r0
 800a450:	3314      	adds	r3, #20
 800a452:	0005      	movs	r5, r0
 800a454:	1bbf      	subs	r7, r7, r6
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	e7b8      	b.n	800a3cc <__gethex+0x1d0>
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	685e      	ldr	r6, [r3, #4]
 800a45e:	42be      	cmp	r6, r7
 800a460:	dd6f      	ble.n	800a542 <__gethex+0x346>
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	1bf6      	subs	r6, r6, r7
 800a466:	42b3      	cmp	r3, r6
 800a468:	dc36      	bgt.n	800a4d8 <__gethex+0x2dc>
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d024      	beq.n	800a4bc <__gethex+0x2c0>
 800a472:	2b03      	cmp	r3, #3
 800a474:	d026      	beq.n	800a4c4 <__gethex+0x2c8>
 800a476:	2b01      	cmp	r3, #1
 800a478:	d117      	bne.n	800a4aa <__gethex+0x2ae>
 800a47a:	9b00      	ldr	r3, [sp, #0]
 800a47c:	42b3      	cmp	r3, r6
 800a47e:	d114      	bne.n	800a4aa <__gethex+0x2ae>
 800a480:	2b01      	cmp	r3, #1
 800a482:	d10b      	bne.n	800a49c <__gethex+0x2a0>
 800a484:	9b01      	ldr	r3, [sp, #4]
 800a486:	9a07      	ldr	r2, [sp, #28]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2662      	movs	r6, #98	@ 0x62
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	2301      	movs	r3, #1
 800a490:	9a02      	ldr	r2, [sp, #8]
 800a492:	612b      	str	r3, [r5, #16]
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a498:	601d      	str	r5, [r3, #0]
 800a49a:	e739      	b.n	800a310 <__gethex+0x114>
 800a49c:	9900      	ldr	r1, [sp, #0]
 800a49e:	0028      	movs	r0, r5
 800a4a0:	3901      	subs	r1, #1
 800a4a2:	f001 f922 	bl	800b6ea <__any_on>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d1ec      	bne.n	800a484 <__gethex+0x288>
 800a4aa:	0029      	movs	r1, r5
 800a4ac:	9803      	ldr	r0, [sp, #12]
 800a4ae:	f000 fcb9 	bl	800ae24 <_Bfree>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4b6:	2650      	movs	r6, #80	@ 0x50
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	e729      	b.n	800a310 <__gethex+0x114>
 800a4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1f3      	bne.n	800a4aa <__gethex+0x2ae>
 800a4c2:	e7df      	b.n	800a484 <__gethex+0x288>
 800a4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1dc      	bne.n	800a484 <__gethex+0x288>
 800a4ca:	e7ee      	b.n	800a4aa <__gethex+0x2ae>
 800a4cc:	0800c1f1 	.word	0x0800c1f1
 800a4d0:	0800c3cd 	.word	0x0800c3cd
 800a4d4:	0800c3de 	.word	0x0800c3de
 800a4d8:	1e77      	subs	r7, r6, #1
 800a4da:	2c00      	cmp	r4, #0
 800a4dc:	d12f      	bne.n	800a53e <__gethex+0x342>
 800a4de:	2f00      	cmp	r7, #0
 800a4e0:	d004      	beq.n	800a4ec <__gethex+0x2f0>
 800a4e2:	0039      	movs	r1, r7
 800a4e4:	0028      	movs	r0, r5
 800a4e6:	f001 f900 	bl	800b6ea <__any_on>
 800a4ea:	0004      	movs	r4, r0
 800a4ec:	231f      	movs	r3, #31
 800a4ee:	117a      	asrs	r2, r7, #5
 800a4f0:	401f      	ands	r7, r3
 800a4f2:	3b1e      	subs	r3, #30
 800a4f4:	40bb      	lsls	r3, r7
 800a4f6:	9902      	ldr	r1, [sp, #8]
 800a4f8:	0092      	lsls	r2, r2, #2
 800a4fa:	5852      	ldr	r2, [r2, r1]
 800a4fc:	421a      	tst	r2, r3
 800a4fe:	d001      	beq.n	800a504 <__gethex+0x308>
 800a500:	2302      	movs	r3, #2
 800a502:	431c      	orrs	r4, r3
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	0031      	movs	r1, r6
 800a508:	1b9b      	subs	r3, r3, r6
 800a50a:	2602      	movs	r6, #2
 800a50c:	0028      	movs	r0, r5
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	f7ff fe0c 	bl	800a12c <rshift>
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	685f      	ldr	r7, [r3, #4]
 800a518:	2c00      	cmp	r4, #0
 800a51a:	d03f      	beq.n	800a59c <__gethex+0x3a0>
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d010      	beq.n	800a546 <__gethex+0x34a>
 800a524:	2b03      	cmp	r3, #3
 800a526:	d012      	beq.n	800a54e <__gethex+0x352>
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d106      	bne.n	800a53a <__gethex+0x33e>
 800a52c:	07a2      	lsls	r2, r4, #30
 800a52e:	d504      	bpl.n	800a53a <__gethex+0x33e>
 800a530:	9a02      	ldr	r2, [sp, #8]
 800a532:	6812      	ldr	r2, [r2, #0]
 800a534:	4314      	orrs	r4, r2
 800a536:	421c      	tst	r4, r3
 800a538:	d10c      	bne.n	800a554 <__gethex+0x358>
 800a53a:	2310      	movs	r3, #16
 800a53c:	e02d      	b.n	800a59a <__gethex+0x39e>
 800a53e:	2401      	movs	r4, #1
 800a540:	e7d4      	b.n	800a4ec <__gethex+0x2f0>
 800a542:	2601      	movs	r6, #1
 800a544:	e7e8      	b.n	800a518 <__gethex+0x31c>
 800a546:	2301      	movs	r3, #1
 800a548:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a54e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0f2      	beq.n	800a53a <__gethex+0x33e>
 800a554:	692b      	ldr	r3, [r5, #16]
 800a556:	2000      	movs	r0, #0
 800a558:	9302      	str	r3, [sp, #8]
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	002b      	movs	r3, r5
 800a560:	9a04      	ldr	r2, [sp, #16]
 800a562:	3314      	adds	r3, #20
 800a564:	1899      	adds	r1, r3, r2
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	1c54      	adds	r4, r2, #1
 800a56a:	d01c      	beq.n	800a5a6 <__gethex+0x3aa>
 800a56c:	3201      	adds	r2, #1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	002b      	movs	r3, r5
 800a572:	3314      	adds	r3, #20
 800a574:	2e02      	cmp	r6, #2
 800a576:	d13f      	bne.n	800a5f8 <__gethex+0x3fc>
 800a578:	9a01      	ldr	r2, [sp, #4]
 800a57a:	9900      	ldr	r1, [sp, #0]
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	3a01      	subs	r2, #1
 800a580:	428a      	cmp	r2, r1
 800a582:	d109      	bne.n	800a598 <__gethex+0x39c>
 800a584:	000a      	movs	r2, r1
 800a586:	201f      	movs	r0, #31
 800a588:	4010      	ands	r0, r2
 800a58a:	2201      	movs	r2, #1
 800a58c:	4082      	lsls	r2, r0
 800a58e:	1149      	asrs	r1, r1, #5
 800a590:	0089      	lsls	r1, r1, #2
 800a592:	58cb      	ldr	r3, [r1, r3]
 800a594:	4213      	tst	r3, r2
 800a596:	d13d      	bne.n	800a614 <__gethex+0x418>
 800a598:	2320      	movs	r3, #32
 800a59a:	431e      	orrs	r6, r3
 800a59c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a59e:	601d      	str	r5, [r3, #0]
 800a5a0:	9b07      	ldr	r3, [sp, #28]
 800a5a2:	601f      	str	r7, [r3, #0]
 800a5a4:	e6b4      	b.n	800a310 <__gethex+0x114>
 800a5a6:	c301      	stmia	r3!, {r0}
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	d8dc      	bhi.n	800a566 <__gethex+0x36a>
 800a5ac:	68ab      	ldr	r3, [r5, #8]
 800a5ae:	9a02      	ldr	r2, [sp, #8]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	db18      	blt.n	800a5e6 <__gethex+0x3ea>
 800a5b4:	6869      	ldr	r1, [r5, #4]
 800a5b6:	9803      	ldr	r0, [sp, #12]
 800a5b8:	3101      	adds	r1, #1
 800a5ba:	f000 fbef 	bl	800ad9c <_Balloc>
 800a5be:	1e04      	subs	r4, r0, #0
 800a5c0:	d104      	bne.n	800a5cc <__gethex+0x3d0>
 800a5c2:	0022      	movs	r2, r4
 800a5c4:	2184      	movs	r1, #132	@ 0x84
 800a5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a63c <__gethex+0x440>)
 800a5c8:	481d      	ldr	r0, [pc, #116]	@ (800a640 <__gethex+0x444>)
 800a5ca:	e6c4      	b.n	800a356 <__gethex+0x15a>
 800a5cc:	0029      	movs	r1, r5
 800a5ce:	692a      	ldr	r2, [r5, #16]
 800a5d0:	310c      	adds	r1, #12
 800a5d2:	3202      	adds	r2, #2
 800a5d4:	0092      	lsls	r2, r2, #2
 800a5d6:	300c      	adds	r0, #12
 800a5d8:	f7fe ff12 	bl	8009400 <memcpy>
 800a5dc:	0029      	movs	r1, r5
 800a5de:	9803      	ldr	r0, [sp, #12]
 800a5e0:	f000 fc20 	bl	800ae24 <_Bfree>
 800a5e4:	0025      	movs	r5, r4
 800a5e6:	692b      	ldr	r3, [r5, #16]
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	612a      	str	r2, [r5, #16]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	18eb      	adds	r3, r5, r3
 800a5f4:	605a      	str	r2, [r3, #4]
 800a5f6:	e7bb      	b.n	800a570 <__gethex+0x374>
 800a5f8:	692a      	ldr	r2, [r5, #16]
 800a5fa:	9902      	ldr	r1, [sp, #8]
 800a5fc:	428a      	cmp	r2, r1
 800a5fe:	dd0b      	ble.n	800a618 <__gethex+0x41c>
 800a600:	2101      	movs	r1, #1
 800a602:	0028      	movs	r0, r5
 800a604:	f7ff fd92 	bl	800a12c <rshift>
 800a608:	9b01      	ldr	r3, [sp, #4]
 800a60a:	3701      	adds	r7, #1
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	42bb      	cmp	r3, r7
 800a610:	da00      	bge.n	800a614 <__gethex+0x418>
 800a612:	e6df      	b.n	800a3d4 <__gethex+0x1d8>
 800a614:	2601      	movs	r6, #1
 800a616:	e7bf      	b.n	800a598 <__gethex+0x39c>
 800a618:	221f      	movs	r2, #31
 800a61a:	9c00      	ldr	r4, [sp, #0]
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4014      	ands	r4, r2
 800a620:	4211      	tst	r1, r2
 800a622:	d0f7      	beq.n	800a614 <__gethex+0x418>
 800a624:	9a04      	ldr	r2, [sp, #16]
 800a626:	189b      	adds	r3, r3, r2
 800a628:	3b04      	subs	r3, #4
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	f000 fcae 	bl	800af8c <__hi0bits>
 800a630:	2320      	movs	r3, #32
 800a632:	1b1b      	subs	r3, r3, r4
 800a634:	4298      	cmp	r0, r3
 800a636:	dbe3      	blt.n	800a600 <__gethex+0x404>
 800a638:	e7ec      	b.n	800a614 <__gethex+0x418>
 800a63a:	46c0      	nop			@ (mov r8, r8)
 800a63c:	0800c3cd 	.word	0x0800c3cd
 800a640:	0800c3de 	.word	0x0800c3de

0800a644 <L_shift>:
 800a644:	2308      	movs	r3, #8
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	2520      	movs	r5, #32
 800a64a:	1a9a      	subs	r2, r3, r2
 800a64c:	0092      	lsls	r2, r2, #2
 800a64e:	1aad      	subs	r5, r5, r2
 800a650:	6843      	ldr	r3, [r0, #4]
 800a652:	6804      	ldr	r4, [r0, #0]
 800a654:	001e      	movs	r6, r3
 800a656:	40ae      	lsls	r6, r5
 800a658:	40d3      	lsrs	r3, r2
 800a65a:	4334      	orrs	r4, r6
 800a65c:	6004      	str	r4, [r0, #0]
 800a65e:	6043      	str	r3, [r0, #4]
 800a660:	3004      	adds	r0, #4
 800a662:	4288      	cmp	r0, r1
 800a664:	d3f4      	bcc.n	800a650 <L_shift+0xc>
 800a666:	bd70      	pop	{r4, r5, r6, pc}

0800a668 <__match>:
 800a668:	b530      	push	{r4, r5, lr}
 800a66a:	6803      	ldr	r3, [r0, #0]
 800a66c:	780c      	ldrb	r4, [r1, #0]
 800a66e:	3301      	adds	r3, #1
 800a670:	2c00      	cmp	r4, #0
 800a672:	d102      	bne.n	800a67a <__match+0x12>
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	2001      	movs	r0, #1
 800a678:	bd30      	pop	{r4, r5, pc}
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	0015      	movs	r5, r2
 800a67e:	3d41      	subs	r5, #65	@ 0x41
 800a680:	2d19      	cmp	r5, #25
 800a682:	d800      	bhi.n	800a686 <__match+0x1e>
 800a684:	3220      	adds	r2, #32
 800a686:	3101      	adds	r1, #1
 800a688:	42a2      	cmp	r2, r4
 800a68a:	d0ef      	beq.n	800a66c <__match+0x4>
 800a68c:	2000      	movs	r0, #0
 800a68e:	e7f3      	b.n	800a678 <__match+0x10>

0800a690 <__hexnan>:
 800a690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a692:	680b      	ldr	r3, [r1, #0]
 800a694:	b08b      	sub	sp, #44	@ 0x2c
 800a696:	9201      	str	r2, [sp, #4]
 800a698:	9901      	ldr	r1, [sp, #4]
 800a69a:	115a      	asrs	r2, r3, #5
 800a69c:	0092      	lsls	r2, r2, #2
 800a69e:	188a      	adds	r2, r1, r2
 800a6a0:	9202      	str	r2, [sp, #8]
 800a6a2:	0019      	movs	r1, r3
 800a6a4:	221f      	movs	r2, #31
 800a6a6:	4011      	ands	r1, r2
 800a6a8:	9008      	str	r0, [sp, #32]
 800a6aa:	9106      	str	r1, [sp, #24]
 800a6ac:	4213      	tst	r3, r2
 800a6ae:	d002      	beq.n	800a6b6 <__hexnan+0x26>
 800a6b0:	9b02      	ldr	r3, [sp, #8]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	2500      	movs	r5, #0
 800a6ba:	1f1f      	subs	r7, r3, #4
 800a6bc:	003e      	movs	r6, r7
 800a6be:	003c      	movs	r4, r7
 800a6c0:	9b08      	ldr	r3, [sp, #32]
 800a6c2:	603d      	str	r5, [r7, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	9507      	str	r5, [sp, #28]
 800a6c8:	9305      	str	r3, [sp, #20]
 800a6ca:	9503      	str	r5, [sp, #12]
 800a6cc:	9b05      	ldr	r3, [sp, #20]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	785b      	ldrb	r3, [r3, #1]
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d028      	beq.n	800a72e <__hexnan+0x9e>
 800a6dc:	9804      	ldr	r0, [sp, #16]
 800a6de:	f7ff fd78 	bl	800a1d2 <__hexdig_fun>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d155      	bne.n	800a792 <__hexnan+0x102>
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	d819      	bhi.n	800a720 <__hexnan+0x90>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	9a07      	ldr	r2, [sp, #28]
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	dd12      	ble.n	800a71a <__hexnan+0x8a>
 800a6f4:	42b4      	cmp	r4, r6
 800a6f6:	d206      	bcs.n	800a706 <__hexnan+0x76>
 800a6f8:	2d07      	cmp	r5, #7
 800a6fa:	dc04      	bgt.n	800a706 <__hexnan+0x76>
 800a6fc:	002a      	movs	r2, r5
 800a6fe:	0031      	movs	r1, r6
 800a700:	0020      	movs	r0, r4
 800a702:	f7ff ff9f 	bl	800a644 <L_shift>
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	2508      	movs	r5, #8
 800a70a:	429c      	cmp	r4, r3
 800a70c:	d905      	bls.n	800a71a <__hexnan+0x8a>
 800a70e:	1f26      	subs	r6, r4, #4
 800a710:	2500      	movs	r5, #0
 800a712:	0034      	movs	r4, r6
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	6035      	str	r5, [r6, #0]
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71c:	9305      	str	r3, [sp, #20]
 800a71e:	e7d5      	b.n	800a6cc <__hexnan+0x3c>
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	2b29      	cmp	r3, #41	@ 0x29
 800a724:	d15a      	bne.n	800a7dc <__hexnan+0x14c>
 800a726:	9b05      	ldr	r3, [sp, #20]
 800a728:	9a08      	ldr	r2, [sp, #32]
 800a72a:	3302      	adds	r3, #2
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d053      	beq.n	800a7dc <__hexnan+0x14c>
 800a734:	42b4      	cmp	r4, r6
 800a736:	d206      	bcs.n	800a746 <__hexnan+0xb6>
 800a738:	2d07      	cmp	r5, #7
 800a73a:	dc04      	bgt.n	800a746 <__hexnan+0xb6>
 800a73c:	002a      	movs	r2, r5
 800a73e:	0031      	movs	r1, r6
 800a740:	0020      	movs	r0, r4
 800a742:	f7ff ff7f 	bl	800a644 <L_shift>
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	429c      	cmp	r4, r3
 800a74a:	d936      	bls.n	800a7ba <__hexnan+0x12a>
 800a74c:	001a      	movs	r2, r3
 800a74e:	0023      	movs	r3, r4
 800a750:	cb02      	ldmia	r3!, {r1}
 800a752:	c202      	stmia	r2!, {r1}
 800a754:	429f      	cmp	r7, r3
 800a756:	d2fb      	bcs.n	800a750 <__hexnan+0xc0>
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	1c61      	adds	r1, r4, #1
 800a75c:	1eda      	subs	r2, r3, #3
 800a75e:	2304      	movs	r3, #4
 800a760:	4291      	cmp	r1, r2
 800a762:	d805      	bhi.n	800a770 <__hexnan+0xe0>
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	3b04      	subs	r3, #4
 800a768:	1b1b      	subs	r3, r3, r4
 800a76a:	089b      	lsrs	r3, r3, #2
 800a76c:	3301      	adds	r3, #1
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	9a01      	ldr	r2, [sp, #4]
 800a772:	18d3      	adds	r3, r2, r3
 800a774:	2200      	movs	r2, #0
 800a776:	c304      	stmia	r3!, {r2}
 800a778:	429f      	cmp	r7, r3
 800a77a:	d2fc      	bcs.n	800a776 <__hexnan+0xe6>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <__hexnan+0xfc>
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	429f      	cmp	r7, r3
 800a786:	d127      	bne.n	800a7d8 <__hexnan+0x148>
 800a788:	2301      	movs	r3, #1
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	2005      	movs	r0, #5
 800a78e:	b00b      	add	sp, #44	@ 0x2c
 800a790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	3501      	adds	r5, #1
 800a796:	3301      	adds	r3, #1
 800a798:	9303      	str	r3, [sp, #12]
 800a79a:	2d08      	cmp	r5, #8
 800a79c:	dd06      	ble.n	800a7ac <__hexnan+0x11c>
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d9ba      	bls.n	800a71a <__hexnan+0x8a>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2501      	movs	r5, #1
 800a7a8:	3c04      	subs	r4, #4
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	4010      	ands	r0, r2
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4303      	orrs	r3, r0
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	e7af      	b.n	800a71a <__hexnan+0x8a>
 800a7ba:	9b06      	ldr	r3, [sp, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0dd      	beq.n	800a77c <__hexnan+0xec>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	9a06      	ldr	r2, [sp, #24]
 800a7c4:	9902      	ldr	r1, [sp, #8]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	4252      	negs	r2, r2
 800a7cc:	40da      	lsrs	r2, r3
 800a7ce:	3904      	subs	r1, #4
 800a7d0:	680b      	ldr	r3, [r1, #0]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	600b      	str	r3, [r1, #0]
 800a7d6:	e7d1      	b.n	800a77c <__hexnan+0xec>
 800a7d8:	3f04      	subs	r7, #4
 800a7da:	e7cf      	b.n	800a77c <__hexnan+0xec>
 800a7dc:	2004      	movs	r0, #4
 800a7de:	e7d6      	b.n	800a78e <__hexnan+0xfe>

0800a7e0 <__ssputs_r>:
 800a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e2:	688e      	ldr	r6, [r1, #8]
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	001f      	movs	r7, r3
 800a7e8:	000c      	movs	r4, r1
 800a7ea:	680b      	ldr	r3, [r1, #0]
 800a7ec:	9002      	str	r0, [sp, #8]
 800a7ee:	9203      	str	r2, [sp, #12]
 800a7f0:	42be      	cmp	r6, r7
 800a7f2:	d830      	bhi.n	800a856 <__ssputs_r+0x76>
 800a7f4:	210c      	movs	r1, #12
 800a7f6:	5e62      	ldrsh	r2, [r4, r1]
 800a7f8:	2190      	movs	r1, #144	@ 0x90
 800a7fa:	00c9      	lsls	r1, r1, #3
 800a7fc:	420a      	tst	r2, r1
 800a7fe:	d028      	beq.n	800a852 <__ssputs_r+0x72>
 800a800:	2003      	movs	r0, #3
 800a802:	6921      	ldr	r1, [r4, #16]
 800a804:	1a5b      	subs	r3, r3, r1
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	6963      	ldr	r3, [r4, #20]
 800a80a:	4343      	muls	r3, r0
 800a80c:	9801      	ldr	r0, [sp, #4]
 800a80e:	0fdd      	lsrs	r5, r3, #31
 800a810:	18ed      	adds	r5, r5, r3
 800a812:	1c7b      	adds	r3, r7, #1
 800a814:	181b      	adds	r3, r3, r0
 800a816:	106d      	asrs	r5, r5, #1
 800a818:	42ab      	cmp	r3, r5
 800a81a:	d900      	bls.n	800a81e <__ssputs_r+0x3e>
 800a81c:	001d      	movs	r5, r3
 800a81e:	0552      	lsls	r2, r2, #21
 800a820:	d528      	bpl.n	800a874 <__ssputs_r+0x94>
 800a822:	0029      	movs	r1, r5
 800a824:	9802      	ldr	r0, [sp, #8]
 800a826:	f000 f965 	bl	800aaf4 <_malloc_r>
 800a82a:	1e06      	subs	r6, r0, #0
 800a82c:	d02c      	beq.n	800a888 <__ssputs_r+0xa8>
 800a82e:	9a01      	ldr	r2, [sp, #4]
 800a830:	6921      	ldr	r1, [r4, #16]
 800a832:	f7fe fde5 	bl	8009400 <memcpy>
 800a836:	89a2      	ldrh	r2, [r4, #12]
 800a838:	4b18      	ldr	r3, [pc, #96]	@ (800a89c <__ssputs_r+0xbc>)
 800a83a:	401a      	ands	r2, r3
 800a83c:	2380      	movs	r3, #128	@ 0x80
 800a83e:	4313      	orrs	r3, r2
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	6126      	str	r6, [r4, #16]
 800a846:	18f6      	adds	r6, r6, r3
 800a848:	6026      	str	r6, [r4, #0]
 800a84a:	003e      	movs	r6, r7
 800a84c:	6165      	str	r5, [r4, #20]
 800a84e:	1aed      	subs	r5, r5, r3
 800a850:	60a5      	str	r5, [r4, #8]
 800a852:	42be      	cmp	r6, r7
 800a854:	d900      	bls.n	800a858 <__ssputs_r+0x78>
 800a856:	003e      	movs	r6, r7
 800a858:	0032      	movs	r2, r6
 800a85a:	9903      	ldr	r1, [sp, #12]
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	f001 f8fc 	bl	800ba5a <memmove>
 800a862:	2000      	movs	r0, #0
 800a864:	68a3      	ldr	r3, [r4, #8]
 800a866:	1b9b      	subs	r3, r3, r6
 800a868:	60a3      	str	r3, [r4, #8]
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	199b      	adds	r3, r3, r6
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	b005      	add	sp, #20
 800a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a874:	002a      	movs	r2, r5
 800a876:	9802      	ldr	r0, [sp, #8]
 800a878:	f000 ffa6 	bl	800b7c8 <_realloc_r>
 800a87c:	1e06      	subs	r6, r0, #0
 800a87e:	d1e0      	bne.n	800a842 <__ssputs_r+0x62>
 800a880:	6921      	ldr	r1, [r4, #16]
 800a882:	9802      	ldr	r0, [sp, #8]
 800a884:	f001 f9cc 	bl	800bc20 <_free_r>
 800a888:	230c      	movs	r3, #12
 800a88a:	2001      	movs	r0, #1
 800a88c:	9a02      	ldr	r2, [sp, #8]
 800a88e:	4240      	negs	r0, r0
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	89a2      	ldrh	r2, [r4, #12]
 800a894:	3334      	adds	r3, #52	@ 0x34
 800a896:	4313      	orrs	r3, r2
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	e7e9      	b.n	800a870 <__ssputs_r+0x90>
 800a89c:	fffffb7f 	.word	0xfffffb7f

0800a8a0 <_svfiprintf_r>:
 800a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a2:	b0a1      	sub	sp, #132	@ 0x84
 800a8a4:	9003      	str	r0, [sp, #12]
 800a8a6:	001d      	movs	r5, r3
 800a8a8:	898b      	ldrh	r3, [r1, #12]
 800a8aa:	000f      	movs	r7, r1
 800a8ac:	0016      	movs	r6, r2
 800a8ae:	061b      	lsls	r3, r3, #24
 800a8b0:	d511      	bpl.n	800a8d6 <_svfiprintf_r+0x36>
 800a8b2:	690b      	ldr	r3, [r1, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10e      	bne.n	800a8d6 <_svfiprintf_r+0x36>
 800a8b8:	2140      	movs	r1, #64	@ 0x40
 800a8ba:	f000 f91b 	bl	800aaf4 <_malloc_r>
 800a8be:	6038      	str	r0, [r7, #0]
 800a8c0:	6138      	str	r0, [r7, #16]
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d105      	bne.n	800a8d2 <_svfiprintf_r+0x32>
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	9a03      	ldr	r2, [sp, #12]
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	4240      	negs	r0, r0
 800a8d0:	e0cf      	b.n	800aa72 <_svfiprintf_r+0x1d2>
 800a8d2:	2340      	movs	r3, #64	@ 0x40
 800a8d4:	617b      	str	r3, [r7, #20]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	ac08      	add	r4, sp, #32
 800a8da:	6163      	str	r3, [r4, #20]
 800a8dc:	3320      	adds	r3, #32
 800a8de:	7663      	strb	r3, [r4, #25]
 800a8e0:	3310      	adds	r3, #16
 800a8e2:	76a3      	strb	r3, [r4, #26]
 800a8e4:	9507      	str	r5, [sp, #28]
 800a8e6:	0035      	movs	r5, r6
 800a8e8:	782b      	ldrb	r3, [r5, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <_svfiprintf_r+0x52>
 800a8ee:	2b25      	cmp	r3, #37	@ 0x25
 800a8f0:	d148      	bne.n	800a984 <_svfiprintf_r+0xe4>
 800a8f2:	1bab      	subs	r3, r5, r6
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	d00b      	beq.n	800a912 <_svfiprintf_r+0x72>
 800a8fa:	0032      	movs	r2, r6
 800a8fc:	0039      	movs	r1, r7
 800a8fe:	9803      	ldr	r0, [sp, #12]
 800a900:	f7ff ff6e 	bl	800a7e0 <__ssputs_r>
 800a904:	3001      	adds	r0, #1
 800a906:	d100      	bne.n	800a90a <_svfiprintf_r+0x6a>
 800a908:	e0ae      	b.n	800aa68 <_svfiprintf_r+0x1c8>
 800a90a:	6963      	ldr	r3, [r4, #20]
 800a90c:	9a05      	ldr	r2, [sp, #20]
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	782b      	ldrb	r3, [r5, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d100      	bne.n	800a91a <_svfiprintf_r+0x7a>
 800a918:	e0a6      	b.n	800aa68 <_svfiprintf_r+0x1c8>
 800a91a:	2201      	movs	r2, #1
 800a91c:	2300      	movs	r3, #0
 800a91e:	4252      	negs	r2, r2
 800a920:	6062      	str	r2, [r4, #4]
 800a922:	a904      	add	r1, sp, #16
 800a924:	3254      	adds	r2, #84	@ 0x54
 800a926:	1852      	adds	r2, r2, r1
 800a928:	1c6e      	adds	r6, r5, #1
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	60e3      	str	r3, [r4, #12]
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a934:	4b54      	ldr	r3, [pc, #336]	@ (800aa88 <_svfiprintf_r+0x1e8>)
 800a936:	2205      	movs	r2, #5
 800a938:	0018      	movs	r0, r3
 800a93a:	7831      	ldrb	r1, [r6, #0]
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	f7fe fd54 	bl	80093ea <memchr>
 800a942:	1c75      	adds	r5, r6, #1
 800a944:	2800      	cmp	r0, #0
 800a946:	d11f      	bne.n	800a988 <_svfiprintf_r+0xe8>
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	06d3      	lsls	r3, r2, #27
 800a94c:	d504      	bpl.n	800a958 <_svfiprintf_r+0xb8>
 800a94e:	2353      	movs	r3, #83	@ 0x53
 800a950:	a904      	add	r1, sp, #16
 800a952:	185b      	adds	r3, r3, r1
 800a954:	2120      	movs	r1, #32
 800a956:	7019      	strb	r1, [r3, #0]
 800a958:	0713      	lsls	r3, r2, #28
 800a95a:	d504      	bpl.n	800a966 <_svfiprintf_r+0xc6>
 800a95c:	2353      	movs	r3, #83	@ 0x53
 800a95e:	a904      	add	r1, sp, #16
 800a960:	185b      	adds	r3, r3, r1
 800a962:	212b      	movs	r1, #43	@ 0x2b
 800a964:	7019      	strb	r1, [r3, #0]
 800a966:	7833      	ldrb	r3, [r6, #0]
 800a968:	2b2a      	cmp	r3, #42	@ 0x2a
 800a96a:	d016      	beq.n	800a99a <_svfiprintf_r+0xfa>
 800a96c:	0035      	movs	r5, r6
 800a96e:	2100      	movs	r1, #0
 800a970:	200a      	movs	r0, #10
 800a972:	68e3      	ldr	r3, [r4, #12]
 800a974:	782a      	ldrb	r2, [r5, #0]
 800a976:	1c6e      	adds	r6, r5, #1
 800a978:	3a30      	subs	r2, #48	@ 0x30
 800a97a:	2a09      	cmp	r2, #9
 800a97c:	d950      	bls.n	800aa20 <_svfiprintf_r+0x180>
 800a97e:	2900      	cmp	r1, #0
 800a980:	d111      	bne.n	800a9a6 <_svfiprintf_r+0x106>
 800a982:	e017      	b.n	800a9b4 <_svfiprintf_r+0x114>
 800a984:	3501      	adds	r5, #1
 800a986:	e7af      	b.n	800a8e8 <_svfiprintf_r+0x48>
 800a988:	9b05      	ldr	r3, [sp, #20]
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	1ac0      	subs	r0, r0, r3
 800a98e:	2301      	movs	r3, #1
 800a990:	4083      	lsls	r3, r0
 800a992:	4313      	orrs	r3, r2
 800a994:	002e      	movs	r6, r5
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	e7cc      	b.n	800a934 <_svfiprintf_r+0x94>
 800a99a:	9b07      	ldr	r3, [sp, #28]
 800a99c:	1d19      	adds	r1, r3, #4
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	9107      	str	r1, [sp, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	db01      	blt.n	800a9aa <_svfiprintf_r+0x10a>
 800a9a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9a8:	e004      	b.n	800a9b4 <_svfiprintf_r+0x114>
 800a9aa:	425b      	negs	r3, r3
 800a9ac:	60e3      	str	r3, [r4, #12]
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	6023      	str	r3, [r4, #0]
 800a9b4:	782b      	ldrb	r3, [r5, #0]
 800a9b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9b8:	d10c      	bne.n	800a9d4 <_svfiprintf_r+0x134>
 800a9ba:	786b      	ldrb	r3, [r5, #1]
 800a9bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9be:	d134      	bne.n	800aa2a <_svfiprintf_r+0x18a>
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	3502      	adds	r5, #2
 800a9c4:	1d1a      	adds	r2, r3, #4
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	9207      	str	r2, [sp, #28]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da01      	bge.n	800a9d2 <_svfiprintf_r+0x132>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	425b      	negs	r3, r3
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	4e2d      	ldr	r6, [pc, #180]	@ (800aa8c <_svfiprintf_r+0x1ec>)
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	0030      	movs	r0, r6
 800a9da:	7829      	ldrb	r1, [r5, #0]
 800a9dc:	f7fe fd05 	bl	80093ea <memchr>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d006      	beq.n	800a9f2 <_svfiprintf_r+0x152>
 800a9e4:	2340      	movs	r3, #64	@ 0x40
 800a9e6:	1b80      	subs	r0, r0, r6
 800a9e8:	4083      	lsls	r3, r0
 800a9ea:	6822      	ldr	r2, [r4, #0]
 800a9ec:	3501      	adds	r5, #1
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	7829      	ldrb	r1, [r5, #0]
 800a9f4:	2206      	movs	r2, #6
 800a9f6:	4826      	ldr	r0, [pc, #152]	@ (800aa90 <_svfiprintf_r+0x1f0>)
 800a9f8:	1c6e      	adds	r6, r5, #1
 800a9fa:	7621      	strb	r1, [r4, #24]
 800a9fc:	f7fe fcf5 	bl	80093ea <memchr>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d038      	beq.n	800aa76 <_svfiprintf_r+0x1d6>
 800aa04:	4b23      	ldr	r3, [pc, #140]	@ (800aa94 <_svfiprintf_r+0x1f4>)
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d122      	bne.n	800aa50 <_svfiprintf_r+0x1b0>
 800aa0a:	2207      	movs	r2, #7
 800aa0c:	9b07      	ldr	r3, [sp, #28]
 800aa0e:	3307      	adds	r3, #7
 800aa10:	4393      	bics	r3, r2
 800aa12:	3308      	adds	r3, #8
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	6963      	ldr	r3, [r4, #20]
 800aa18:	9a04      	ldr	r2, [sp, #16]
 800aa1a:	189b      	adds	r3, r3, r2
 800aa1c:	6163      	str	r3, [r4, #20]
 800aa1e:	e762      	b.n	800a8e6 <_svfiprintf_r+0x46>
 800aa20:	4343      	muls	r3, r0
 800aa22:	0035      	movs	r5, r6
 800aa24:	2101      	movs	r1, #1
 800aa26:	189b      	adds	r3, r3, r2
 800aa28:	e7a4      	b.n	800a974 <_svfiprintf_r+0xd4>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	200a      	movs	r0, #10
 800aa2e:	0019      	movs	r1, r3
 800aa30:	3501      	adds	r5, #1
 800aa32:	6063      	str	r3, [r4, #4]
 800aa34:	782a      	ldrb	r2, [r5, #0]
 800aa36:	1c6e      	adds	r6, r5, #1
 800aa38:	3a30      	subs	r2, #48	@ 0x30
 800aa3a:	2a09      	cmp	r2, #9
 800aa3c:	d903      	bls.n	800aa46 <_svfiprintf_r+0x1a6>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0c8      	beq.n	800a9d4 <_svfiprintf_r+0x134>
 800aa42:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa44:	e7c6      	b.n	800a9d4 <_svfiprintf_r+0x134>
 800aa46:	4341      	muls	r1, r0
 800aa48:	0035      	movs	r5, r6
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	1889      	adds	r1, r1, r2
 800aa4e:	e7f1      	b.n	800aa34 <_svfiprintf_r+0x194>
 800aa50:	aa07      	add	r2, sp, #28
 800aa52:	9200      	str	r2, [sp, #0]
 800aa54:	0021      	movs	r1, r4
 800aa56:	003a      	movs	r2, r7
 800aa58:	4b0f      	ldr	r3, [pc, #60]	@ (800aa98 <_svfiprintf_r+0x1f8>)
 800aa5a:	9803      	ldr	r0, [sp, #12]
 800aa5c:	f7fc fecc 	bl	80077f8 <_printf_float>
 800aa60:	9004      	str	r0, [sp, #16]
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	3301      	adds	r3, #1
 800aa66:	d1d6      	bne.n	800aa16 <_svfiprintf_r+0x176>
 800aa68:	89bb      	ldrh	r3, [r7, #12]
 800aa6a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa6c:	065b      	lsls	r3, r3, #25
 800aa6e:	d500      	bpl.n	800aa72 <_svfiprintf_r+0x1d2>
 800aa70:	e72c      	b.n	800a8cc <_svfiprintf_r+0x2c>
 800aa72:	b021      	add	sp, #132	@ 0x84
 800aa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa76:	aa07      	add	r2, sp, #28
 800aa78:	9200      	str	r2, [sp, #0]
 800aa7a:	0021      	movs	r1, r4
 800aa7c:	003a      	movs	r2, r7
 800aa7e:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <_svfiprintf_r+0x1f8>)
 800aa80:	9803      	ldr	r0, [sp, #12]
 800aa82:	f7fd f967 	bl	8007d54 <_printf_i>
 800aa86:	e7eb      	b.n	800aa60 <_svfiprintf_r+0x1c0>
 800aa88:	0800c43e 	.word	0x0800c43e
 800aa8c:	0800c444 	.word	0x0800c444
 800aa90:	0800c448 	.word	0x0800c448
 800aa94:	080077f9 	.word	0x080077f9
 800aa98:	0800a7e1 	.word	0x0800a7e1

0800aa9c <malloc>:
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	4b03      	ldr	r3, [pc, #12]	@ (800aaac <malloc+0x10>)
 800aaa0:	0001      	movs	r1, r0
 800aaa2:	6818      	ldr	r0, [r3, #0]
 800aaa4:	f000 f826 	bl	800aaf4 <_malloc_r>
 800aaa8:	bd10      	pop	{r4, pc}
 800aaaa:	46c0      	nop			@ (mov r8, r8)
 800aaac:	20000184 	.word	0x20000184

0800aab0 <sbrk_aligned>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4e0f      	ldr	r6, [pc, #60]	@ (800aaf0 <sbrk_aligned+0x40>)
 800aab4:	000d      	movs	r5, r1
 800aab6:	6831      	ldr	r1, [r6, #0]
 800aab8:	0004      	movs	r4, r0
 800aaba:	2900      	cmp	r1, #0
 800aabc:	d102      	bne.n	800aac4 <sbrk_aligned+0x14>
 800aabe:	f001 f83d 	bl	800bb3c <_sbrk_r>
 800aac2:	6030      	str	r0, [r6, #0]
 800aac4:	0029      	movs	r1, r5
 800aac6:	0020      	movs	r0, r4
 800aac8:	f001 f838 	bl	800bb3c <_sbrk_r>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d103      	bne.n	800aad8 <sbrk_aligned+0x28>
 800aad0:	2501      	movs	r5, #1
 800aad2:	426d      	negs	r5, r5
 800aad4:	0028      	movs	r0, r5
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	2303      	movs	r3, #3
 800aada:	1cc5      	adds	r5, r0, #3
 800aadc:	439d      	bics	r5, r3
 800aade:	42a8      	cmp	r0, r5
 800aae0:	d0f8      	beq.n	800aad4 <sbrk_aligned+0x24>
 800aae2:	1a29      	subs	r1, r5, r0
 800aae4:	0020      	movs	r0, r4
 800aae6:	f001 f829 	bl	800bb3c <_sbrk_r>
 800aaea:	3001      	adds	r0, #1
 800aaec:	d1f2      	bne.n	800aad4 <sbrk_aligned+0x24>
 800aaee:	e7ef      	b.n	800aad0 <sbrk_aligned+0x20>
 800aaf0:	20000890 	.word	0x20000890

0800aaf4 <_malloc_r>:
 800aaf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaf6:	2203      	movs	r2, #3
 800aaf8:	1ccb      	adds	r3, r1, #3
 800aafa:	4393      	bics	r3, r2
 800aafc:	3308      	adds	r3, #8
 800aafe:	0005      	movs	r5, r0
 800ab00:	001f      	movs	r7, r3
 800ab02:	2b0c      	cmp	r3, #12
 800ab04:	d234      	bcs.n	800ab70 <_malloc_r+0x7c>
 800ab06:	270c      	movs	r7, #12
 800ab08:	42b9      	cmp	r1, r7
 800ab0a:	d833      	bhi.n	800ab74 <_malloc_r+0x80>
 800ab0c:	0028      	movs	r0, r5
 800ab0e:	f000 f935 	bl	800ad7c <__malloc_lock>
 800ab12:	4e37      	ldr	r6, [pc, #220]	@ (800abf0 <_malloc_r+0xfc>)
 800ab14:	6833      	ldr	r3, [r6, #0]
 800ab16:	001c      	movs	r4, r3
 800ab18:	2c00      	cmp	r4, #0
 800ab1a:	d12f      	bne.n	800ab7c <_malloc_r+0x88>
 800ab1c:	0039      	movs	r1, r7
 800ab1e:	0028      	movs	r0, r5
 800ab20:	f7ff ffc6 	bl	800aab0 <sbrk_aligned>
 800ab24:	0004      	movs	r4, r0
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	d15f      	bne.n	800abea <_malloc_r+0xf6>
 800ab2a:	6834      	ldr	r4, [r6, #0]
 800ab2c:	9400      	str	r4, [sp, #0]
 800ab2e:	9b00      	ldr	r3, [sp, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d14a      	bne.n	800abca <_malloc_r+0xd6>
 800ab34:	2c00      	cmp	r4, #0
 800ab36:	d052      	beq.n	800abde <_malloc_r+0xea>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	0028      	movs	r0, r5
 800ab3c:	18e3      	adds	r3, r4, r3
 800ab3e:	9900      	ldr	r1, [sp, #0]
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	f000 fffb 	bl	800bb3c <_sbrk_r>
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d148      	bne.n	800abde <_malloc_r+0xea>
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	0028      	movs	r0, r5
 800ab50:	1aff      	subs	r7, r7, r3
 800ab52:	0039      	movs	r1, r7
 800ab54:	f7ff ffac 	bl	800aab0 <sbrk_aligned>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d040      	beq.n	800abde <_malloc_r+0xea>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	19db      	adds	r3, r3, r7
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	6833      	ldr	r3, [r6, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	d133      	bne.n	800abd2 <_malloc_r+0xde>
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	6033      	str	r3, [r6, #0]
 800ab6e:	e019      	b.n	800aba4 <_malloc_r+0xb0>
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dac9      	bge.n	800ab08 <_malloc_r+0x14>
 800ab74:	230c      	movs	r3, #12
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab7c:	6821      	ldr	r1, [r4, #0]
 800ab7e:	1bc9      	subs	r1, r1, r7
 800ab80:	d420      	bmi.n	800abc4 <_malloc_r+0xd0>
 800ab82:	290b      	cmp	r1, #11
 800ab84:	d90a      	bls.n	800ab9c <_malloc_r+0xa8>
 800ab86:	19e2      	adds	r2, r4, r7
 800ab88:	6027      	str	r7, [r4, #0]
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	d104      	bne.n	800ab98 <_malloc_r+0xa4>
 800ab8e:	6032      	str	r2, [r6, #0]
 800ab90:	6863      	ldr	r3, [r4, #4]
 800ab92:	6011      	str	r1, [r2, #0]
 800ab94:	6053      	str	r3, [r2, #4]
 800ab96:	e005      	b.n	800aba4 <_malloc_r+0xb0>
 800ab98:	605a      	str	r2, [r3, #4]
 800ab9a:	e7f9      	b.n	800ab90 <_malloc_r+0x9c>
 800ab9c:	6862      	ldr	r2, [r4, #4]
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	d10e      	bne.n	800abc0 <_malloc_r+0xcc>
 800aba2:	6032      	str	r2, [r6, #0]
 800aba4:	0028      	movs	r0, r5
 800aba6:	f000 f8f1 	bl	800ad8c <__malloc_unlock>
 800abaa:	0020      	movs	r0, r4
 800abac:	2207      	movs	r2, #7
 800abae:	300b      	adds	r0, #11
 800abb0:	1d23      	adds	r3, r4, #4
 800abb2:	4390      	bics	r0, r2
 800abb4:	1ac2      	subs	r2, r0, r3
 800abb6:	4298      	cmp	r0, r3
 800abb8:	d0df      	beq.n	800ab7a <_malloc_r+0x86>
 800abba:	1a1b      	subs	r3, r3, r0
 800abbc:	50a3      	str	r3, [r4, r2]
 800abbe:	e7dc      	b.n	800ab7a <_malloc_r+0x86>
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	e7ef      	b.n	800aba4 <_malloc_r+0xb0>
 800abc4:	0023      	movs	r3, r4
 800abc6:	6864      	ldr	r4, [r4, #4]
 800abc8:	e7a6      	b.n	800ab18 <_malloc_r+0x24>
 800abca:	9c00      	ldr	r4, [sp, #0]
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	e7ad      	b.n	800ab2e <_malloc_r+0x3a>
 800abd2:	001a      	movs	r2, r3
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	42a3      	cmp	r3, r4
 800abd8:	d1fb      	bne.n	800abd2 <_malloc_r+0xde>
 800abda:	2300      	movs	r3, #0
 800abdc:	e7da      	b.n	800ab94 <_malloc_r+0xa0>
 800abde:	230c      	movs	r3, #12
 800abe0:	0028      	movs	r0, r5
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f000 f8d2 	bl	800ad8c <__malloc_unlock>
 800abe8:	e7c6      	b.n	800ab78 <_malloc_r+0x84>
 800abea:	6007      	str	r7, [r0, #0]
 800abec:	e7da      	b.n	800aba4 <_malloc_r+0xb0>
 800abee:	46c0      	nop			@ (mov r8, r8)
 800abf0:	20000894 	.word	0x20000894

0800abf4 <__ascii_mbtowc>:
 800abf4:	b082      	sub	sp, #8
 800abf6:	2900      	cmp	r1, #0
 800abf8:	d100      	bne.n	800abfc <__ascii_mbtowc+0x8>
 800abfa:	a901      	add	r1, sp, #4
 800abfc:	1e10      	subs	r0, r2, #0
 800abfe:	d006      	beq.n	800ac0e <__ascii_mbtowc+0x1a>
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d006      	beq.n	800ac12 <__ascii_mbtowc+0x1e>
 800ac04:	7813      	ldrb	r3, [r2, #0]
 800ac06:	600b      	str	r3, [r1, #0]
 800ac08:	7810      	ldrb	r0, [r2, #0]
 800ac0a:	1e43      	subs	r3, r0, #1
 800ac0c:	4198      	sbcs	r0, r3
 800ac0e:	b002      	add	sp, #8
 800ac10:	4770      	bx	lr
 800ac12:	2002      	movs	r0, #2
 800ac14:	4240      	negs	r0, r0
 800ac16:	e7fa      	b.n	800ac0e <__ascii_mbtowc+0x1a>

0800ac18 <__sflush_r>:
 800ac18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac1a:	220c      	movs	r2, #12
 800ac1c:	5e8b      	ldrsh	r3, [r1, r2]
 800ac1e:	0005      	movs	r5, r0
 800ac20:	000c      	movs	r4, r1
 800ac22:	071a      	lsls	r2, r3, #28
 800ac24:	d456      	bmi.n	800acd4 <__sflush_r+0xbc>
 800ac26:	684a      	ldr	r2, [r1, #4]
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	dc02      	bgt.n	800ac32 <__sflush_r+0x1a>
 800ac2c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ac2e:	2a00      	cmp	r2, #0
 800ac30:	dd4e      	ble.n	800acd0 <__sflush_r+0xb8>
 800ac32:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	d04b      	beq.n	800acd0 <__sflush_r+0xb8>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2080      	movs	r0, #128	@ 0x80
 800ac3c:	682e      	ldr	r6, [r5, #0]
 800ac3e:	602a      	str	r2, [r5, #0]
 800ac40:	001a      	movs	r2, r3
 800ac42:	0140      	lsls	r0, r0, #5
 800ac44:	6a21      	ldr	r1, [r4, #32]
 800ac46:	4002      	ands	r2, r0
 800ac48:	4203      	tst	r3, r0
 800ac4a:	d033      	beq.n	800acb4 <__sflush_r+0x9c>
 800ac4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	075b      	lsls	r3, r3, #29
 800ac52:	d506      	bpl.n	800ac62 <__sflush_r+0x4a>
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	1ad2      	subs	r2, r2, r3
 800ac58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <__sflush_r+0x4a>
 800ac5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac60:	1ad2      	subs	r2, r2, r3
 800ac62:	2300      	movs	r3, #0
 800ac64:	0028      	movs	r0, r5
 800ac66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac68:	6a21      	ldr	r1, [r4, #32]
 800ac6a:	47b8      	blx	r7
 800ac6c:	89a2      	ldrh	r2, [r4, #12]
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d106      	bne.n	800ac80 <__sflush_r+0x68>
 800ac72:	6829      	ldr	r1, [r5, #0]
 800ac74:	291d      	cmp	r1, #29
 800ac76:	d846      	bhi.n	800ad06 <__sflush_r+0xee>
 800ac78:	4b29      	ldr	r3, [pc, #164]	@ (800ad20 <__sflush_r+0x108>)
 800ac7a:	410b      	asrs	r3, r1
 800ac7c:	07db      	lsls	r3, r3, #31
 800ac7e:	d442      	bmi.n	800ad06 <__sflush_r+0xee>
 800ac80:	2300      	movs	r3, #0
 800ac82:	6063      	str	r3, [r4, #4]
 800ac84:	6923      	ldr	r3, [r4, #16]
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	04d2      	lsls	r2, r2, #19
 800ac8a:	d505      	bpl.n	800ac98 <__sflush_r+0x80>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <__sflush_r+0x7e>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d100      	bne.n	800ac98 <__sflush_r+0x80>
 800ac96:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac9a:	602e      	str	r6, [r5, #0]
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	d017      	beq.n	800acd0 <__sflush_r+0xb8>
 800aca0:	0023      	movs	r3, r4
 800aca2:	3344      	adds	r3, #68	@ 0x44
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d002      	beq.n	800acae <__sflush_r+0x96>
 800aca8:	0028      	movs	r0, r5
 800acaa:	f000 ffb9 	bl	800bc20 <_free_r>
 800acae:	2300      	movs	r3, #0
 800acb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800acb2:	e00d      	b.n	800acd0 <__sflush_r+0xb8>
 800acb4:	2301      	movs	r3, #1
 800acb6:	0028      	movs	r0, r5
 800acb8:	47b8      	blx	r7
 800acba:	0002      	movs	r2, r0
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d1c6      	bne.n	800ac4e <__sflush_r+0x36>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0c3      	beq.n	800ac4e <__sflush_r+0x36>
 800acc6:	2b1d      	cmp	r3, #29
 800acc8:	d001      	beq.n	800acce <__sflush_r+0xb6>
 800acca:	2b16      	cmp	r3, #22
 800accc:	d11a      	bne.n	800ad04 <__sflush_r+0xec>
 800acce:	602e      	str	r6, [r5, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e01e      	b.n	800ad12 <__sflush_r+0xfa>
 800acd4:	690e      	ldr	r6, [r1, #16]
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	d0fa      	beq.n	800acd0 <__sflush_r+0xb8>
 800acda:	680f      	ldr	r7, [r1, #0]
 800acdc:	600e      	str	r6, [r1, #0]
 800acde:	1bba      	subs	r2, r7, r6
 800ace0:	9201      	str	r2, [sp, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	079b      	lsls	r3, r3, #30
 800ace6:	d100      	bne.n	800acea <__sflush_r+0xd2>
 800ace8:	694a      	ldr	r2, [r1, #20]
 800acea:	60a2      	str	r2, [r4, #8]
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	ddee      	ble.n	800acd0 <__sflush_r+0xb8>
 800acf2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acf4:	0032      	movs	r2, r6
 800acf6:	001f      	movs	r7, r3
 800acf8:	0028      	movs	r0, r5
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	6a21      	ldr	r1, [r4, #32]
 800acfe:	47b8      	blx	r7
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dc07      	bgt.n	800ad14 <__sflush_r+0xfc>
 800ad04:	89a2      	ldrh	r2, [r4, #12]
 800ad06:	2340      	movs	r3, #64	@ 0x40
 800ad08:	2001      	movs	r0, #1
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	b21b      	sxth	r3, r3
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	4240      	negs	r0, r0
 800ad12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	1836      	adds	r6, r6, r0
 800ad18:	1a1b      	subs	r3, r3, r0
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	e7e6      	b.n	800acec <__sflush_r+0xd4>
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	dfbffffe 	.word	0xdfbffffe

0800ad24 <_fflush_r>:
 800ad24:	690b      	ldr	r3, [r1, #16]
 800ad26:	b570      	push	{r4, r5, r6, lr}
 800ad28:	0005      	movs	r5, r0
 800ad2a:	000c      	movs	r4, r1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <_fflush_r+0x12>
 800ad30:	2500      	movs	r5, #0
 800ad32:	0028      	movs	r0, r5
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d004      	beq.n	800ad44 <_fflush_r+0x20>
 800ad3a:	6a03      	ldr	r3, [r0, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <_fflush_r+0x20>
 800ad40:	f7fd fbd4 	bl	80084ec <__sinit>
 800ad44:	220c      	movs	r2, #12
 800ad46:	5ea3      	ldrsh	r3, [r4, r2]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0f1      	beq.n	800ad30 <_fflush_r+0xc>
 800ad4c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad4e:	07d2      	lsls	r2, r2, #31
 800ad50:	d404      	bmi.n	800ad5c <_fflush_r+0x38>
 800ad52:	059b      	lsls	r3, r3, #22
 800ad54:	d402      	bmi.n	800ad5c <_fflush_r+0x38>
 800ad56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad58:	f7fe fb45 	bl	80093e6 <__retarget_lock_acquire_recursive>
 800ad5c:	0028      	movs	r0, r5
 800ad5e:	0021      	movs	r1, r4
 800ad60:	f7ff ff5a 	bl	800ac18 <__sflush_r>
 800ad64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad66:	0005      	movs	r5, r0
 800ad68:	07db      	lsls	r3, r3, #31
 800ad6a:	d4e2      	bmi.n	800ad32 <_fflush_r+0xe>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	059b      	lsls	r3, r3, #22
 800ad70:	d4df      	bmi.n	800ad32 <_fflush_r+0xe>
 800ad72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad74:	f7fe fb38 	bl	80093e8 <__retarget_lock_release_recursive>
 800ad78:	e7db      	b.n	800ad32 <_fflush_r+0xe>
	...

0800ad7c <__malloc_lock>:
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	4802      	ldr	r0, [pc, #8]	@ (800ad88 <__malloc_lock+0xc>)
 800ad80:	f7fe fb31 	bl	80093e6 <__retarget_lock_acquire_recursive>
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	2000088c 	.word	0x2000088c

0800ad8c <__malloc_unlock>:
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	4802      	ldr	r0, [pc, #8]	@ (800ad98 <__malloc_unlock+0xc>)
 800ad90:	f7fe fb2a 	bl	80093e8 <__retarget_lock_release_recursive>
 800ad94:	bd10      	pop	{r4, pc}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	2000088c 	.word	0x2000088c

0800ad9c <_Balloc>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	69c5      	ldr	r5, [r0, #28]
 800ada0:	0006      	movs	r6, r0
 800ada2:	000c      	movs	r4, r1
 800ada4:	2d00      	cmp	r5, #0
 800ada6:	d10e      	bne.n	800adc6 <_Balloc+0x2a>
 800ada8:	2010      	movs	r0, #16
 800adaa:	f7ff fe77 	bl	800aa9c <malloc>
 800adae:	1e02      	subs	r2, r0, #0
 800adb0:	61f0      	str	r0, [r6, #28]
 800adb2:	d104      	bne.n	800adbe <_Balloc+0x22>
 800adb4:	216b      	movs	r1, #107	@ 0x6b
 800adb6:	4b19      	ldr	r3, [pc, #100]	@ (800ae1c <_Balloc+0x80>)
 800adb8:	4819      	ldr	r0, [pc, #100]	@ (800ae20 <_Balloc+0x84>)
 800adba:	f000 fee5 	bl	800bb88 <__assert_func>
 800adbe:	6045      	str	r5, [r0, #4]
 800adc0:	6085      	str	r5, [r0, #8]
 800adc2:	6005      	str	r5, [r0, #0]
 800adc4:	60c5      	str	r5, [r0, #12]
 800adc6:	69f5      	ldr	r5, [r6, #28]
 800adc8:	68eb      	ldr	r3, [r5, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d013      	beq.n	800adf6 <_Balloc+0x5a>
 800adce:	69f3      	ldr	r3, [r6, #28]
 800add0:	00a2      	lsls	r2, r4, #2
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	189b      	adds	r3, r3, r2
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	2800      	cmp	r0, #0
 800adda:	d118      	bne.n	800ae0e <_Balloc+0x72>
 800addc:	2101      	movs	r1, #1
 800adde:	000d      	movs	r5, r1
 800ade0:	40a5      	lsls	r5, r4
 800ade2:	1d6a      	adds	r2, r5, #5
 800ade4:	0030      	movs	r0, r6
 800ade6:	0092      	lsls	r2, r2, #2
 800ade8:	f000 feec 	bl	800bbc4 <_calloc_r>
 800adec:	2800      	cmp	r0, #0
 800adee:	d00c      	beq.n	800ae0a <_Balloc+0x6e>
 800adf0:	6044      	str	r4, [r0, #4]
 800adf2:	6085      	str	r5, [r0, #8]
 800adf4:	e00d      	b.n	800ae12 <_Balloc+0x76>
 800adf6:	2221      	movs	r2, #33	@ 0x21
 800adf8:	2104      	movs	r1, #4
 800adfa:	0030      	movs	r0, r6
 800adfc:	f000 fee2 	bl	800bbc4 <_calloc_r>
 800ae00:	69f3      	ldr	r3, [r6, #28]
 800ae02:	60e8      	str	r0, [r5, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e1      	bne.n	800adce <_Balloc+0x32>
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	6802      	ldr	r2, [r0, #0]
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	2300      	movs	r3, #0
 800ae14:	6103      	str	r3, [r0, #16]
 800ae16:	60c3      	str	r3, [r0, #12]
 800ae18:	e7f8      	b.n	800ae0c <_Balloc+0x70>
 800ae1a:	46c0      	nop			@ (mov r8, r8)
 800ae1c:	0800c35e 	.word	0x0800c35e
 800ae20:	0800c44f 	.word	0x0800c44f

0800ae24 <_Bfree>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	69c6      	ldr	r6, [r0, #28]
 800ae28:	0005      	movs	r5, r0
 800ae2a:	000c      	movs	r4, r1
 800ae2c:	2e00      	cmp	r6, #0
 800ae2e:	d10e      	bne.n	800ae4e <_Bfree+0x2a>
 800ae30:	2010      	movs	r0, #16
 800ae32:	f7ff fe33 	bl	800aa9c <malloc>
 800ae36:	1e02      	subs	r2, r0, #0
 800ae38:	61e8      	str	r0, [r5, #28]
 800ae3a:	d104      	bne.n	800ae46 <_Bfree+0x22>
 800ae3c:	218f      	movs	r1, #143	@ 0x8f
 800ae3e:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <_Bfree+0x40>)
 800ae40:	4809      	ldr	r0, [pc, #36]	@ (800ae68 <_Bfree+0x44>)
 800ae42:	f000 fea1 	bl	800bb88 <__assert_func>
 800ae46:	6046      	str	r6, [r0, #4]
 800ae48:	6086      	str	r6, [r0, #8]
 800ae4a:	6006      	str	r6, [r0, #0]
 800ae4c:	60c6      	str	r6, [r0, #12]
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d007      	beq.n	800ae62 <_Bfree+0x3e>
 800ae52:	69eb      	ldr	r3, [r5, #28]
 800ae54:	6862      	ldr	r2, [r4, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	6022      	str	r2, [r4, #0]
 800ae60:	601c      	str	r4, [r3, #0]
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	0800c35e 	.word	0x0800c35e
 800ae68:	0800c44f 	.word	0x0800c44f

0800ae6c <__multadd>:
 800ae6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae6e:	000f      	movs	r7, r1
 800ae70:	9001      	str	r0, [sp, #4]
 800ae72:	000c      	movs	r4, r1
 800ae74:	001e      	movs	r6, r3
 800ae76:	2000      	movs	r0, #0
 800ae78:	690d      	ldr	r5, [r1, #16]
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	3001      	adds	r0, #1
 800ae80:	b299      	uxth	r1, r3
 800ae82:	4351      	muls	r1, r2
 800ae84:	0c1b      	lsrs	r3, r3, #16
 800ae86:	4353      	muls	r3, r2
 800ae88:	1989      	adds	r1, r1, r6
 800ae8a:	0c0e      	lsrs	r6, r1, #16
 800ae8c:	199b      	adds	r3, r3, r6
 800ae8e:	0c1e      	lsrs	r6, r3, #16
 800ae90:	b289      	uxth	r1, r1
 800ae92:	041b      	lsls	r3, r3, #16
 800ae94:	185b      	adds	r3, r3, r1
 800ae96:	c708      	stmia	r7!, {r3}
 800ae98:	4285      	cmp	r5, r0
 800ae9a:	dcef      	bgt.n	800ae7c <__multadd+0x10>
 800ae9c:	2e00      	cmp	r6, #0
 800ae9e:	d022      	beq.n	800aee6 <__multadd+0x7a>
 800aea0:	68a3      	ldr	r3, [r4, #8]
 800aea2:	42ab      	cmp	r3, r5
 800aea4:	dc19      	bgt.n	800aeda <__multadd+0x6e>
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	9801      	ldr	r0, [sp, #4]
 800aeaa:	3101      	adds	r1, #1
 800aeac:	f7ff ff76 	bl	800ad9c <_Balloc>
 800aeb0:	1e07      	subs	r7, r0, #0
 800aeb2:	d105      	bne.n	800aec0 <__multadd+0x54>
 800aeb4:	003a      	movs	r2, r7
 800aeb6:	21ba      	movs	r1, #186	@ 0xba
 800aeb8:	4b0c      	ldr	r3, [pc, #48]	@ (800aeec <__multadd+0x80>)
 800aeba:	480d      	ldr	r0, [pc, #52]	@ (800aef0 <__multadd+0x84>)
 800aebc:	f000 fe64 	bl	800bb88 <__assert_func>
 800aec0:	0021      	movs	r1, r4
 800aec2:	6922      	ldr	r2, [r4, #16]
 800aec4:	310c      	adds	r1, #12
 800aec6:	3202      	adds	r2, #2
 800aec8:	0092      	lsls	r2, r2, #2
 800aeca:	300c      	adds	r0, #12
 800aecc:	f7fe fa98 	bl	8009400 <memcpy>
 800aed0:	0021      	movs	r1, r4
 800aed2:	9801      	ldr	r0, [sp, #4]
 800aed4:	f7ff ffa6 	bl	800ae24 <_Bfree>
 800aed8:	003c      	movs	r4, r7
 800aeda:	1d2b      	adds	r3, r5, #4
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	18e3      	adds	r3, r4, r3
 800aee0:	3501      	adds	r5, #1
 800aee2:	605e      	str	r6, [r3, #4]
 800aee4:	6125      	str	r5, [r4, #16]
 800aee6:	0020      	movs	r0, r4
 800aee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	0800c3cd 	.word	0x0800c3cd
 800aef0:	0800c44f 	.word	0x0800c44f

0800aef4 <__s2b>:
 800aef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef6:	0007      	movs	r7, r0
 800aef8:	0018      	movs	r0, r3
 800aefa:	000c      	movs	r4, r1
 800aefc:	3008      	adds	r0, #8
 800aefe:	2109      	movs	r1, #9
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	0015      	movs	r5, r2
 800af04:	f7f5 f9a4 	bl	8000250 <__divsi3>
 800af08:	2301      	movs	r3, #1
 800af0a:	2100      	movs	r1, #0
 800af0c:	4283      	cmp	r3, r0
 800af0e:	db0a      	blt.n	800af26 <__s2b+0x32>
 800af10:	0038      	movs	r0, r7
 800af12:	f7ff ff43 	bl	800ad9c <_Balloc>
 800af16:	1e01      	subs	r1, r0, #0
 800af18:	d108      	bne.n	800af2c <__s2b+0x38>
 800af1a:	000a      	movs	r2, r1
 800af1c:	4b19      	ldr	r3, [pc, #100]	@ (800af84 <__s2b+0x90>)
 800af1e:	481a      	ldr	r0, [pc, #104]	@ (800af88 <__s2b+0x94>)
 800af20:	31d3      	adds	r1, #211	@ 0xd3
 800af22:	f000 fe31 	bl	800bb88 <__assert_func>
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	3101      	adds	r1, #1
 800af2a:	e7ef      	b.n	800af0c <__s2b+0x18>
 800af2c:	9b08      	ldr	r3, [sp, #32]
 800af2e:	6143      	str	r3, [r0, #20]
 800af30:	2301      	movs	r3, #1
 800af32:	6103      	str	r3, [r0, #16]
 800af34:	2d09      	cmp	r5, #9
 800af36:	dd18      	ble.n	800af6a <__s2b+0x76>
 800af38:	0023      	movs	r3, r4
 800af3a:	3309      	adds	r3, #9
 800af3c:	001e      	movs	r6, r3
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	1964      	adds	r4, r4, r5
 800af42:	7833      	ldrb	r3, [r6, #0]
 800af44:	220a      	movs	r2, #10
 800af46:	0038      	movs	r0, r7
 800af48:	3b30      	subs	r3, #48	@ 0x30
 800af4a:	f7ff ff8f 	bl	800ae6c <__multadd>
 800af4e:	3601      	adds	r6, #1
 800af50:	0001      	movs	r1, r0
 800af52:	42a6      	cmp	r6, r4
 800af54:	d1f5      	bne.n	800af42 <__s2b+0x4e>
 800af56:	002c      	movs	r4, r5
 800af58:	9b00      	ldr	r3, [sp, #0]
 800af5a:	3c08      	subs	r4, #8
 800af5c:	191c      	adds	r4, r3, r4
 800af5e:	002e      	movs	r6, r5
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	429e      	cmp	r6, r3
 800af64:	db04      	blt.n	800af70 <__s2b+0x7c>
 800af66:	0008      	movs	r0, r1
 800af68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af6a:	2509      	movs	r5, #9
 800af6c:	340a      	adds	r4, #10
 800af6e:	e7f6      	b.n	800af5e <__s2b+0x6a>
 800af70:	1b63      	subs	r3, r4, r5
 800af72:	5d9b      	ldrb	r3, [r3, r6]
 800af74:	220a      	movs	r2, #10
 800af76:	0038      	movs	r0, r7
 800af78:	3b30      	subs	r3, #48	@ 0x30
 800af7a:	f7ff ff77 	bl	800ae6c <__multadd>
 800af7e:	3601      	adds	r6, #1
 800af80:	0001      	movs	r1, r0
 800af82:	e7ed      	b.n	800af60 <__s2b+0x6c>
 800af84:	0800c3cd 	.word	0x0800c3cd
 800af88:	0800c44f 	.word	0x0800c44f

0800af8c <__hi0bits>:
 800af8c:	2280      	movs	r2, #128	@ 0x80
 800af8e:	0003      	movs	r3, r0
 800af90:	0252      	lsls	r2, r2, #9
 800af92:	2000      	movs	r0, #0
 800af94:	4293      	cmp	r3, r2
 800af96:	d201      	bcs.n	800af9c <__hi0bits+0x10>
 800af98:	041b      	lsls	r3, r3, #16
 800af9a:	3010      	adds	r0, #16
 800af9c:	2280      	movs	r2, #128	@ 0x80
 800af9e:	0452      	lsls	r2, r2, #17
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d201      	bcs.n	800afa8 <__hi0bits+0x1c>
 800afa4:	3008      	adds	r0, #8
 800afa6:	021b      	lsls	r3, r3, #8
 800afa8:	2280      	movs	r2, #128	@ 0x80
 800afaa:	0552      	lsls	r2, r2, #21
 800afac:	4293      	cmp	r3, r2
 800afae:	d201      	bcs.n	800afb4 <__hi0bits+0x28>
 800afb0:	3004      	adds	r0, #4
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	2280      	movs	r2, #128	@ 0x80
 800afb6:	05d2      	lsls	r2, r2, #23
 800afb8:	4293      	cmp	r3, r2
 800afba:	d201      	bcs.n	800afc0 <__hi0bits+0x34>
 800afbc:	3002      	adds	r0, #2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	db03      	blt.n	800afcc <__hi0bits+0x40>
 800afc4:	3001      	adds	r0, #1
 800afc6:	4213      	tst	r3, r2
 800afc8:	d100      	bne.n	800afcc <__hi0bits+0x40>
 800afca:	2020      	movs	r0, #32
 800afcc:	4770      	bx	lr

0800afce <__lo0bits>:
 800afce:	6803      	ldr	r3, [r0, #0]
 800afd0:	0001      	movs	r1, r0
 800afd2:	2207      	movs	r2, #7
 800afd4:	0018      	movs	r0, r3
 800afd6:	4010      	ands	r0, r2
 800afd8:	4213      	tst	r3, r2
 800afda:	d00d      	beq.n	800aff8 <__lo0bits+0x2a>
 800afdc:	3a06      	subs	r2, #6
 800afde:	2000      	movs	r0, #0
 800afe0:	4213      	tst	r3, r2
 800afe2:	d105      	bne.n	800aff0 <__lo0bits+0x22>
 800afe4:	3002      	adds	r0, #2
 800afe6:	4203      	tst	r3, r0
 800afe8:	d003      	beq.n	800aff2 <__lo0bits+0x24>
 800afea:	40d3      	lsrs	r3, r2
 800afec:	0010      	movs	r0, r2
 800afee:	600b      	str	r3, [r1, #0]
 800aff0:	4770      	bx	lr
 800aff2:	089b      	lsrs	r3, r3, #2
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	e7fb      	b.n	800aff0 <__lo0bits+0x22>
 800aff8:	b29a      	uxth	r2, r3
 800affa:	2a00      	cmp	r2, #0
 800affc:	d101      	bne.n	800b002 <__lo0bits+0x34>
 800affe:	2010      	movs	r0, #16
 800b000:	0c1b      	lsrs	r3, r3, #16
 800b002:	b2da      	uxtb	r2, r3
 800b004:	2a00      	cmp	r2, #0
 800b006:	d101      	bne.n	800b00c <__lo0bits+0x3e>
 800b008:	3008      	adds	r0, #8
 800b00a:	0a1b      	lsrs	r3, r3, #8
 800b00c:	071a      	lsls	r2, r3, #28
 800b00e:	d101      	bne.n	800b014 <__lo0bits+0x46>
 800b010:	3004      	adds	r0, #4
 800b012:	091b      	lsrs	r3, r3, #4
 800b014:	079a      	lsls	r2, r3, #30
 800b016:	d101      	bne.n	800b01c <__lo0bits+0x4e>
 800b018:	3002      	adds	r0, #2
 800b01a:	089b      	lsrs	r3, r3, #2
 800b01c:	07da      	lsls	r2, r3, #31
 800b01e:	d4e9      	bmi.n	800aff4 <__lo0bits+0x26>
 800b020:	3001      	adds	r0, #1
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	d1e6      	bne.n	800aff4 <__lo0bits+0x26>
 800b026:	2020      	movs	r0, #32
 800b028:	e7e2      	b.n	800aff0 <__lo0bits+0x22>
	...

0800b02c <__i2b>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	000c      	movs	r4, r1
 800b030:	2101      	movs	r1, #1
 800b032:	f7ff feb3 	bl	800ad9c <_Balloc>
 800b036:	2800      	cmp	r0, #0
 800b038:	d107      	bne.n	800b04a <__i2b+0x1e>
 800b03a:	2146      	movs	r1, #70	@ 0x46
 800b03c:	4c05      	ldr	r4, [pc, #20]	@ (800b054 <__i2b+0x28>)
 800b03e:	0002      	movs	r2, r0
 800b040:	4b05      	ldr	r3, [pc, #20]	@ (800b058 <__i2b+0x2c>)
 800b042:	0020      	movs	r0, r4
 800b044:	31ff      	adds	r1, #255	@ 0xff
 800b046:	f000 fd9f 	bl	800bb88 <__assert_func>
 800b04a:	2301      	movs	r3, #1
 800b04c:	6144      	str	r4, [r0, #20]
 800b04e:	6103      	str	r3, [r0, #16]
 800b050:	bd10      	pop	{r4, pc}
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	0800c44f 	.word	0x0800c44f
 800b058:	0800c3cd 	.word	0x0800c3cd

0800b05c <__multiply>:
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	0014      	movs	r4, r2
 800b060:	690a      	ldr	r2, [r1, #16]
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	000d      	movs	r5, r1
 800b066:	b08b      	sub	sp, #44	@ 0x2c
 800b068:	429a      	cmp	r2, r3
 800b06a:	db02      	blt.n	800b072 <__multiply+0x16>
 800b06c:	0023      	movs	r3, r4
 800b06e:	000c      	movs	r4, r1
 800b070:	001d      	movs	r5, r3
 800b072:	6927      	ldr	r7, [r4, #16]
 800b074:	692e      	ldr	r6, [r5, #16]
 800b076:	6861      	ldr	r1, [r4, #4]
 800b078:	19bb      	adds	r3, r7, r6
 800b07a:	9303      	str	r3, [sp, #12]
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	19ba      	adds	r2, r7, r6
 800b080:	4293      	cmp	r3, r2
 800b082:	da00      	bge.n	800b086 <__multiply+0x2a>
 800b084:	3101      	adds	r1, #1
 800b086:	f7ff fe89 	bl	800ad9c <_Balloc>
 800b08a:	9002      	str	r0, [sp, #8]
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d106      	bne.n	800b09e <__multiply+0x42>
 800b090:	21b1      	movs	r1, #177	@ 0xb1
 800b092:	4b49      	ldr	r3, [pc, #292]	@ (800b1b8 <__multiply+0x15c>)
 800b094:	4849      	ldr	r0, [pc, #292]	@ (800b1bc <__multiply+0x160>)
 800b096:	9a02      	ldr	r2, [sp, #8]
 800b098:	0049      	lsls	r1, r1, #1
 800b09a:	f000 fd75 	bl	800bb88 <__assert_func>
 800b09e:	9b02      	ldr	r3, [sp, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	469c      	mov	ip, r3
 800b0a6:	19bb      	adds	r3, r7, r6
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4463      	add	r3, ip
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	4663      	mov	r3, ip
 800b0b0:	9904      	ldr	r1, [sp, #16]
 800b0b2:	428b      	cmp	r3, r1
 800b0b4:	d32a      	bcc.n	800b10c <__multiply+0xb0>
 800b0b6:	0023      	movs	r3, r4
 800b0b8:	00bf      	lsls	r7, r7, #2
 800b0ba:	3314      	adds	r3, #20
 800b0bc:	3514      	adds	r5, #20
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	00b6      	lsls	r6, r6, #2
 800b0c2:	19db      	adds	r3, r3, r7
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	19ab      	adds	r3, r5, r6
 800b0c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ca:	2304      	movs	r3, #4
 800b0cc:	9306      	str	r3, [sp, #24]
 800b0ce:	0023      	movs	r3, r4
 800b0d0:	9a05      	ldr	r2, [sp, #20]
 800b0d2:	3315      	adds	r3, #21
 800b0d4:	9501      	str	r5, [sp, #4]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d305      	bcc.n	800b0e6 <__multiply+0x8a>
 800b0da:	1b13      	subs	r3, r2, r4
 800b0dc:	3b15      	subs	r3, #21
 800b0de:	089b      	lsrs	r3, r3, #2
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	9306      	str	r3, [sp, #24]
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d310      	bcc.n	800b110 <__multiply+0xb4>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dd05      	ble.n	800b100 <__multiply+0xa4>
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	3b04      	subs	r3, #4
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d056      	beq.n	800b1ae <__multiply+0x152>
 800b100:	9b02      	ldr	r3, [sp, #8]
 800b102:	9a03      	ldr	r2, [sp, #12]
 800b104:	0018      	movs	r0, r3
 800b106:	611a      	str	r2, [r3, #16]
 800b108:	b00b      	add	sp, #44	@ 0x2c
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10c:	c304      	stmia	r3!, {r2}
 800b10e:	e7cf      	b.n	800b0b0 <__multiply+0x54>
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	b280      	uxth	r0, r0
 800b116:	2800      	cmp	r0, #0
 800b118:	d01e      	beq.n	800b158 <__multiply+0xfc>
 800b11a:	4667      	mov	r7, ip
 800b11c:	2500      	movs	r5, #0
 800b11e:	9e08      	ldr	r6, [sp, #32]
 800b120:	ce02      	ldmia	r6!, {r1}
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	9307      	str	r3, [sp, #28]
 800b126:	b28b      	uxth	r3, r1
 800b128:	4343      	muls	r3, r0
 800b12a:	001a      	movs	r2, r3
 800b12c:	466b      	mov	r3, sp
 800b12e:	0c09      	lsrs	r1, r1, #16
 800b130:	8b9b      	ldrh	r3, [r3, #28]
 800b132:	4341      	muls	r1, r0
 800b134:	18d3      	adds	r3, r2, r3
 800b136:	9a07      	ldr	r2, [sp, #28]
 800b138:	195b      	adds	r3, r3, r5
 800b13a:	0c12      	lsrs	r2, r2, #16
 800b13c:	1889      	adds	r1, r1, r2
 800b13e:	0c1a      	lsrs	r2, r3, #16
 800b140:	188a      	adds	r2, r1, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	0c15      	lsrs	r5, r2, #16
 800b146:	0412      	lsls	r2, r2, #16
 800b148:	431a      	orrs	r2, r3
 800b14a:	9b05      	ldr	r3, [sp, #20]
 800b14c:	c704      	stmia	r7!, {r2}
 800b14e:	42b3      	cmp	r3, r6
 800b150:	d8e6      	bhi.n	800b120 <__multiply+0xc4>
 800b152:	4663      	mov	r3, ip
 800b154:	9a06      	ldr	r2, [sp, #24]
 800b156:	509d      	str	r5, [r3, r2]
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	0c00      	lsrs	r0, r0, #16
 800b15e:	d020      	beq.n	800b1a2 <__multiply+0x146>
 800b160:	4663      	mov	r3, ip
 800b162:	0025      	movs	r5, r4
 800b164:	4661      	mov	r1, ip
 800b166:	2700      	movs	r7, #0
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3514      	adds	r5, #20
 800b16c:	682a      	ldr	r2, [r5, #0]
 800b16e:	680e      	ldr	r6, [r1, #0]
 800b170:	b292      	uxth	r2, r2
 800b172:	4342      	muls	r2, r0
 800b174:	0c36      	lsrs	r6, r6, #16
 800b176:	1992      	adds	r2, r2, r6
 800b178:	19d2      	adds	r2, r2, r7
 800b17a:	0416      	lsls	r6, r2, #16
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	431e      	orrs	r6, r3
 800b180:	600e      	str	r6, [r1, #0]
 800b182:	cd40      	ldmia	r5!, {r6}
 800b184:	684b      	ldr	r3, [r1, #4]
 800b186:	0c36      	lsrs	r6, r6, #16
 800b188:	4346      	muls	r6, r0
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	0c12      	lsrs	r2, r2, #16
 800b18e:	18f3      	adds	r3, r6, r3
 800b190:	189b      	adds	r3, r3, r2
 800b192:	9a05      	ldr	r2, [sp, #20]
 800b194:	0c1f      	lsrs	r7, r3, #16
 800b196:	3104      	adds	r1, #4
 800b198:	42aa      	cmp	r2, r5
 800b19a:	d8e7      	bhi.n	800b16c <__multiply+0x110>
 800b19c:	4662      	mov	r2, ip
 800b19e:	9906      	ldr	r1, [sp, #24]
 800b1a0:	5053      	str	r3, [r2, r1]
 800b1a2:	9b01      	ldr	r3, [sp, #4]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	449c      	add	ip, r3
 800b1ac:	e79b      	b.n	800b0e6 <__multiply+0x8a>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	9303      	str	r3, [sp, #12]
 800b1b4:	e79b      	b.n	800b0ee <__multiply+0x92>
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	0800c3cd 	.word	0x0800c3cd
 800b1bc:	0800c44f 	.word	0x0800c44f

0800b1c0 <__pow5mult>:
 800b1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	0015      	movs	r5, r2
 800b1c6:	0007      	movs	r7, r0
 800b1c8:	000e      	movs	r6, r1
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	421d      	tst	r5, r3
 800b1ce:	d008      	beq.n	800b1e2 <__pow5mult+0x22>
 800b1d0:	4925      	ldr	r1, [pc, #148]	@ (800b268 <__pow5mult+0xa8>)
 800b1d2:	3a01      	subs	r2, #1
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	5852      	ldr	r2, [r2, r1]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	0031      	movs	r1, r6
 800b1dc:	f7ff fe46 	bl	800ae6c <__multadd>
 800b1e0:	0006      	movs	r6, r0
 800b1e2:	10ad      	asrs	r5, r5, #2
 800b1e4:	d03d      	beq.n	800b262 <__pow5mult+0xa2>
 800b1e6:	69fc      	ldr	r4, [r7, #28]
 800b1e8:	2c00      	cmp	r4, #0
 800b1ea:	d10f      	bne.n	800b20c <__pow5mult+0x4c>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f7ff fc55 	bl	800aa9c <malloc>
 800b1f2:	1e02      	subs	r2, r0, #0
 800b1f4:	61f8      	str	r0, [r7, #28]
 800b1f6:	d105      	bne.n	800b204 <__pow5mult+0x44>
 800b1f8:	21b4      	movs	r1, #180	@ 0xb4
 800b1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800b26c <__pow5mult+0xac>)
 800b1fc:	481c      	ldr	r0, [pc, #112]	@ (800b270 <__pow5mult+0xb0>)
 800b1fe:	31ff      	adds	r1, #255	@ 0xff
 800b200:	f000 fcc2 	bl	800bb88 <__assert_func>
 800b204:	6044      	str	r4, [r0, #4]
 800b206:	6084      	str	r4, [r0, #8]
 800b208:	6004      	str	r4, [r0, #0]
 800b20a:	60c4      	str	r4, [r0, #12]
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	689c      	ldr	r4, [r3, #8]
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	2c00      	cmp	r4, #0
 800b214:	d108      	bne.n	800b228 <__pow5mult+0x68>
 800b216:	0038      	movs	r0, r7
 800b218:	4916      	ldr	r1, [pc, #88]	@ (800b274 <__pow5mult+0xb4>)
 800b21a:	f7ff ff07 	bl	800b02c <__i2b>
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	0004      	movs	r4, r0
 800b222:	6098      	str	r0, [r3, #8]
 800b224:	2300      	movs	r3, #0
 800b226:	6003      	str	r3, [r0, #0]
 800b228:	2301      	movs	r3, #1
 800b22a:	421d      	tst	r5, r3
 800b22c:	d00a      	beq.n	800b244 <__pow5mult+0x84>
 800b22e:	0031      	movs	r1, r6
 800b230:	0022      	movs	r2, r4
 800b232:	0038      	movs	r0, r7
 800b234:	f7ff ff12 	bl	800b05c <__multiply>
 800b238:	0031      	movs	r1, r6
 800b23a:	9001      	str	r0, [sp, #4]
 800b23c:	0038      	movs	r0, r7
 800b23e:	f7ff fdf1 	bl	800ae24 <_Bfree>
 800b242:	9e01      	ldr	r6, [sp, #4]
 800b244:	106d      	asrs	r5, r5, #1
 800b246:	d00c      	beq.n	800b262 <__pow5mult+0xa2>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d107      	bne.n	800b25e <__pow5mult+0x9e>
 800b24e:	0022      	movs	r2, r4
 800b250:	0021      	movs	r1, r4
 800b252:	0038      	movs	r0, r7
 800b254:	f7ff ff02 	bl	800b05c <__multiply>
 800b258:	2300      	movs	r3, #0
 800b25a:	6020      	str	r0, [r4, #0]
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	0004      	movs	r4, r0
 800b260:	e7e2      	b.n	800b228 <__pow5mult+0x68>
 800b262:	0030      	movs	r0, r6
 800b264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b266:	46c0      	nop			@ (mov r8, r8)
 800b268:	0800c4a8 	.word	0x0800c4a8
 800b26c:	0800c35e 	.word	0x0800c35e
 800b270:	0800c44f 	.word	0x0800c44f
 800b274:	00000271 	.word	0x00000271

0800b278 <__lshift>:
 800b278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b27a:	000c      	movs	r4, r1
 800b27c:	0016      	movs	r6, r2
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	1157      	asrs	r7, r2, #5
 800b282:	b085      	sub	sp, #20
 800b284:	18fb      	adds	r3, r7, r3
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	3301      	adds	r3, #1
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	6849      	ldr	r1, [r1, #4]
 800b28e:	68a3      	ldr	r3, [r4, #8]
 800b290:	9002      	str	r0, [sp, #8]
 800b292:	9a00      	ldr	r2, [sp, #0]
 800b294:	4293      	cmp	r3, r2
 800b296:	db10      	blt.n	800b2ba <__lshift+0x42>
 800b298:	9802      	ldr	r0, [sp, #8]
 800b29a:	f7ff fd7f 	bl	800ad9c <_Balloc>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	0001      	movs	r1, r0
 800b2a2:	0005      	movs	r5, r0
 800b2a4:	001a      	movs	r2, r3
 800b2a6:	3114      	adds	r1, #20
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	d10c      	bne.n	800b2c6 <__lshift+0x4e>
 800b2ac:	21ef      	movs	r1, #239	@ 0xef
 800b2ae:	002a      	movs	r2, r5
 800b2b0:	4b25      	ldr	r3, [pc, #148]	@ (800b348 <__lshift+0xd0>)
 800b2b2:	4826      	ldr	r0, [pc, #152]	@ (800b34c <__lshift+0xd4>)
 800b2b4:	0049      	lsls	r1, r1, #1
 800b2b6:	f000 fc67 	bl	800bb88 <__assert_func>
 800b2ba:	3101      	adds	r1, #1
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	e7e8      	b.n	800b292 <__lshift+0x1a>
 800b2c0:	0098      	lsls	r0, r3, #2
 800b2c2:	500a      	str	r2, [r1, r0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	42bb      	cmp	r3, r7
 800b2c8:	dbfa      	blt.n	800b2c0 <__lshift+0x48>
 800b2ca:	43fb      	mvns	r3, r7
 800b2cc:	17db      	asrs	r3, r3, #31
 800b2ce:	401f      	ands	r7, r3
 800b2d0:	00bf      	lsls	r7, r7, #2
 800b2d2:	0023      	movs	r3, r4
 800b2d4:	201f      	movs	r0, #31
 800b2d6:	19c9      	adds	r1, r1, r7
 800b2d8:	0037      	movs	r7, r6
 800b2da:	6922      	ldr	r2, [r4, #16]
 800b2dc:	3314      	adds	r3, #20
 800b2de:	0092      	lsls	r2, r2, #2
 800b2e0:	189a      	adds	r2, r3, r2
 800b2e2:	4007      	ands	r7, r0
 800b2e4:	4206      	tst	r6, r0
 800b2e6:	d029      	beq.n	800b33c <__lshift+0xc4>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	1bc0      	subs	r0, r0, r7
 800b2ec:	9003      	str	r0, [sp, #12]
 800b2ee:	468c      	mov	ip, r1
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	681e      	ldr	r6, [r3, #0]
 800b2f4:	40be      	lsls	r6, r7
 800b2f6:	4306      	orrs	r6, r0
 800b2f8:	4660      	mov	r0, ip
 800b2fa:	c040      	stmia	r0!, {r6}
 800b2fc:	4684      	mov	ip, r0
 800b2fe:	9e03      	ldr	r6, [sp, #12]
 800b300:	cb01      	ldmia	r3!, {r0}
 800b302:	40f0      	lsrs	r0, r6
 800b304:	429a      	cmp	r2, r3
 800b306:	d8f4      	bhi.n	800b2f2 <__lshift+0x7a>
 800b308:	0026      	movs	r6, r4
 800b30a:	3615      	adds	r6, #21
 800b30c:	2304      	movs	r3, #4
 800b30e:	42b2      	cmp	r2, r6
 800b310:	d304      	bcc.n	800b31c <__lshift+0xa4>
 800b312:	1b13      	subs	r3, r2, r4
 800b314:	3b15      	subs	r3, #21
 800b316:	089b      	lsrs	r3, r3, #2
 800b318:	3301      	adds	r3, #1
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	50c8      	str	r0, [r1, r3]
 800b31e:	2800      	cmp	r0, #0
 800b320:	d002      	beq.n	800b328 <__lshift+0xb0>
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	3302      	adds	r3, #2
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	9802      	ldr	r0, [sp, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	0021      	movs	r1, r4
 800b330:	612b      	str	r3, [r5, #16]
 800b332:	f7ff fd77 	bl	800ae24 <_Bfree>
 800b336:	0028      	movs	r0, r5
 800b338:	b005      	add	sp, #20
 800b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33c:	cb01      	ldmia	r3!, {r0}
 800b33e:	c101      	stmia	r1!, {r0}
 800b340:	429a      	cmp	r2, r3
 800b342:	d8fb      	bhi.n	800b33c <__lshift+0xc4>
 800b344:	e7f0      	b.n	800b328 <__lshift+0xb0>
 800b346:	46c0      	nop			@ (mov r8, r8)
 800b348:	0800c3cd 	.word	0x0800c3cd
 800b34c:	0800c44f 	.word	0x0800c44f

0800b350 <__mcmp>:
 800b350:	b530      	push	{r4, r5, lr}
 800b352:	690b      	ldr	r3, [r1, #16]
 800b354:	6904      	ldr	r4, [r0, #16]
 800b356:	0002      	movs	r2, r0
 800b358:	1ae0      	subs	r0, r4, r3
 800b35a:	429c      	cmp	r4, r3
 800b35c:	d10f      	bne.n	800b37e <__mcmp+0x2e>
 800b35e:	3214      	adds	r2, #20
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	3114      	adds	r1, #20
 800b364:	0014      	movs	r4, r2
 800b366:	18c9      	adds	r1, r1, r3
 800b368:	18d2      	adds	r2, r2, r3
 800b36a:	3a04      	subs	r2, #4
 800b36c:	3904      	subs	r1, #4
 800b36e:	6815      	ldr	r5, [r2, #0]
 800b370:	680b      	ldr	r3, [r1, #0]
 800b372:	429d      	cmp	r5, r3
 800b374:	d004      	beq.n	800b380 <__mcmp+0x30>
 800b376:	2001      	movs	r0, #1
 800b378:	429d      	cmp	r5, r3
 800b37a:	d200      	bcs.n	800b37e <__mcmp+0x2e>
 800b37c:	3802      	subs	r0, #2
 800b37e:	bd30      	pop	{r4, r5, pc}
 800b380:	4294      	cmp	r4, r2
 800b382:	d3f2      	bcc.n	800b36a <__mcmp+0x1a>
 800b384:	e7fb      	b.n	800b37e <__mcmp+0x2e>
	...

0800b388 <__mdiff>:
 800b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38a:	000c      	movs	r4, r1
 800b38c:	b087      	sub	sp, #28
 800b38e:	9000      	str	r0, [sp, #0]
 800b390:	0011      	movs	r1, r2
 800b392:	0020      	movs	r0, r4
 800b394:	0017      	movs	r7, r2
 800b396:	f7ff ffdb 	bl	800b350 <__mcmp>
 800b39a:	1e05      	subs	r5, r0, #0
 800b39c:	d110      	bne.n	800b3c0 <__mdiff+0x38>
 800b39e:	0001      	movs	r1, r0
 800b3a0:	9800      	ldr	r0, [sp, #0]
 800b3a2:	f7ff fcfb 	bl	800ad9c <_Balloc>
 800b3a6:	1e02      	subs	r2, r0, #0
 800b3a8:	d104      	bne.n	800b3b4 <__mdiff+0x2c>
 800b3aa:	4b40      	ldr	r3, [pc, #256]	@ (800b4ac <__mdiff+0x124>)
 800b3ac:	4840      	ldr	r0, [pc, #256]	@ (800b4b0 <__mdiff+0x128>)
 800b3ae:	4941      	ldr	r1, [pc, #260]	@ (800b4b4 <__mdiff+0x12c>)
 800b3b0:	f000 fbea 	bl	800bb88 <__assert_func>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	6145      	str	r5, [r0, #20]
 800b3b8:	6103      	str	r3, [r0, #16]
 800b3ba:	0010      	movs	r0, r2
 800b3bc:	b007      	add	sp, #28
 800b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c0:	2600      	movs	r6, #0
 800b3c2:	42b0      	cmp	r0, r6
 800b3c4:	da03      	bge.n	800b3ce <__mdiff+0x46>
 800b3c6:	0023      	movs	r3, r4
 800b3c8:	003c      	movs	r4, r7
 800b3ca:	001f      	movs	r7, r3
 800b3cc:	3601      	adds	r6, #1
 800b3ce:	6861      	ldr	r1, [r4, #4]
 800b3d0:	9800      	ldr	r0, [sp, #0]
 800b3d2:	f7ff fce3 	bl	800ad9c <_Balloc>
 800b3d6:	1e02      	subs	r2, r0, #0
 800b3d8:	d103      	bne.n	800b3e2 <__mdiff+0x5a>
 800b3da:	4b34      	ldr	r3, [pc, #208]	@ (800b4ac <__mdiff+0x124>)
 800b3dc:	4834      	ldr	r0, [pc, #208]	@ (800b4b0 <__mdiff+0x128>)
 800b3de:	4936      	ldr	r1, [pc, #216]	@ (800b4b8 <__mdiff+0x130>)
 800b3e0:	e7e6      	b.n	800b3b0 <__mdiff+0x28>
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	3414      	adds	r4, #20
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	18e3      	adds	r3, r4, r3
 800b3ec:	0021      	movs	r1, r4
 800b3ee:	9401      	str	r4, [sp, #4]
 800b3f0:	003c      	movs	r4, r7
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	3414      	adds	r4, #20
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	18e3      	adds	r3, r4, r3
 800b3fc:	9303      	str	r3, [sp, #12]
 800b3fe:	0003      	movs	r3, r0
 800b400:	60c6      	str	r6, [r0, #12]
 800b402:	468c      	mov	ip, r1
 800b404:	2000      	movs	r0, #0
 800b406:	3314      	adds	r3, #20
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	4663      	mov	r3, ip
 800b40e:	cb20      	ldmia	r3!, {r5}
 800b410:	b2a9      	uxth	r1, r5
 800b412:	000e      	movs	r6, r1
 800b414:	469c      	mov	ip, r3
 800b416:	cc08      	ldmia	r4!, {r3}
 800b418:	0c2d      	lsrs	r5, r5, #16
 800b41a:	b299      	uxth	r1, r3
 800b41c:	1a71      	subs	r1, r6, r1
 800b41e:	1809      	adds	r1, r1, r0
 800b420:	0c1b      	lsrs	r3, r3, #16
 800b422:	1408      	asrs	r0, r1, #16
 800b424:	1aeb      	subs	r3, r5, r3
 800b426:	181b      	adds	r3, r3, r0
 800b428:	1418      	asrs	r0, r3, #16
 800b42a:	b289      	uxth	r1, r1
 800b42c:	041b      	lsls	r3, r3, #16
 800b42e:	4319      	orrs	r1, r3
 800b430:	9b05      	ldr	r3, [sp, #20]
 800b432:	c302      	stmia	r3!, {r1}
 800b434:	9305      	str	r3, [sp, #20]
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	42a3      	cmp	r3, r4
 800b43a:	d8e7      	bhi.n	800b40c <__mdiff+0x84>
 800b43c:	0039      	movs	r1, r7
 800b43e:	9c03      	ldr	r4, [sp, #12]
 800b440:	3115      	adds	r1, #21
 800b442:	2304      	movs	r3, #4
 800b444:	428c      	cmp	r4, r1
 800b446:	d304      	bcc.n	800b452 <__mdiff+0xca>
 800b448:	1be3      	subs	r3, r4, r7
 800b44a:	3b15      	subs	r3, #21
 800b44c:	089b      	lsrs	r3, r3, #2
 800b44e:	3301      	adds	r3, #1
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	9901      	ldr	r1, [sp, #4]
 800b454:	18cd      	adds	r5, r1, r3
 800b456:	9904      	ldr	r1, [sp, #16]
 800b458:	002e      	movs	r6, r5
 800b45a:	18cb      	adds	r3, r1, r3
 800b45c:	001f      	movs	r7, r3
 800b45e:	9902      	ldr	r1, [sp, #8]
 800b460:	428e      	cmp	r6, r1
 800b462:	d311      	bcc.n	800b488 <__mdiff+0x100>
 800b464:	9c02      	ldr	r4, [sp, #8]
 800b466:	1ee9      	subs	r1, r5, #3
 800b468:	2000      	movs	r0, #0
 800b46a:	428c      	cmp	r4, r1
 800b46c:	d304      	bcc.n	800b478 <__mdiff+0xf0>
 800b46e:	0021      	movs	r1, r4
 800b470:	3103      	adds	r1, #3
 800b472:	1b49      	subs	r1, r1, r5
 800b474:	0889      	lsrs	r1, r1, #2
 800b476:	0088      	lsls	r0, r1, #2
 800b478:	181b      	adds	r3, r3, r0
 800b47a:	3b04      	subs	r3, #4
 800b47c:	6819      	ldr	r1, [r3, #0]
 800b47e:	2900      	cmp	r1, #0
 800b480:	d010      	beq.n	800b4a4 <__mdiff+0x11c>
 800b482:	9b00      	ldr	r3, [sp, #0]
 800b484:	6113      	str	r3, [r2, #16]
 800b486:	e798      	b.n	800b3ba <__mdiff+0x32>
 800b488:	4684      	mov	ip, r0
 800b48a:	ce02      	ldmia	r6!, {r1}
 800b48c:	b288      	uxth	r0, r1
 800b48e:	4460      	add	r0, ip
 800b490:	1400      	asrs	r0, r0, #16
 800b492:	0c0c      	lsrs	r4, r1, #16
 800b494:	1904      	adds	r4, r0, r4
 800b496:	4461      	add	r1, ip
 800b498:	1420      	asrs	r0, r4, #16
 800b49a:	b289      	uxth	r1, r1
 800b49c:	0424      	lsls	r4, r4, #16
 800b49e:	4321      	orrs	r1, r4
 800b4a0:	c702      	stmia	r7!, {r1}
 800b4a2:	e7dc      	b.n	800b45e <__mdiff+0xd6>
 800b4a4:	9900      	ldr	r1, [sp, #0]
 800b4a6:	3901      	subs	r1, #1
 800b4a8:	9100      	str	r1, [sp, #0]
 800b4aa:	e7e6      	b.n	800b47a <__mdiff+0xf2>
 800b4ac:	0800c3cd 	.word	0x0800c3cd
 800b4b0:	0800c44f 	.word	0x0800c44f
 800b4b4:	00000237 	.word	0x00000237
 800b4b8:	00000245 	.word	0x00000245

0800b4bc <__ulp>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	2400      	movs	r4, #0
 800b4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f4 <__ulp+0x38>)
 800b4c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b4f8 <__ulp+0x3c>)
 800b4c4:	400b      	ands	r3, r1
 800b4c6:	189b      	adds	r3, r3, r2
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	dc06      	bgt.n	800b4da <__ulp+0x1e>
 800b4cc:	425b      	negs	r3, r3
 800b4ce:	151a      	asrs	r2, r3, #20
 800b4d0:	2a13      	cmp	r2, #19
 800b4d2:	dc05      	bgt.n	800b4e0 <__ulp+0x24>
 800b4d4:	2380      	movs	r3, #128	@ 0x80
 800b4d6:	031b      	lsls	r3, r3, #12
 800b4d8:	4113      	asrs	r3, r2
 800b4da:	0019      	movs	r1, r3
 800b4dc:	0020      	movs	r0, r4
 800b4de:	bd10      	pop	{r4, pc}
 800b4e0:	3a14      	subs	r2, #20
 800b4e2:	2401      	movs	r4, #1
 800b4e4:	2a1e      	cmp	r2, #30
 800b4e6:	dc02      	bgt.n	800b4ee <__ulp+0x32>
 800b4e8:	2480      	movs	r4, #128	@ 0x80
 800b4ea:	0624      	lsls	r4, r4, #24
 800b4ec:	40d4      	lsrs	r4, r2
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e7f3      	b.n	800b4da <__ulp+0x1e>
 800b4f2:	46c0      	nop			@ (mov r8, r8)
 800b4f4:	7ff00000 	.word	0x7ff00000
 800b4f8:	fcc00000 	.word	0xfcc00000

0800b4fc <__b2d>:
 800b4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4fe:	0006      	movs	r6, r0
 800b500:	6903      	ldr	r3, [r0, #16]
 800b502:	3614      	adds	r6, #20
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	18f3      	adds	r3, r6, r3
 800b508:	1f1d      	subs	r5, r3, #4
 800b50a:	682c      	ldr	r4, [r5, #0]
 800b50c:	000f      	movs	r7, r1
 800b50e:	0020      	movs	r0, r4
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	f7ff fd3b 	bl	800af8c <__hi0bits>
 800b516:	2220      	movs	r2, #32
 800b518:	1a12      	subs	r2, r2, r0
 800b51a:	603a      	str	r2, [r7, #0]
 800b51c:	0003      	movs	r3, r0
 800b51e:	4a1c      	ldr	r2, [pc, #112]	@ (800b590 <__b2d+0x94>)
 800b520:	280a      	cmp	r0, #10
 800b522:	dc15      	bgt.n	800b550 <__b2d+0x54>
 800b524:	210b      	movs	r1, #11
 800b526:	0027      	movs	r7, r4
 800b528:	1a09      	subs	r1, r1, r0
 800b52a:	40cf      	lsrs	r7, r1
 800b52c:	433a      	orrs	r2, r7
 800b52e:	468c      	mov	ip, r1
 800b530:	0011      	movs	r1, r2
 800b532:	2200      	movs	r2, #0
 800b534:	42ae      	cmp	r6, r5
 800b536:	d202      	bcs.n	800b53e <__b2d+0x42>
 800b538:	9a01      	ldr	r2, [sp, #4]
 800b53a:	3a08      	subs	r2, #8
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	3315      	adds	r3, #21
 800b540:	409c      	lsls	r4, r3
 800b542:	4663      	mov	r3, ip
 800b544:	0027      	movs	r7, r4
 800b546:	40da      	lsrs	r2, r3
 800b548:	4317      	orrs	r7, r2
 800b54a:	0038      	movs	r0, r7
 800b54c:	b003      	add	sp, #12
 800b54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b550:	2700      	movs	r7, #0
 800b552:	42ae      	cmp	r6, r5
 800b554:	d202      	bcs.n	800b55c <__b2d+0x60>
 800b556:	9d01      	ldr	r5, [sp, #4]
 800b558:	3d08      	subs	r5, #8
 800b55a:	682f      	ldr	r7, [r5, #0]
 800b55c:	210b      	movs	r1, #11
 800b55e:	4249      	negs	r1, r1
 800b560:	468c      	mov	ip, r1
 800b562:	449c      	add	ip, r3
 800b564:	2b0b      	cmp	r3, #11
 800b566:	d010      	beq.n	800b58a <__b2d+0x8e>
 800b568:	4661      	mov	r1, ip
 800b56a:	2320      	movs	r3, #32
 800b56c:	408c      	lsls	r4, r1
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	0039      	movs	r1, r7
 800b572:	40d9      	lsrs	r1, r3
 800b574:	430c      	orrs	r4, r1
 800b576:	4322      	orrs	r2, r4
 800b578:	0011      	movs	r1, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	42b5      	cmp	r5, r6
 800b57e:	d901      	bls.n	800b584 <__b2d+0x88>
 800b580:	3d04      	subs	r5, #4
 800b582:	682a      	ldr	r2, [r5, #0]
 800b584:	4664      	mov	r4, ip
 800b586:	40a7      	lsls	r7, r4
 800b588:	e7dd      	b.n	800b546 <__b2d+0x4a>
 800b58a:	4322      	orrs	r2, r4
 800b58c:	0011      	movs	r1, r2
 800b58e:	e7dc      	b.n	800b54a <__b2d+0x4e>
 800b590:	3ff00000 	.word	0x3ff00000

0800b594 <__d2b>:
 800b594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b596:	2101      	movs	r1, #1
 800b598:	0016      	movs	r6, r2
 800b59a:	001f      	movs	r7, r3
 800b59c:	f7ff fbfe 	bl	800ad9c <_Balloc>
 800b5a0:	1e04      	subs	r4, r0, #0
 800b5a2:	d105      	bne.n	800b5b0 <__d2b+0x1c>
 800b5a4:	0022      	movs	r2, r4
 800b5a6:	4b25      	ldr	r3, [pc, #148]	@ (800b63c <__d2b+0xa8>)
 800b5a8:	4825      	ldr	r0, [pc, #148]	@ (800b640 <__d2b+0xac>)
 800b5aa:	4926      	ldr	r1, [pc, #152]	@ (800b644 <__d2b+0xb0>)
 800b5ac:	f000 faec 	bl	800bb88 <__assert_func>
 800b5b0:	033b      	lsls	r3, r7, #12
 800b5b2:	007d      	lsls	r5, r7, #1
 800b5b4:	0b1b      	lsrs	r3, r3, #12
 800b5b6:	0d6d      	lsrs	r5, r5, #21
 800b5b8:	d002      	beq.n	800b5c0 <__d2b+0x2c>
 800b5ba:	2280      	movs	r2, #128	@ 0x80
 800b5bc:	0352      	lsls	r2, r2, #13
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	2e00      	cmp	r6, #0
 800b5c4:	d025      	beq.n	800b612 <__d2b+0x7e>
 800b5c6:	4668      	mov	r0, sp
 800b5c8:	9600      	str	r6, [sp, #0]
 800b5ca:	f7ff fd00 	bl	800afce <__lo0bits>
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	9900      	ldr	r1, [sp, #0]
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d01b      	beq.n	800b60e <__d2b+0x7a>
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	001e      	movs	r6, r3
 800b5da:	1a12      	subs	r2, r2, r0
 800b5dc:	4096      	lsls	r6, r2
 800b5de:	0032      	movs	r2, r6
 800b5e0:	40c3      	lsrs	r3, r0
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	6162      	str	r2, [r4, #20]
 800b5e6:	9301      	str	r3, [sp, #4]
 800b5e8:	9e01      	ldr	r6, [sp, #4]
 800b5ea:	61a6      	str	r6, [r4, #24]
 800b5ec:	1e73      	subs	r3, r6, #1
 800b5ee:	419e      	sbcs	r6, r3
 800b5f0:	3601      	adds	r6, #1
 800b5f2:	6126      	str	r6, [r4, #16]
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	d014      	beq.n	800b622 <__d2b+0x8e>
 800b5f8:	2635      	movs	r6, #53	@ 0x35
 800b5fa:	4b13      	ldr	r3, [pc, #76]	@ (800b648 <__d2b+0xb4>)
 800b5fc:	18ed      	adds	r5, r5, r3
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	182d      	adds	r5, r5, r0
 800b602:	601d      	str	r5, [r3, #0]
 800b604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b606:	1a36      	subs	r6, r6, r0
 800b608:	601e      	str	r6, [r3, #0]
 800b60a:	0020      	movs	r0, r4
 800b60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b60e:	6161      	str	r1, [r4, #20]
 800b610:	e7ea      	b.n	800b5e8 <__d2b+0x54>
 800b612:	a801      	add	r0, sp, #4
 800b614:	f7ff fcdb 	bl	800afce <__lo0bits>
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	2601      	movs	r6, #1
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	3020      	adds	r0, #32
 800b620:	e7e7      	b.n	800b5f2 <__d2b+0x5e>
 800b622:	4b0a      	ldr	r3, [pc, #40]	@ (800b64c <__d2b+0xb8>)
 800b624:	18c0      	adds	r0, r0, r3
 800b626:	9b08      	ldr	r3, [sp, #32]
 800b628:	6018      	str	r0, [r3, #0]
 800b62a:	4b09      	ldr	r3, [pc, #36]	@ (800b650 <__d2b+0xbc>)
 800b62c:	18f3      	adds	r3, r6, r3
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	18e3      	adds	r3, r4, r3
 800b632:	6958      	ldr	r0, [r3, #20]
 800b634:	f7ff fcaa 	bl	800af8c <__hi0bits>
 800b638:	0176      	lsls	r6, r6, #5
 800b63a:	e7e3      	b.n	800b604 <__d2b+0x70>
 800b63c:	0800c3cd 	.word	0x0800c3cd
 800b640:	0800c44f 	.word	0x0800c44f
 800b644:	0000030f 	.word	0x0000030f
 800b648:	fffffbcd 	.word	0xfffffbcd
 800b64c:	fffffbce 	.word	0xfffffbce
 800b650:	3fffffff 	.word	0x3fffffff

0800b654 <__ratio>:
 800b654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b656:	b087      	sub	sp, #28
 800b658:	000f      	movs	r7, r1
 800b65a:	a904      	add	r1, sp, #16
 800b65c:	0006      	movs	r6, r0
 800b65e:	f7ff ff4d 	bl	800b4fc <__b2d>
 800b662:	9000      	str	r0, [sp, #0]
 800b664:	9101      	str	r1, [sp, #4]
 800b666:	9b00      	ldr	r3, [sp, #0]
 800b668:	9c01      	ldr	r4, [sp, #4]
 800b66a:	0038      	movs	r0, r7
 800b66c:	a905      	add	r1, sp, #20
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	9403      	str	r4, [sp, #12]
 800b672:	f7ff ff43 	bl	800b4fc <__b2d>
 800b676:	000d      	movs	r5, r1
 800b678:	0002      	movs	r2, r0
 800b67a:	000b      	movs	r3, r1
 800b67c:	6930      	ldr	r0, [r6, #16]
 800b67e:	6939      	ldr	r1, [r7, #16]
 800b680:	9e04      	ldr	r6, [sp, #16]
 800b682:	1a40      	subs	r0, r0, r1
 800b684:	9905      	ldr	r1, [sp, #20]
 800b686:	0140      	lsls	r0, r0, #5
 800b688:	1a71      	subs	r1, r6, r1
 800b68a:	1841      	adds	r1, r0, r1
 800b68c:	0508      	lsls	r0, r1, #20
 800b68e:	2900      	cmp	r1, #0
 800b690:	dd08      	ble.n	800b6a4 <__ratio+0x50>
 800b692:	9901      	ldr	r1, [sp, #4]
 800b694:	1841      	adds	r1, r0, r1
 800b696:	9103      	str	r1, [sp, #12]
 800b698:	9802      	ldr	r0, [sp, #8]
 800b69a:	9903      	ldr	r1, [sp, #12]
 800b69c:	f7f5 ff08 	bl	80014b0 <__aeabi_ddiv>
 800b6a0:	b007      	add	sp, #28
 800b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a4:	1a2b      	subs	r3, r5, r0
 800b6a6:	e7f7      	b.n	800b698 <__ratio+0x44>

0800b6a8 <__copybits>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	0014      	movs	r4, r2
 800b6ac:	0005      	movs	r5, r0
 800b6ae:	3901      	subs	r1, #1
 800b6b0:	6913      	ldr	r3, [r2, #16]
 800b6b2:	1149      	asrs	r1, r1, #5
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	0089      	lsls	r1, r1, #2
 800b6b8:	3414      	adds	r4, #20
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	1841      	adds	r1, r0, r1
 800b6be:	18e3      	adds	r3, r4, r3
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	d80d      	bhi.n	800b6e0 <__copybits+0x38>
 800b6c4:	0014      	movs	r4, r2
 800b6c6:	3411      	adds	r4, #17
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	429c      	cmp	r4, r3
 800b6cc:	d803      	bhi.n	800b6d6 <__copybits+0x2e>
 800b6ce:	1a9b      	subs	r3, r3, r2
 800b6d0:	3b11      	subs	r3, #17
 800b6d2:	089b      	lsrs	r3, r3, #2
 800b6d4:	009d      	lsls	r5, r3, #2
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	1940      	adds	r0, r0, r5
 800b6da:	4281      	cmp	r1, r0
 800b6dc:	d803      	bhi.n	800b6e6 <__copybits+0x3e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	cc40      	ldmia	r4!, {r6}
 800b6e2:	c540      	stmia	r5!, {r6}
 800b6e4:	e7ec      	b.n	800b6c0 <__copybits+0x18>
 800b6e6:	c008      	stmia	r0!, {r3}
 800b6e8:	e7f7      	b.n	800b6da <__copybits+0x32>

0800b6ea <__any_on>:
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	6900      	ldr	r0, [r0, #16]
 800b6ee:	b510      	push	{r4, lr}
 800b6f0:	3214      	adds	r2, #20
 800b6f2:	114b      	asrs	r3, r1, #5
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	db13      	blt.n	800b720 <__any_on+0x36>
 800b6f8:	dd0c      	ble.n	800b714 <__any_on+0x2a>
 800b6fa:	241f      	movs	r4, #31
 800b6fc:	0008      	movs	r0, r1
 800b6fe:	4020      	ands	r0, r4
 800b700:	4221      	tst	r1, r4
 800b702:	d007      	beq.n	800b714 <__any_on+0x2a>
 800b704:	0099      	lsls	r1, r3, #2
 800b706:	588c      	ldr	r4, [r1, r2]
 800b708:	0021      	movs	r1, r4
 800b70a:	40c1      	lsrs	r1, r0
 800b70c:	4081      	lsls	r1, r0
 800b70e:	2001      	movs	r0, #1
 800b710:	428c      	cmp	r4, r1
 800b712:	d104      	bne.n	800b71e <__any_on+0x34>
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	18d3      	adds	r3, r2, r3
 800b718:	4293      	cmp	r3, r2
 800b71a:	d803      	bhi.n	800b724 <__any_on+0x3a>
 800b71c:	2000      	movs	r0, #0
 800b71e:	bd10      	pop	{r4, pc}
 800b720:	0003      	movs	r3, r0
 800b722:	e7f7      	b.n	800b714 <__any_on+0x2a>
 800b724:	3b04      	subs	r3, #4
 800b726:	6819      	ldr	r1, [r3, #0]
 800b728:	2900      	cmp	r1, #0
 800b72a:	d0f5      	beq.n	800b718 <__any_on+0x2e>
 800b72c:	2001      	movs	r0, #1
 800b72e:	e7f6      	b.n	800b71e <__any_on+0x34>

0800b730 <__sread>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	000c      	movs	r4, r1
 800b734:	250e      	movs	r5, #14
 800b736:	5f49      	ldrsh	r1, [r1, r5]
 800b738:	f000 f9ec 	bl	800bb14 <_read_r>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	db03      	blt.n	800b748 <__sread+0x18>
 800b740:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b742:	181b      	adds	r3, r3, r0
 800b744:	6563      	str	r3, [r4, #84]	@ 0x54
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	4a02      	ldr	r2, [pc, #8]	@ (800b754 <__sread+0x24>)
 800b74c:	4013      	ands	r3, r2
 800b74e:	81a3      	strh	r3, [r4, #12]
 800b750:	e7f9      	b.n	800b746 <__sread+0x16>
 800b752:	46c0      	nop			@ (mov r8, r8)
 800b754:	ffffefff 	.word	0xffffefff

0800b758 <__swrite>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	001f      	movs	r7, r3
 800b75c:	898b      	ldrh	r3, [r1, #12]
 800b75e:	0005      	movs	r5, r0
 800b760:	000c      	movs	r4, r1
 800b762:	0016      	movs	r6, r2
 800b764:	05db      	lsls	r3, r3, #23
 800b766:	d505      	bpl.n	800b774 <__swrite+0x1c>
 800b768:	230e      	movs	r3, #14
 800b76a:	5ec9      	ldrsh	r1, [r1, r3]
 800b76c:	2200      	movs	r2, #0
 800b76e:	2302      	movs	r3, #2
 800b770:	f000 f9bc 	bl	800baec <_lseek_r>
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	4a05      	ldr	r2, [pc, #20]	@ (800b78c <__swrite+0x34>)
 800b778:	0028      	movs	r0, r5
 800b77a:	4013      	ands	r3, r2
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	0032      	movs	r2, r6
 800b780:	230e      	movs	r3, #14
 800b782:	5ee1      	ldrsh	r1, [r4, r3]
 800b784:	003b      	movs	r3, r7
 800b786:	f000 f9eb 	bl	800bb60 <_write_r>
 800b78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b78c:	ffffefff 	.word	0xffffefff

0800b790 <__sseek>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	000c      	movs	r4, r1
 800b794:	250e      	movs	r5, #14
 800b796:	5f49      	ldrsh	r1, [r1, r5]
 800b798:	f000 f9a8 	bl	800baec <_lseek_r>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	1c42      	adds	r2, r0, #1
 800b7a0:	d103      	bne.n	800b7aa <__sseek+0x1a>
 800b7a2:	4a05      	ldr	r2, [pc, #20]	@ (800b7b8 <__sseek+0x28>)
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	bd70      	pop	{r4, r5, r6, pc}
 800b7aa:	2280      	movs	r2, #128	@ 0x80
 800b7ac:	0152      	lsls	r2, r2, #5
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	81a3      	strh	r3, [r4, #12]
 800b7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7b4:	e7f8      	b.n	800b7a8 <__sseek+0x18>
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	ffffefff 	.word	0xffffefff

0800b7bc <__sclose>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	230e      	movs	r3, #14
 800b7c0:	5ec9      	ldrsh	r1, [r1, r3]
 800b7c2:	f000 f95d 	bl	800ba80 <_close_r>
 800b7c6:	bd10      	pop	{r4, pc}

0800b7c8 <_realloc_r>:
 800b7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ca:	0006      	movs	r6, r0
 800b7cc:	000c      	movs	r4, r1
 800b7ce:	0015      	movs	r5, r2
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	d105      	bne.n	800b7e0 <_realloc_r+0x18>
 800b7d4:	0011      	movs	r1, r2
 800b7d6:	f7ff f98d 	bl	800aaf4 <_malloc_r>
 800b7da:	0004      	movs	r4, r0
 800b7dc:	0020      	movs	r0, r4
 800b7de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	d103      	bne.n	800b7ec <_realloc_r+0x24>
 800b7e4:	f000 fa1c 	bl	800bc20 <_free_r>
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	e7f7      	b.n	800b7dc <_realloc_r+0x14>
 800b7ec:	f000 fa62 	bl	800bcb4 <_malloc_usable_size_r>
 800b7f0:	0007      	movs	r7, r0
 800b7f2:	4285      	cmp	r5, r0
 800b7f4:	d802      	bhi.n	800b7fc <_realloc_r+0x34>
 800b7f6:	0843      	lsrs	r3, r0, #1
 800b7f8:	42ab      	cmp	r3, r5
 800b7fa:	d3ef      	bcc.n	800b7dc <_realloc_r+0x14>
 800b7fc:	0029      	movs	r1, r5
 800b7fe:	0030      	movs	r0, r6
 800b800:	f7ff f978 	bl	800aaf4 <_malloc_r>
 800b804:	9001      	str	r0, [sp, #4]
 800b806:	2800      	cmp	r0, #0
 800b808:	d0ee      	beq.n	800b7e8 <_realloc_r+0x20>
 800b80a:	002a      	movs	r2, r5
 800b80c:	42bd      	cmp	r5, r7
 800b80e:	d900      	bls.n	800b812 <_realloc_r+0x4a>
 800b810:	003a      	movs	r2, r7
 800b812:	0021      	movs	r1, r4
 800b814:	9801      	ldr	r0, [sp, #4]
 800b816:	f7fd fdf3 	bl	8009400 <memcpy>
 800b81a:	0021      	movs	r1, r4
 800b81c:	0030      	movs	r0, r6
 800b81e:	f000 f9ff 	bl	800bc20 <_free_r>
 800b822:	9c01      	ldr	r4, [sp, #4]
 800b824:	e7da      	b.n	800b7dc <_realloc_r+0x14>

0800b826 <__swbuf_r>:
 800b826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b828:	0006      	movs	r6, r0
 800b82a:	000d      	movs	r5, r1
 800b82c:	0014      	movs	r4, r2
 800b82e:	2800      	cmp	r0, #0
 800b830:	d004      	beq.n	800b83c <__swbuf_r+0x16>
 800b832:	6a03      	ldr	r3, [r0, #32]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <__swbuf_r+0x16>
 800b838:	f7fc fe58 	bl	80084ec <__sinit>
 800b83c:	69a3      	ldr	r3, [r4, #24]
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	071b      	lsls	r3, r3, #28
 800b844:	d502      	bpl.n	800b84c <__swbuf_r+0x26>
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d109      	bne.n	800b860 <__swbuf_r+0x3a>
 800b84c:	0021      	movs	r1, r4
 800b84e:	0030      	movs	r0, r6
 800b850:	f000 f82c 	bl	800b8ac <__swsetup_r>
 800b854:	2800      	cmp	r0, #0
 800b856:	d003      	beq.n	800b860 <__swbuf_r+0x3a>
 800b858:	2501      	movs	r5, #1
 800b85a:	426d      	negs	r5, r5
 800b85c:	0028      	movs	r0, r5
 800b85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	6820      	ldr	r0, [r4, #0]
 800b864:	b2ef      	uxtb	r7, r5
 800b866:	1ac0      	subs	r0, r0, r3
 800b868:	6963      	ldr	r3, [r4, #20]
 800b86a:	b2ed      	uxtb	r5, r5
 800b86c:	4283      	cmp	r3, r0
 800b86e:	dc05      	bgt.n	800b87c <__swbuf_r+0x56>
 800b870:	0021      	movs	r1, r4
 800b872:	0030      	movs	r0, r6
 800b874:	f7ff fa56 	bl	800ad24 <_fflush_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d1ed      	bne.n	800b858 <__swbuf_r+0x32>
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	3001      	adds	r0, #1
 800b880:	3b01      	subs	r3, #1
 800b882:	60a3      	str	r3, [r4, #8]
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	6022      	str	r2, [r4, #0]
 800b88a:	701f      	strb	r7, [r3, #0]
 800b88c:	6963      	ldr	r3, [r4, #20]
 800b88e:	4283      	cmp	r3, r0
 800b890:	d004      	beq.n	800b89c <__swbuf_r+0x76>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	07db      	lsls	r3, r3, #31
 800b896:	d5e1      	bpl.n	800b85c <__swbuf_r+0x36>
 800b898:	2d0a      	cmp	r5, #10
 800b89a:	d1df      	bne.n	800b85c <__swbuf_r+0x36>
 800b89c:	0021      	movs	r1, r4
 800b89e:	0030      	movs	r0, r6
 800b8a0:	f7ff fa40 	bl	800ad24 <_fflush_r>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d0d9      	beq.n	800b85c <__swbuf_r+0x36>
 800b8a8:	e7d6      	b.n	800b858 <__swbuf_r+0x32>
	...

0800b8ac <__swsetup_r>:
 800b8ac:	4b2d      	ldr	r3, [pc, #180]	@ (800b964 <__swsetup_r+0xb8>)
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	0005      	movs	r5, r0
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	000c      	movs	r4, r1
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d004      	beq.n	800b8c4 <__swsetup_r+0x18>
 800b8ba:	6a03      	ldr	r3, [r0, #32]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <__swsetup_r+0x18>
 800b8c0:	f7fc fe14 	bl	80084ec <__sinit>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	5ee2      	ldrsh	r2, [r4, r3]
 800b8c8:	0713      	lsls	r3, r2, #28
 800b8ca:	d423      	bmi.n	800b914 <__swsetup_r+0x68>
 800b8cc:	06d3      	lsls	r3, r2, #27
 800b8ce:	d407      	bmi.n	800b8e0 <__swsetup_r+0x34>
 800b8d0:	2309      	movs	r3, #9
 800b8d2:	602b      	str	r3, [r5, #0]
 800b8d4:	2340      	movs	r3, #64	@ 0x40
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	4240      	negs	r0, r0
 800b8de:	e03a      	b.n	800b956 <__swsetup_r+0xaa>
 800b8e0:	0752      	lsls	r2, r2, #29
 800b8e2:	d513      	bpl.n	800b90c <__swsetup_r+0x60>
 800b8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	d008      	beq.n	800b8fc <__swsetup_r+0x50>
 800b8ea:	0023      	movs	r3, r4
 800b8ec:	3344      	adds	r3, #68	@ 0x44
 800b8ee:	4299      	cmp	r1, r3
 800b8f0:	d002      	beq.n	800b8f8 <__swsetup_r+0x4c>
 800b8f2:	0028      	movs	r0, r5
 800b8f4:	f000 f994 	bl	800bc20 <_free_r>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8fc:	2224      	movs	r2, #36	@ 0x24
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	4393      	bics	r3, r2
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	2300      	movs	r3, #0
 800b906:	6063      	str	r3, [r4, #4]
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	2308      	movs	r3, #8
 800b90e:	89a2      	ldrh	r2, [r4, #12]
 800b910:	4313      	orrs	r3, r2
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <__swsetup_r+0x86>
 800b91a:	21a0      	movs	r1, #160	@ 0xa0
 800b91c:	2280      	movs	r2, #128	@ 0x80
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	0089      	lsls	r1, r1, #2
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	400b      	ands	r3, r1
 800b926:	4293      	cmp	r3, r2
 800b928:	d003      	beq.n	800b932 <__swsetup_r+0x86>
 800b92a:	0021      	movs	r1, r4
 800b92c:	0028      	movs	r0, r5
 800b92e:	f000 f853 	bl	800b9d8 <__smakebuf_r>
 800b932:	230c      	movs	r3, #12
 800b934:	5ee2      	ldrsh	r2, [r4, r3]
 800b936:	2101      	movs	r1, #1
 800b938:	0013      	movs	r3, r2
 800b93a:	400b      	ands	r3, r1
 800b93c:	420a      	tst	r2, r1
 800b93e:	d00b      	beq.n	800b958 <__swsetup_r+0xac>
 800b940:	2300      	movs	r3, #0
 800b942:	60a3      	str	r3, [r4, #8]
 800b944:	6963      	ldr	r3, [r4, #20]
 800b946:	425b      	negs	r3, r3
 800b948:	61a3      	str	r3, [r4, #24]
 800b94a:	2000      	movs	r0, #0
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	4283      	cmp	r3, r0
 800b950:	d101      	bne.n	800b956 <__swsetup_r+0xaa>
 800b952:	0613      	lsls	r3, r2, #24
 800b954:	d4be      	bmi.n	800b8d4 <__swsetup_r+0x28>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	0791      	lsls	r1, r2, #30
 800b95a:	d400      	bmi.n	800b95e <__swsetup_r+0xb2>
 800b95c:	6963      	ldr	r3, [r4, #20]
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	e7f3      	b.n	800b94a <__swsetup_r+0x9e>
 800b962:	46c0      	nop			@ (mov r8, r8)
 800b964:	20000184 	.word	0x20000184

0800b968 <__ascii_wctomb>:
 800b968:	0003      	movs	r3, r0
 800b96a:	1e08      	subs	r0, r1, #0
 800b96c:	d005      	beq.n	800b97a <__ascii_wctomb+0x12>
 800b96e:	2aff      	cmp	r2, #255	@ 0xff
 800b970:	d904      	bls.n	800b97c <__ascii_wctomb+0x14>
 800b972:	228a      	movs	r2, #138	@ 0x8a
 800b974:	2001      	movs	r0, #1
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	4240      	negs	r0, r0
 800b97a:	4770      	bx	lr
 800b97c:	2001      	movs	r0, #1
 800b97e:	700a      	strb	r2, [r1, #0]
 800b980:	e7fb      	b.n	800b97a <__ascii_wctomb+0x12>
	...

0800b984 <__swhatbuf_r>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	000e      	movs	r6, r1
 800b988:	001d      	movs	r5, r3
 800b98a:	230e      	movs	r3, #14
 800b98c:	5ec9      	ldrsh	r1, [r1, r3]
 800b98e:	0014      	movs	r4, r2
 800b990:	b096      	sub	sp, #88	@ 0x58
 800b992:	2900      	cmp	r1, #0
 800b994:	da0c      	bge.n	800b9b0 <__swhatbuf_r+0x2c>
 800b996:	89b2      	ldrh	r2, [r6, #12]
 800b998:	2380      	movs	r3, #128	@ 0x80
 800b99a:	0011      	movs	r1, r2
 800b99c:	4019      	ands	r1, r3
 800b99e:	421a      	tst	r2, r3
 800b9a0:	d114      	bne.n	800b9cc <__swhatbuf_r+0x48>
 800b9a2:	2380      	movs	r3, #128	@ 0x80
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	6029      	str	r1, [r5, #0]
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	b016      	add	sp, #88	@ 0x58
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	466a      	mov	r2, sp
 800b9b2:	f000 f877 	bl	800baa4 <_fstat_r>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	dbed      	blt.n	800b996 <__swhatbuf_r+0x12>
 800b9ba:	23f0      	movs	r3, #240	@ 0xf0
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	4019      	ands	r1, r3
 800b9c2:	4b04      	ldr	r3, [pc, #16]	@ (800b9d4 <__swhatbuf_r+0x50>)
 800b9c4:	18c9      	adds	r1, r1, r3
 800b9c6:	424b      	negs	r3, r1
 800b9c8:	4159      	adcs	r1, r3
 800b9ca:	e7ea      	b.n	800b9a2 <__swhatbuf_r+0x1e>
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	2340      	movs	r3, #64	@ 0x40
 800b9d0:	e7e9      	b.n	800b9a6 <__swhatbuf_r+0x22>
 800b9d2:	46c0      	nop			@ (mov r8, r8)
 800b9d4:	ffffe000 	.word	0xffffe000

0800b9d8 <__smakebuf_r>:
 800b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9da:	2602      	movs	r6, #2
 800b9dc:	898b      	ldrh	r3, [r1, #12]
 800b9de:	0005      	movs	r5, r0
 800b9e0:	000c      	movs	r4, r1
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	4233      	tst	r3, r6
 800b9e6:	d007      	beq.n	800b9f8 <__smakebuf_r+0x20>
 800b9e8:	0023      	movs	r3, r4
 800b9ea:	3347      	adds	r3, #71	@ 0x47
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	6163      	str	r3, [r4, #20]
 800b9f4:	b005      	add	sp, #20
 800b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f8:	ab03      	add	r3, sp, #12
 800b9fa:	aa02      	add	r2, sp, #8
 800b9fc:	f7ff ffc2 	bl	800b984 <__swhatbuf_r>
 800ba00:	9f02      	ldr	r7, [sp, #8]
 800ba02:	9001      	str	r0, [sp, #4]
 800ba04:	0039      	movs	r1, r7
 800ba06:	0028      	movs	r0, r5
 800ba08:	f7ff f874 	bl	800aaf4 <_malloc_r>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d108      	bne.n	800ba22 <__smakebuf_r+0x4a>
 800ba10:	220c      	movs	r2, #12
 800ba12:	5ea3      	ldrsh	r3, [r4, r2]
 800ba14:	059a      	lsls	r2, r3, #22
 800ba16:	d4ed      	bmi.n	800b9f4 <__smakebuf_r+0x1c>
 800ba18:	2203      	movs	r2, #3
 800ba1a:	4393      	bics	r3, r2
 800ba1c:	431e      	orrs	r6, r3
 800ba1e:	81a6      	strh	r6, [r4, #12]
 800ba20:	e7e2      	b.n	800b9e8 <__smakebuf_r+0x10>
 800ba22:	2380      	movs	r3, #128	@ 0x80
 800ba24:	89a2      	ldrh	r2, [r4, #12]
 800ba26:	6020      	str	r0, [r4, #0]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	6120      	str	r0, [r4, #16]
 800ba30:	6167      	str	r7, [r4, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00c      	beq.n	800ba50 <__smakebuf_r+0x78>
 800ba36:	0028      	movs	r0, r5
 800ba38:	230e      	movs	r3, #14
 800ba3a:	5ee1      	ldrsh	r1, [r4, r3]
 800ba3c:	f000 f844 	bl	800bac8 <_isatty_r>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d005      	beq.n	800ba50 <__smakebuf_r+0x78>
 800ba44:	2303      	movs	r3, #3
 800ba46:	89a2      	ldrh	r2, [r4, #12]
 800ba48:	439a      	bics	r2, r3
 800ba4a:	3b02      	subs	r3, #2
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	9a01      	ldr	r2, [sp, #4]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	e7cc      	b.n	800b9f4 <__smakebuf_r+0x1c>

0800ba5a <memmove>:
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4288      	cmp	r0, r1
 800ba5e:	d806      	bhi.n	800ba6e <memmove+0x14>
 800ba60:	2300      	movs	r3, #0
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d008      	beq.n	800ba78 <memmove+0x1e>
 800ba66:	5ccc      	ldrb	r4, [r1, r3]
 800ba68:	54c4      	strb	r4, [r0, r3]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	e7f9      	b.n	800ba62 <memmove+0x8>
 800ba6e:	188b      	adds	r3, r1, r2
 800ba70:	4298      	cmp	r0, r3
 800ba72:	d2f5      	bcs.n	800ba60 <memmove+0x6>
 800ba74:	3a01      	subs	r2, #1
 800ba76:	d200      	bcs.n	800ba7a <memmove+0x20>
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	5c8b      	ldrb	r3, [r1, r2]
 800ba7c:	5483      	strb	r3, [r0, r2]
 800ba7e:	e7f9      	b.n	800ba74 <memmove+0x1a>

0800ba80 <_close_r>:
 800ba80:	2300      	movs	r3, #0
 800ba82:	b570      	push	{r4, r5, r6, lr}
 800ba84:	4d06      	ldr	r5, [pc, #24]	@ (800baa0 <_close_r+0x20>)
 800ba86:	0004      	movs	r4, r0
 800ba88:	0008      	movs	r0, r1
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	f7f8 fedf 	bl	800484e <_close>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d103      	bne.n	800ba9c <_close_r+0x1c>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d000      	beq.n	800ba9c <_close_r+0x1c>
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	20000898 	.word	0x20000898

0800baa4 <_fstat_r>:
 800baa4:	2300      	movs	r3, #0
 800baa6:	b570      	push	{r4, r5, r6, lr}
 800baa8:	4d06      	ldr	r5, [pc, #24]	@ (800bac4 <_fstat_r+0x20>)
 800baaa:	0004      	movs	r4, r0
 800baac:	0008      	movs	r0, r1
 800baae:	0011      	movs	r1, r2
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	f7f8 fed6 	bl	8004862 <_fstat>
 800bab6:	1c43      	adds	r3, r0, #1
 800bab8:	d103      	bne.n	800bac2 <_fstat_r+0x1e>
 800baba:	682b      	ldr	r3, [r5, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d000      	beq.n	800bac2 <_fstat_r+0x1e>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	20000898 	.word	0x20000898

0800bac8 <_isatty_r>:
 800bac8:	2300      	movs	r3, #0
 800baca:	b570      	push	{r4, r5, r6, lr}
 800bacc:	4d06      	ldr	r5, [pc, #24]	@ (800bae8 <_isatty_r+0x20>)
 800bace:	0004      	movs	r4, r0
 800bad0:	0008      	movs	r0, r1
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7f8 fed3 	bl	800487e <_isatty>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d103      	bne.n	800bae4 <_isatty_r+0x1c>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d000      	beq.n	800bae4 <_isatty_r+0x1c>
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	bd70      	pop	{r4, r5, r6, pc}
 800bae6:	46c0      	nop			@ (mov r8, r8)
 800bae8:	20000898 	.word	0x20000898

0800baec <_lseek_r>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	0004      	movs	r4, r0
 800baf0:	0008      	movs	r0, r1
 800baf2:	0011      	movs	r1, r2
 800baf4:	001a      	movs	r2, r3
 800baf6:	2300      	movs	r3, #0
 800baf8:	4d05      	ldr	r5, [pc, #20]	@ (800bb10 <_lseek_r+0x24>)
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f8 fec8 	bl	8004890 <_lseek>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d103      	bne.n	800bb0c <_lseek_r+0x20>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d000      	beq.n	800bb0c <_lseek_r+0x20>
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	bd70      	pop	{r4, r5, r6, pc}
 800bb0e:	46c0      	nop			@ (mov r8, r8)
 800bb10:	20000898 	.word	0x20000898

0800bb14 <_read_r>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	0004      	movs	r4, r0
 800bb18:	0008      	movs	r0, r1
 800bb1a:	0011      	movs	r1, r2
 800bb1c:	001a      	movs	r2, r3
 800bb1e:	2300      	movs	r3, #0
 800bb20:	4d05      	ldr	r5, [pc, #20]	@ (800bb38 <_read_r+0x24>)
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f8 fe5a 	bl	80047dc <_read>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d103      	bne.n	800bb34 <_read_r+0x20>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d000      	beq.n	800bb34 <_read_r+0x20>
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	46c0      	nop			@ (mov r8, r8)
 800bb38:	20000898 	.word	0x20000898

0800bb3c <_sbrk_r>:
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	b570      	push	{r4, r5, r6, lr}
 800bb40:	4d06      	ldr	r5, [pc, #24]	@ (800bb5c <_sbrk_r+0x20>)
 800bb42:	0004      	movs	r4, r0
 800bb44:	0008      	movs	r0, r1
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f8 feae 	bl	80048a8 <_sbrk>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d103      	bne.n	800bb58 <_sbrk_r+0x1c>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d000      	beq.n	800bb58 <_sbrk_r+0x1c>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	46c0      	nop			@ (mov r8, r8)
 800bb5c:	20000898 	.word	0x20000898

0800bb60 <_write_r>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	0004      	movs	r4, r0
 800bb64:	0008      	movs	r0, r1
 800bb66:	0011      	movs	r1, r2
 800bb68:	001a      	movs	r2, r3
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4d05      	ldr	r5, [pc, #20]	@ (800bb84 <_write_r+0x24>)
 800bb6e:	602b      	str	r3, [r5, #0]
 800bb70:	f7f8 fe51 	bl	8004816 <_write>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d103      	bne.n	800bb80 <_write_r+0x20>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d000      	beq.n	800bb80 <_write_r+0x20>
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
 800bb82:	46c0      	nop			@ (mov r8, r8)
 800bb84:	20000898 	.word	0x20000898

0800bb88 <__assert_func>:
 800bb88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb8a:	0014      	movs	r4, r2
 800bb8c:	001a      	movs	r2, r3
 800bb8e:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <__assert_func+0x2c>)
 800bb90:	0005      	movs	r5, r0
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	000e      	movs	r6, r1
 800bb96:	68d8      	ldr	r0, [r3, #12]
 800bb98:	4b07      	ldr	r3, [pc, #28]	@ (800bbb8 <__assert_func+0x30>)
 800bb9a:	2c00      	cmp	r4, #0
 800bb9c:	d101      	bne.n	800bba2 <__assert_func+0x1a>
 800bb9e:	4b07      	ldr	r3, [pc, #28]	@ (800bbbc <__assert_func+0x34>)
 800bba0:	001c      	movs	r4, r3
 800bba2:	4907      	ldr	r1, [pc, #28]	@ (800bbc0 <__assert_func+0x38>)
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	9402      	str	r4, [sp, #8]
 800bba8:	002b      	movs	r3, r5
 800bbaa:	9600      	str	r6, [sp, #0]
 800bbac:	f000 f88a 	bl	800bcc4 <fiprintf>
 800bbb0:	f000 f898 	bl	800bce4 <abort>
 800bbb4:	20000184 	.word	0x20000184
 800bbb8:	0800c5a8 	.word	0x0800c5a8
 800bbbc:	0800c5e3 	.word	0x0800c5e3
 800bbc0:	0800c5b5 	.word	0x0800c5b5

0800bbc4 <_calloc_r>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	0c0b      	lsrs	r3, r1, #16
 800bbc8:	0c15      	lsrs	r5, r2, #16
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d11e      	bne.n	800bc0c <_calloc_r+0x48>
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	d10c      	bne.n	800bbec <_calloc_r+0x28>
 800bbd2:	b289      	uxth	r1, r1
 800bbd4:	b294      	uxth	r4, r2
 800bbd6:	434c      	muls	r4, r1
 800bbd8:	0021      	movs	r1, r4
 800bbda:	f7fe ff8b 	bl	800aaf4 <_malloc_r>
 800bbde:	1e05      	subs	r5, r0, #0
 800bbe0:	d01a      	beq.n	800bc18 <_calloc_r+0x54>
 800bbe2:	0022      	movs	r2, r4
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	f7fd fbc6 	bl	8009376 <memset>
 800bbea:	e016      	b.n	800bc1a <_calloc_r+0x56>
 800bbec:	1c2b      	adds	r3, r5, #0
 800bbee:	1c0c      	adds	r4, r1, #0
 800bbf0:	b289      	uxth	r1, r1
 800bbf2:	b292      	uxth	r2, r2
 800bbf4:	434a      	muls	r2, r1
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	b2a1      	uxth	r1, r4
 800bbfa:	4359      	muls	r1, r3
 800bbfc:	0c14      	lsrs	r4, r2, #16
 800bbfe:	190c      	adds	r4, r1, r4
 800bc00:	0c23      	lsrs	r3, r4, #16
 800bc02:	d107      	bne.n	800bc14 <_calloc_r+0x50>
 800bc04:	0424      	lsls	r4, r4, #16
 800bc06:	b292      	uxth	r2, r2
 800bc08:	4314      	orrs	r4, r2
 800bc0a:	e7e5      	b.n	800bbd8 <_calloc_r+0x14>
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	d101      	bne.n	800bc14 <_calloc_r+0x50>
 800bc10:	1c14      	adds	r4, r2, #0
 800bc12:	e7ed      	b.n	800bbf0 <_calloc_r+0x2c>
 800bc14:	230c      	movs	r3, #12
 800bc16:	6003      	str	r3, [r0, #0]
 800bc18:	2500      	movs	r5, #0
 800bc1a:	0028      	movs	r0, r5
 800bc1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc20 <_free_r>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	0005      	movs	r5, r0
 800bc24:	1e0c      	subs	r4, r1, #0
 800bc26:	d010      	beq.n	800bc4a <_free_r+0x2a>
 800bc28:	3c04      	subs	r4, #4
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	da00      	bge.n	800bc32 <_free_r+0x12>
 800bc30:	18e4      	adds	r4, r4, r3
 800bc32:	0028      	movs	r0, r5
 800bc34:	f7ff f8a2 	bl	800ad7c <__malloc_lock>
 800bc38:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb0 <_free_r+0x90>)
 800bc3a:	6813      	ldr	r3, [r2, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d105      	bne.n	800bc4c <_free_r+0x2c>
 800bc40:	6063      	str	r3, [r4, #4]
 800bc42:	6014      	str	r4, [r2, #0]
 800bc44:	0028      	movs	r0, r5
 800bc46:	f7ff f8a1 	bl	800ad8c <__malloc_unlock>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	42a3      	cmp	r3, r4
 800bc4e:	d908      	bls.n	800bc62 <_free_r+0x42>
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	1821      	adds	r1, r4, r0
 800bc54:	428b      	cmp	r3, r1
 800bc56:	d1f3      	bne.n	800bc40 <_free_r+0x20>
 800bc58:	6819      	ldr	r1, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	1809      	adds	r1, r1, r0
 800bc5e:	6021      	str	r1, [r4, #0]
 800bc60:	e7ee      	b.n	800bc40 <_free_r+0x20>
 800bc62:	001a      	movs	r2, r3
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <_free_r+0x4e>
 800bc6a:	42a3      	cmp	r3, r4
 800bc6c:	d9f9      	bls.n	800bc62 <_free_r+0x42>
 800bc6e:	6811      	ldr	r1, [r2, #0]
 800bc70:	1850      	adds	r0, r2, r1
 800bc72:	42a0      	cmp	r0, r4
 800bc74:	d10b      	bne.n	800bc8e <_free_r+0x6e>
 800bc76:	6820      	ldr	r0, [r4, #0]
 800bc78:	1809      	adds	r1, r1, r0
 800bc7a:	1850      	adds	r0, r2, r1
 800bc7c:	6011      	str	r1, [r2, #0]
 800bc7e:	4283      	cmp	r3, r0
 800bc80:	d1e0      	bne.n	800bc44 <_free_r+0x24>
 800bc82:	6818      	ldr	r0, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	1841      	adds	r1, r0, r1
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	6053      	str	r3, [r2, #4]
 800bc8c:	e7da      	b.n	800bc44 <_free_r+0x24>
 800bc8e:	42a0      	cmp	r0, r4
 800bc90:	d902      	bls.n	800bc98 <_free_r+0x78>
 800bc92:	230c      	movs	r3, #12
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	e7d5      	b.n	800bc44 <_free_r+0x24>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	1821      	adds	r1, r4, r0
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	d103      	bne.n	800bca8 <_free_r+0x88>
 800bca0:	6819      	ldr	r1, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	1809      	adds	r1, r1, r0
 800bca6:	6021      	str	r1, [r4, #0]
 800bca8:	6063      	str	r3, [r4, #4]
 800bcaa:	6054      	str	r4, [r2, #4]
 800bcac:	e7ca      	b.n	800bc44 <_free_r+0x24>
 800bcae:	46c0      	nop			@ (mov r8, r8)
 800bcb0:	20000894 	.word	0x20000894

0800bcb4 <_malloc_usable_size_r>:
 800bcb4:	1f0b      	subs	r3, r1, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1f18      	subs	r0, r3, #4
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da01      	bge.n	800bcc2 <_malloc_usable_size_r+0xe>
 800bcbe:	580b      	ldr	r3, [r1, r0]
 800bcc0:	18c0      	adds	r0, r0, r3
 800bcc2:	4770      	bx	lr

0800bcc4 <fiprintf>:
 800bcc4:	b40e      	push	{r1, r2, r3}
 800bcc6:	b517      	push	{r0, r1, r2, r4, lr}
 800bcc8:	4c05      	ldr	r4, [pc, #20]	@ (800bce0 <fiprintf+0x1c>)
 800bcca:	ab05      	add	r3, sp, #20
 800bccc:	cb04      	ldmia	r3!, {r2}
 800bcce:	0001      	movs	r1, r0
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	f000 f834 	bl	800bd40 <_vfiprintf_r>
 800bcd8:	bc1e      	pop	{r1, r2, r3, r4}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	b003      	add	sp, #12
 800bcde:	4718      	bx	r3
 800bce0:	20000184 	.word	0x20000184

0800bce4 <abort>:
 800bce4:	2006      	movs	r0, #6
 800bce6:	b510      	push	{r4, lr}
 800bce8:	f000 f970 	bl	800bfcc <raise>
 800bcec:	2001      	movs	r0, #1
 800bcee:	f7f8 fd68 	bl	80047c2 <_exit>

0800bcf2 <__sfputc_r>:
 800bcf2:	6893      	ldr	r3, [r2, #8]
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	6093      	str	r3, [r2, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	da04      	bge.n	800bd08 <__sfputc_r+0x16>
 800bcfe:	6994      	ldr	r4, [r2, #24]
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	db07      	blt.n	800bd14 <__sfputc_r+0x22>
 800bd04:	290a      	cmp	r1, #10
 800bd06:	d005      	beq.n	800bd14 <__sfputc_r+0x22>
 800bd08:	6813      	ldr	r3, [r2, #0]
 800bd0a:	1c58      	adds	r0, r3, #1
 800bd0c:	6010      	str	r0, [r2, #0]
 800bd0e:	7019      	strb	r1, [r3, #0]
 800bd10:	0008      	movs	r0, r1
 800bd12:	bd10      	pop	{r4, pc}
 800bd14:	f7ff fd87 	bl	800b826 <__swbuf_r>
 800bd18:	0001      	movs	r1, r0
 800bd1a:	e7f9      	b.n	800bd10 <__sfputc_r+0x1e>

0800bd1c <__sfputs_r>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	0006      	movs	r6, r0
 800bd20:	000f      	movs	r7, r1
 800bd22:	0014      	movs	r4, r2
 800bd24:	18d5      	adds	r5, r2, r3
 800bd26:	42ac      	cmp	r4, r5
 800bd28:	d101      	bne.n	800bd2e <__sfputs_r+0x12>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	e007      	b.n	800bd3e <__sfputs_r+0x22>
 800bd2e:	7821      	ldrb	r1, [r4, #0]
 800bd30:	003a      	movs	r2, r7
 800bd32:	0030      	movs	r0, r6
 800bd34:	f7ff ffdd 	bl	800bcf2 <__sfputc_r>
 800bd38:	3401      	adds	r4, #1
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d1f3      	bne.n	800bd26 <__sfputs_r+0xa>
 800bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd40 <_vfiprintf_r>:
 800bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd42:	b0a1      	sub	sp, #132	@ 0x84
 800bd44:	000f      	movs	r7, r1
 800bd46:	0015      	movs	r5, r2
 800bd48:	001e      	movs	r6, r3
 800bd4a:	9003      	str	r0, [sp, #12]
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d004      	beq.n	800bd5a <_vfiprintf_r+0x1a>
 800bd50:	6a03      	ldr	r3, [r0, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <_vfiprintf_r+0x1a>
 800bd56:	f7fc fbc9 	bl	80084ec <__sinit>
 800bd5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd5c:	07db      	lsls	r3, r3, #31
 800bd5e:	d405      	bmi.n	800bd6c <_vfiprintf_r+0x2c>
 800bd60:	89bb      	ldrh	r3, [r7, #12]
 800bd62:	059b      	lsls	r3, r3, #22
 800bd64:	d402      	bmi.n	800bd6c <_vfiprintf_r+0x2c>
 800bd66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bd68:	f7fd fb3d 	bl	80093e6 <__retarget_lock_acquire_recursive>
 800bd6c:	89bb      	ldrh	r3, [r7, #12]
 800bd6e:	071b      	lsls	r3, r3, #28
 800bd70:	d502      	bpl.n	800bd78 <_vfiprintf_r+0x38>
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d113      	bne.n	800bda0 <_vfiprintf_r+0x60>
 800bd78:	0039      	movs	r1, r7
 800bd7a:	9803      	ldr	r0, [sp, #12]
 800bd7c:	f7ff fd96 	bl	800b8ac <__swsetup_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d00d      	beq.n	800bda0 <_vfiprintf_r+0x60>
 800bd84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd86:	07db      	lsls	r3, r3, #31
 800bd88:	d503      	bpl.n	800bd92 <_vfiprintf_r+0x52>
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	4240      	negs	r0, r0
 800bd8e:	b021      	add	sp, #132	@ 0x84
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd92:	89bb      	ldrh	r3, [r7, #12]
 800bd94:	059b      	lsls	r3, r3, #22
 800bd96:	d4f8      	bmi.n	800bd8a <_vfiprintf_r+0x4a>
 800bd98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bd9a:	f7fd fb25 	bl	80093e8 <__retarget_lock_release_recursive>
 800bd9e:	e7f4      	b.n	800bd8a <_vfiprintf_r+0x4a>
 800bda0:	2300      	movs	r3, #0
 800bda2:	ac08      	add	r4, sp, #32
 800bda4:	6163      	str	r3, [r4, #20]
 800bda6:	3320      	adds	r3, #32
 800bda8:	7663      	strb	r3, [r4, #25]
 800bdaa:	3310      	adds	r3, #16
 800bdac:	76a3      	strb	r3, [r4, #26]
 800bdae:	9607      	str	r6, [sp, #28]
 800bdb0:	002e      	movs	r6, r5
 800bdb2:	7833      	ldrb	r3, [r6, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <_vfiprintf_r+0x7c>
 800bdb8:	2b25      	cmp	r3, #37	@ 0x25
 800bdba:	d148      	bne.n	800be4e <_vfiprintf_r+0x10e>
 800bdbc:	1b73      	subs	r3, r6, r5
 800bdbe:	9305      	str	r3, [sp, #20]
 800bdc0:	42ae      	cmp	r6, r5
 800bdc2:	d00b      	beq.n	800bddc <_vfiprintf_r+0x9c>
 800bdc4:	002a      	movs	r2, r5
 800bdc6:	0039      	movs	r1, r7
 800bdc8:	9803      	ldr	r0, [sp, #12]
 800bdca:	f7ff ffa7 	bl	800bd1c <__sfputs_r>
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d100      	bne.n	800bdd4 <_vfiprintf_r+0x94>
 800bdd2:	e0ae      	b.n	800bf32 <_vfiprintf_r+0x1f2>
 800bdd4:	6963      	ldr	r3, [r4, #20]
 800bdd6:	9a05      	ldr	r2, [sp, #20]
 800bdd8:	189b      	adds	r3, r3, r2
 800bdda:	6163      	str	r3, [r4, #20]
 800bddc:	7833      	ldrb	r3, [r6, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d100      	bne.n	800bde4 <_vfiprintf_r+0xa4>
 800bde2:	e0a6      	b.n	800bf32 <_vfiprintf_r+0x1f2>
 800bde4:	2201      	movs	r2, #1
 800bde6:	2300      	movs	r3, #0
 800bde8:	4252      	negs	r2, r2
 800bdea:	6062      	str	r2, [r4, #4]
 800bdec:	a904      	add	r1, sp, #16
 800bdee:	3254      	adds	r2, #84	@ 0x54
 800bdf0:	1852      	adds	r2, r2, r1
 800bdf2:	1c75      	adds	r5, r6, #1
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	60e3      	str	r3, [r4, #12]
 800bdf8:	60a3      	str	r3, [r4, #8]
 800bdfa:	7013      	strb	r3, [r2, #0]
 800bdfc:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bdfe:	4b59      	ldr	r3, [pc, #356]	@ (800bf64 <_vfiprintf_r+0x224>)
 800be00:	2205      	movs	r2, #5
 800be02:	0018      	movs	r0, r3
 800be04:	7829      	ldrb	r1, [r5, #0]
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	f7fd faef 	bl	80093ea <memchr>
 800be0c:	1c6e      	adds	r6, r5, #1
 800be0e:	2800      	cmp	r0, #0
 800be10:	d11f      	bne.n	800be52 <_vfiprintf_r+0x112>
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	06d3      	lsls	r3, r2, #27
 800be16:	d504      	bpl.n	800be22 <_vfiprintf_r+0xe2>
 800be18:	2353      	movs	r3, #83	@ 0x53
 800be1a:	a904      	add	r1, sp, #16
 800be1c:	185b      	adds	r3, r3, r1
 800be1e:	2120      	movs	r1, #32
 800be20:	7019      	strb	r1, [r3, #0]
 800be22:	0713      	lsls	r3, r2, #28
 800be24:	d504      	bpl.n	800be30 <_vfiprintf_r+0xf0>
 800be26:	2353      	movs	r3, #83	@ 0x53
 800be28:	a904      	add	r1, sp, #16
 800be2a:	185b      	adds	r3, r3, r1
 800be2c:	212b      	movs	r1, #43	@ 0x2b
 800be2e:	7019      	strb	r1, [r3, #0]
 800be30:	782b      	ldrb	r3, [r5, #0]
 800be32:	2b2a      	cmp	r3, #42	@ 0x2a
 800be34:	d016      	beq.n	800be64 <_vfiprintf_r+0x124>
 800be36:	002e      	movs	r6, r5
 800be38:	2100      	movs	r1, #0
 800be3a:	200a      	movs	r0, #10
 800be3c:	68e3      	ldr	r3, [r4, #12]
 800be3e:	7832      	ldrb	r2, [r6, #0]
 800be40:	1c75      	adds	r5, r6, #1
 800be42:	3a30      	subs	r2, #48	@ 0x30
 800be44:	2a09      	cmp	r2, #9
 800be46:	d950      	bls.n	800beea <_vfiprintf_r+0x1aa>
 800be48:	2900      	cmp	r1, #0
 800be4a:	d111      	bne.n	800be70 <_vfiprintf_r+0x130>
 800be4c:	e017      	b.n	800be7e <_vfiprintf_r+0x13e>
 800be4e:	3601      	adds	r6, #1
 800be50:	e7af      	b.n	800bdb2 <_vfiprintf_r+0x72>
 800be52:	9b05      	ldr	r3, [sp, #20]
 800be54:	6822      	ldr	r2, [r4, #0]
 800be56:	1ac0      	subs	r0, r0, r3
 800be58:	2301      	movs	r3, #1
 800be5a:	4083      	lsls	r3, r0
 800be5c:	4313      	orrs	r3, r2
 800be5e:	0035      	movs	r5, r6
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	e7cc      	b.n	800bdfe <_vfiprintf_r+0xbe>
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	1d19      	adds	r1, r3, #4
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	9107      	str	r1, [sp, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	db01      	blt.n	800be74 <_vfiprintf_r+0x134>
 800be70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be72:	e004      	b.n	800be7e <_vfiprintf_r+0x13e>
 800be74:	425b      	negs	r3, r3
 800be76:	60e3      	str	r3, [r4, #12]
 800be78:	2302      	movs	r3, #2
 800be7a:	4313      	orrs	r3, r2
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	7833      	ldrb	r3, [r6, #0]
 800be80:	2b2e      	cmp	r3, #46	@ 0x2e
 800be82:	d10c      	bne.n	800be9e <_vfiprintf_r+0x15e>
 800be84:	7873      	ldrb	r3, [r6, #1]
 800be86:	2b2a      	cmp	r3, #42	@ 0x2a
 800be88:	d134      	bne.n	800bef4 <_vfiprintf_r+0x1b4>
 800be8a:	9b07      	ldr	r3, [sp, #28]
 800be8c:	3602      	adds	r6, #2
 800be8e:	1d1a      	adds	r2, r3, #4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	9207      	str	r2, [sp, #28]
 800be94:	2b00      	cmp	r3, #0
 800be96:	da01      	bge.n	800be9c <_vfiprintf_r+0x15c>
 800be98:	2301      	movs	r3, #1
 800be9a:	425b      	negs	r3, r3
 800be9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9e:	4d32      	ldr	r5, [pc, #200]	@ (800bf68 <_vfiprintf_r+0x228>)
 800bea0:	2203      	movs	r2, #3
 800bea2:	0028      	movs	r0, r5
 800bea4:	7831      	ldrb	r1, [r6, #0]
 800bea6:	f7fd faa0 	bl	80093ea <memchr>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d006      	beq.n	800bebc <_vfiprintf_r+0x17c>
 800beae:	2340      	movs	r3, #64	@ 0x40
 800beb0:	1b40      	subs	r0, r0, r5
 800beb2:	4083      	lsls	r3, r0
 800beb4:	6822      	ldr	r2, [r4, #0]
 800beb6:	3601      	adds	r6, #1
 800beb8:	4313      	orrs	r3, r2
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	7831      	ldrb	r1, [r6, #0]
 800bebe:	2206      	movs	r2, #6
 800bec0:	482a      	ldr	r0, [pc, #168]	@ (800bf6c <_vfiprintf_r+0x22c>)
 800bec2:	1c75      	adds	r5, r6, #1
 800bec4:	7621      	strb	r1, [r4, #24]
 800bec6:	f7fd fa90 	bl	80093ea <memchr>
 800beca:	2800      	cmp	r0, #0
 800becc:	d040      	beq.n	800bf50 <_vfiprintf_r+0x210>
 800bece:	4b28      	ldr	r3, [pc, #160]	@ (800bf70 <_vfiprintf_r+0x230>)
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d122      	bne.n	800bf1a <_vfiprintf_r+0x1da>
 800bed4:	2207      	movs	r2, #7
 800bed6:	9b07      	ldr	r3, [sp, #28]
 800bed8:	3307      	adds	r3, #7
 800beda:	4393      	bics	r3, r2
 800bedc:	3308      	adds	r3, #8
 800bede:	9307      	str	r3, [sp, #28]
 800bee0:	6963      	ldr	r3, [r4, #20]
 800bee2:	9a04      	ldr	r2, [sp, #16]
 800bee4:	189b      	adds	r3, r3, r2
 800bee6:	6163      	str	r3, [r4, #20]
 800bee8:	e762      	b.n	800bdb0 <_vfiprintf_r+0x70>
 800beea:	4343      	muls	r3, r0
 800beec:	002e      	movs	r6, r5
 800beee:	2101      	movs	r1, #1
 800bef0:	189b      	adds	r3, r3, r2
 800bef2:	e7a4      	b.n	800be3e <_vfiprintf_r+0xfe>
 800bef4:	2300      	movs	r3, #0
 800bef6:	200a      	movs	r0, #10
 800bef8:	0019      	movs	r1, r3
 800befa:	3601      	adds	r6, #1
 800befc:	6063      	str	r3, [r4, #4]
 800befe:	7832      	ldrb	r2, [r6, #0]
 800bf00:	1c75      	adds	r5, r6, #1
 800bf02:	3a30      	subs	r2, #48	@ 0x30
 800bf04:	2a09      	cmp	r2, #9
 800bf06:	d903      	bls.n	800bf10 <_vfiprintf_r+0x1d0>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c8      	beq.n	800be9e <_vfiprintf_r+0x15e>
 800bf0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf0e:	e7c6      	b.n	800be9e <_vfiprintf_r+0x15e>
 800bf10:	4341      	muls	r1, r0
 800bf12:	002e      	movs	r6, r5
 800bf14:	2301      	movs	r3, #1
 800bf16:	1889      	adds	r1, r1, r2
 800bf18:	e7f1      	b.n	800befe <_vfiprintf_r+0x1be>
 800bf1a:	aa07      	add	r2, sp, #28
 800bf1c:	9200      	str	r2, [sp, #0]
 800bf1e:	0021      	movs	r1, r4
 800bf20:	003a      	movs	r2, r7
 800bf22:	4b14      	ldr	r3, [pc, #80]	@ (800bf74 <_vfiprintf_r+0x234>)
 800bf24:	9803      	ldr	r0, [sp, #12]
 800bf26:	f7fb fc67 	bl	80077f8 <_printf_float>
 800bf2a:	9004      	str	r0, [sp, #16]
 800bf2c:	9b04      	ldr	r3, [sp, #16]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	d1d6      	bne.n	800bee0 <_vfiprintf_r+0x1a0>
 800bf32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf34:	07db      	lsls	r3, r3, #31
 800bf36:	d405      	bmi.n	800bf44 <_vfiprintf_r+0x204>
 800bf38:	89bb      	ldrh	r3, [r7, #12]
 800bf3a:	059b      	lsls	r3, r3, #22
 800bf3c:	d402      	bmi.n	800bf44 <_vfiprintf_r+0x204>
 800bf3e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bf40:	f7fd fa52 	bl	80093e8 <__retarget_lock_release_recursive>
 800bf44:	89bb      	ldrh	r3, [r7, #12]
 800bf46:	065b      	lsls	r3, r3, #25
 800bf48:	d500      	bpl.n	800bf4c <_vfiprintf_r+0x20c>
 800bf4a:	e71e      	b.n	800bd8a <_vfiprintf_r+0x4a>
 800bf4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bf4e:	e71e      	b.n	800bd8e <_vfiprintf_r+0x4e>
 800bf50:	aa07      	add	r2, sp, #28
 800bf52:	9200      	str	r2, [sp, #0]
 800bf54:	0021      	movs	r1, r4
 800bf56:	003a      	movs	r2, r7
 800bf58:	4b06      	ldr	r3, [pc, #24]	@ (800bf74 <_vfiprintf_r+0x234>)
 800bf5a:	9803      	ldr	r0, [sp, #12]
 800bf5c:	f7fb fefa 	bl	8007d54 <_printf_i>
 800bf60:	e7e3      	b.n	800bf2a <_vfiprintf_r+0x1ea>
 800bf62:	46c0      	nop			@ (mov r8, r8)
 800bf64:	0800c43e 	.word	0x0800c43e
 800bf68:	0800c444 	.word	0x0800c444
 800bf6c:	0800c448 	.word	0x0800c448
 800bf70:	080077f9 	.word	0x080077f9
 800bf74:	0800bd1d 	.word	0x0800bd1d

0800bf78 <_raise_r>:
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	0004      	movs	r4, r0
 800bf7c:	000d      	movs	r5, r1
 800bf7e:	291f      	cmp	r1, #31
 800bf80:	d904      	bls.n	800bf8c <_raise_r+0x14>
 800bf82:	2316      	movs	r3, #22
 800bf84:	6003      	str	r3, [r0, #0]
 800bf86:	2001      	movs	r0, #1
 800bf88:	4240      	negs	r0, r0
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <_raise_r+0x24>
 800bf92:	008a      	lsls	r2, r1, #2
 800bf94:	189b      	adds	r3, r3, r2
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	2a00      	cmp	r2, #0
 800bf9a:	d108      	bne.n	800bfae <_raise_r+0x36>
 800bf9c:	0020      	movs	r0, r4
 800bf9e:	f000 f831 	bl	800c004 <_getpid_r>
 800bfa2:	002a      	movs	r2, r5
 800bfa4:	0001      	movs	r1, r0
 800bfa6:	0020      	movs	r0, r4
 800bfa8:	f000 f81a 	bl	800bfe0 <_kill_r>
 800bfac:	e7ed      	b.n	800bf8a <_raise_r+0x12>
 800bfae:	2a01      	cmp	r2, #1
 800bfb0:	d009      	beq.n	800bfc6 <_raise_r+0x4e>
 800bfb2:	1c51      	adds	r1, r2, #1
 800bfb4:	d103      	bne.n	800bfbe <_raise_r+0x46>
 800bfb6:	2316      	movs	r3, #22
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	2001      	movs	r0, #1
 800bfbc:	e7e5      	b.n	800bf8a <_raise_r+0x12>
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	0028      	movs	r0, r5
 800bfc2:	6019      	str	r1, [r3, #0]
 800bfc4:	4790      	blx	r2
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	e7df      	b.n	800bf8a <_raise_r+0x12>
	...

0800bfcc <raise>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	4b03      	ldr	r3, [pc, #12]	@ (800bfdc <raise+0x10>)
 800bfd0:	0001      	movs	r1, r0
 800bfd2:	6818      	ldr	r0, [r3, #0]
 800bfd4:	f7ff ffd0 	bl	800bf78 <_raise_r>
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	20000184 	.word	0x20000184

0800bfe0 <_kill_r>:
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	b570      	push	{r4, r5, r6, lr}
 800bfe4:	4d06      	ldr	r5, [pc, #24]	@ (800c000 <_kill_r+0x20>)
 800bfe6:	0004      	movs	r4, r0
 800bfe8:	0008      	movs	r0, r1
 800bfea:	0011      	movs	r1, r2
 800bfec:	602b      	str	r3, [r5, #0]
 800bfee:	f7f8 fbd8 	bl	80047a2 <_kill>
 800bff2:	1c43      	adds	r3, r0, #1
 800bff4:	d103      	bne.n	800bffe <_kill_r+0x1e>
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d000      	beq.n	800bffe <_kill_r+0x1e>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	20000898 	.word	0x20000898

0800c004 <_getpid_r>:
 800c004:	b510      	push	{r4, lr}
 800c006:	f7f8 fbc6 	bl	8004796 <_getpid>
 800c00a:	bd10      	pop	{r4, pc}

0800c00c <_init>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	46c0      	nop			@ (mov r8, r8)
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr

0800c018 <_fini>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	46c0      	nop			@ (mov r8, r8)
 800c01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01e:	bc08      	pop	{r3}
 800c020:	469e      	mov	lr, r3
 800c022:	4770      	bx	lr
